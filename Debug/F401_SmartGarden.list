
F401_SmartGarden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb0  080401a0  080401a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0804a050  0804a050  0001a050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804a52c  0804a52c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0804a52c  0804a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804a534  0804a534  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804a534  0804a534  0001a534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804a538  0804a538  0001a538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0804a53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041bc  200001e0  0804a71c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000439c  0804a71c  0002439c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b88a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e57  00000000  00000000  0003ba9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00040f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5c3  00000000  00000000  000423a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a992  00000000  00000000  0005c96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a9d2  00000000  00000000  000772fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df8  00000000  00000000  00111d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401a0 <__do_global_dtors_aux>:
 80401a0:	b510      	push	{r4, lr}
 80401a2:	4c05      	ldr	r4, [pc, #20]	; (80401b8 <__do_global_dtors_aux+0x18>)
 80401a4:	7823      	ldrb	r3, [r4, #0]
 80401a6:	b933      	cbnz	r3, 80401b6 <__do_global_dtors_aux+0x16>
 80401a8:	4b04      	ldr	r3, [pc, #16]	; (80401bc <__do_global_dtors_aux+0x1c>)
 80401aa:	b113      	cbz	r3, 80401b2 <__do_global_dtors_aux+0x12>
 80401ac:	4804      	ldr	r0, [pc, #16]	; (80401c0 <__do_global_dtors_aux+0x20>)
 80401ae:	f3af 8000 	nop.w
 80401b2:	2301      	movs	r3, #1
 80401b4:	7023      	strb	r3, [r4, #0]
 80401b6:	bd10      	pop	{r4, pc}
 80401b8:	200001e0 	.word	0x200001e0
 80401bc:	00000000 	.word	0x00000000
 80401c0:	0804a038 	.word	0x0804a038

080401c4 <frame_dummy>:
 80401c4:	b508      	push	{r3, lr}
 80401c6:	4b03      	ldr	r3, [pc, #12]	; (80401d4 <frame_dummy+0x10>)
 80401c8:	b11b      	cbz	r3, 80401d2 <frame_dummy+0xe>
 80401ca:	4903      	ldr	r1, [pc, #12]	; (80401d8 <frame_dummy+0x14>)
 80401cc:	4803      	ldr	r0, [pc, #12]	; (80401dc <frame_dummy+0x18>)
 80401ce:	f3af 8000 	nop.w
 80401d2:	bd08      	pop	{r3, pc}
 80401d4:	00000000 	.word	0x00000000
 80401d8:	200001e4 	.word	0x200001e4
 80401dc:	0804a038 	.word	0x0804a038

080401e0 <strlen>:
 80401e0:	4603      	mov	r3, r0
 80401e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80401e6:	2a00      	cmp	r2, #0
 80401e8:	d1fb      	bne.n	80401e2 <strlen+0x2>
 80401ea:	1a18      	subs	r0, r3, r0
 80401ec:	3801      	subs	r0, #1
 80401ee:	4770      	bx	lr

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <__aeabi_drsub>:
 8040290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8040294:	e002      	b.n	804029c <__adddf3>
 8040296:	bf00      	nop

08040298 <__aeabi_dsub>:
 8040298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0804029c <__adddf3>:
 804029c:	b530      	push	{r4, r5, lr}
 804029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80402a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80402a6:	ea94 0f05 	teq	r4, r5
 80402aa:	bf08      	it	eq
 80402ac:	ea90 0f02 	teqeq	r0, r2
 80402b0:	bf1f      	itttt	ne
 80402b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80402b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80402ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80402be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80402c2:	f000 80e2 	beq.w	804048a <__adddf3+0x1ee>
 80402c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80402ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80402ce:	bfb8      	it	lt
 80402d0:	426d      	neglt	r5, r5
 80402d2:	dd0c      	ble.n	80402ee <__adddf3+0x52>
 80402d4:	442c      	add	r4, r5
 80402d6:	ea80 0202 	eor.w	r2, r0, r2
 80402da:	ea81 0303 	eor.w	r3, r1, r3
 80402de:	ea82 0000 	eor.w	r0, r2, r0
 80402e2:	ea83 0101 	eor.w	r1, r3, r1
 80402e6:	ea80 0202 	eor.w	r2, r0, r2
 80402ea:	ea81 0303 	eor.w	r3, r1, r3
 80402ee:	2d36      	cmp	r5, #54	; 0x36
 80402f0:	bf88      	it	hi
 80402f2:	bd30      	pophi	{r4, r5, pc}
 80402f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8040300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040304:	d002      	beq.n	804030c <__adddf3+0x70>
 8040306:	4240      	negs	r0, r0
 8040308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040318:	d002      	beq.n	8040320 <__adddf3+0x84>
 804031a:	4252      	negs	r2, r2
 804031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040320:	ea94 0f05 	teq	r4, r5
 8040324:	f000 80a7 	beq.w	8040476 <__adddf3+0x1da>
 8040328:	f1a4 0401 	sub.w	r4, r4, #1
 804032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040330:	db0d      	blt.n	804034e <__adddf3+0xb2>
 8040332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040336:	fa22 f205 	lsr.w	r2, r2, r5
 804033a:	1880      	adds	r0, r0, r2
 804033c:	f141 0100 	adc.w	r1, r1, #0
 8040340:	fa03 f20e 	lsl.w	r2, r3, lr
 8040344:	1880      	adds	r0, r0, r2
 8040346:	fa43 f305 	asr.w	r3, r3, r5
 804034a:	4159      	adcs	r1, r3
 804034c:	e00e      	b.n	804036c <__adddf3+0xd0>
 804034e:	f1a5 0520 	sub.w	r5, r5, #32
 8040352:	f10e 0e20 	add.w	lr, lr, #32
 8040356:	2a01      	cmp	r2, #1
 8040358:	fa03 fc0e 	lsl.w	ip, r3, lr
 804035c:	bf28      	it	cs
 804035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8040362:	fa43 f305 	asr.w	r3, r3, r5
 8040366:	18c0      	adds	r0, r0, r3
 8040368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 804036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040370:	d507      	bpl.n	8040382 <__adddf3+0xe6>
 8040372:	f04f 0e00 	mov.w	lr, #0
 8040376:	f1dc 0c00 	rsbs	ip, ip, #0
 804037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 804037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8040382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8040386:	d31b      	bcc.n	80403c0 <__adddf3+0x124>
 8040388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 804038c:	d30c      	bcc.n	80403a8 <__adddf3+0x10c>
 804038e:	0849      	lsrs	r1, r1, #1
 8040390:	ea5f 0030 	movs.w	r0, r0, rrx
 8040394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040398:	f104 0401 	add.w	r4, r4, #1
 804039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80403a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80403a4:	f080 809a 	bcs.w	80404dc <__adddf3+0x240>
 80403a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80403ac:	bf08      	it	eq
 80403ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80403b2:	f150 0000 	adcs.w	r0, r0, #0
 80403b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80403ba:	ea41 0105 	orr.w	r1, r1, r5
 80403be:	bd30      	pop	{r4, r5, pc}
 80403c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80403c4:	4140      	adcs	r0, r0
 80403c6:	eb41 0101 	adc.w	r1, r1, r1
 80403ca:	3c01      	subs	r4, #1
 80403cc:	bf28      	it	cs
 80403ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80403d2:	d2e9      	bcs.n	80403a8 <__adddf3+0x10c>
 80403d4:	f091 0f00 	teq	r1, #0
 80403d8:	bf04      	itt	eq
 80403da:	4601      	moveq	r1, r0
 80403dc:	2000      	moveq	r0, #0
 80403de:	fab1 f381 	clz	r3, r1
 80403e2:	bf08      	it	eq
 80403e4:	3320      	addeq	r3, #32
 80403e6:	f1a3 030b 	sub.w	r3, r3, #11
 80403ea:	f1b3 0220 	subs.w	r2, r3, #32
 80403ee:	da0c      	bge.n	804040a <__adddf3+0x16e>
 80403f0:	320c      	adds	r2, #12
 80403f2:	dd08      	ble.n	8040406 <__adddf3+0x16a>
 80403f4:	f102 0c14 	add.w	ip, r2, #20
 80403f8:	f1c2 020c 	rsb	r2, r2, #12
 80403fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8040400:	fa21 f102 	lsr.w	r1, r1, r2
 8040404:	e00c      	b.n	8040420 <__adddf3+0x184>
 8040406:	f102 0214 	add.w	r2, r2, #20
 804040a:	bfd8      	it	le
 804040c:	f1c2 0c20 	rsble	ip, r2, #32
 8040410:	fa01 f102 	lsl.w	r1, r1, r2
 8040414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040418:	bfdc      	itt	le
 804041a:	ea41 010c 	orrle.w	r1, r1, ip
 804041e:	4090      	lslle	r0, r2
 8040420:	1ae4      	subs	r4, r4, r3
 8040422:	bfa2      	ittt	ge
 8040424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040428:	4329      	orrge	r1, r5
 804042a:	bd30      	popge	{r4, r5, pc}
 804042c:	ea6f 0404 	mvn.w	r4, r4
 8040430:	3c1f      	subs	r4, #31
 8040432:	da1c      	bge.n	804046e <__adddf3+0x1d2>
 8040434:	340c      	adds	r4, #12
 8040436:	dc0e      	bgt.n	8040456 <__adddf3+0x1ba>
 8040438:	f104 0414 	add.w	r4, r4, #20
 804043c:	f1c4 0220 	rsb	r2, r4, #32
 8040440:	fa20 f004 	lsr.w	r0, r0, r4
 8040444:	fa01 f302 	lsl.w	r3, r1, r2
 8040448:	ea40 0003 	orr.w	r0, r0, r3
 804044c:	fa21 f304 	lsr.w	r3, r1, r4
 8040450:	ea45 0103 	orr.w	r1, r5, r3
 8040454:	bd30      	pop	{r4, r5, pc}
 8040456:	f1c4 040c 	rsb	r4, r4, #12
 804045a:	f1c4 0220 	rsb	r2, r4, #32
 804045e:	fa20 f002 	lsr.w	r0, r0, r2
 8040462:	fa01 f304 	lsl.w	r3, r1, r4
 8040466:	ea40 0003 	orr.w	r0, r0, r3
 804046a:	4629      	mov	r1, r5
 804046c:	bd30      	pop	{r4, r5, pc}
 804046e:	fa21 f004 	lsr.w	r0, r1, r4
 8040472:	4629      	mov	r1, r5
 8040474:	bd30      	pop	{r4, r5, pc}
 8040476:	f094 0f00 	teq	r4, #0
 804047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 804047e:	bf06      	itte	eq
 8040480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8040484:	3401      	addeq	r4, #1
 8040486:	3d01      	subne	r5, #1
 8040488:	e74e      	b.n	8040328 <__adddf3+0x8c>
 804048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804048e:	bf18      	it	ne
 8040490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040494:	d029      	beq.n	80404ea <__adddf3+0x24e>
 8040496:	ea94 0f05 	teq	r4, r5
 804049a:	bf08      	it	eq
 804049c:	ea90 0f02 	teqeq	r0, r2
 80404a0:	d005      	beq.n	80404ae <__adddf3+0x212>
 80404a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80404a6:	bf04      	itt	eq
 80404a8:	4619      	moveq	r1, r3
 80404aa:	4610      	moveq	r0, r2
 80404ac:	bd30      	pop	{r4, r5, pc}
 80404ae:	ea91 0f03 	teq	r1, r3
 80404b2:	bf1e      	ittt	ne
 80404b4:	2100      	movne	r1, #0
 80404b6:	2000      	movne	r0, #0
 80404b8:	bd30      	popne	{r4, r5, pc}
 80404ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80404be:	d105      	bne.n	80404cc <__adddf3+0x230>
 80404c0:	0040      	lsls	r0, r0, #1
 80404c2:	4149      	adcs	r1, r1
 80404c4:	bf28      	it	cs
 80404c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80404ca:	bd30      	pop	{r4, r5, pc}
 80404cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80404d0:	bf3c      	itt	cc
 80404d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80404d6:	bd30      	popcc	{r4, r5, pc}
 80404d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80404dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80404e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80404e4:	f04f 0000 	mov.w	r0, #0
 80404e8:	bd30      	pop	{r4, r5, pc}
 80404ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404ee:	bf1a      	itte	ne
 80404f0:	4619      	movne	r1, r3
 80404f2:	4610      	movne	r0, r2
 80404f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404f8:	bf1c      	itt	ne
 80404fa:	460b      	movne	r3, r1
 80404fc:	4602      	movne	r2, r0
 80404fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040502:	bf06      	itte	eq
 8040504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040508:	ea91 0f03 	teqeq	r1, r3
 804050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040510:	bd30      	pop	{r4, r5, pc}
 8040512:	bf00      	nop

08040514 <__aeabi_ui2d>:
 8040514:	f090 0f00 	teq	r0, #0
 8040518:	bf04      	itt	eq
 804051a:	2100      	moveq	r1, #0
 804051c:	4770      	bxeq	lr
 804051e:	b530      	push	{r4, r5, lr}
 8040520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040528:	f04f 0500 	mov.w	r5, #0
 804052c:	f04f 0100 	mov.w	r1, #0
 8040530:	e750      	b.n	80403d4 <__adddf3+0x138>
 8040532:	bf00      	nop

08040534 <__aeabi_i2d>:
 8040534:	f090 0f00 	teq	r0, #0
 8040538:	bf04      	itt	eq
 804053a:	2100      	moveq	r1, #0
 804053c:	4770      	bxeq	lr
 804053e:	b530      	push	{r4, r5, lr}
 8040540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804054c:	bf48      	it	mi
 804054e:	4240      	negmi	r0, r0
 8040550:	f04f 0100 	mov.w	r1, #0
 8040554:	e73e      	b.n	80403d4 <__adddf3+0x138>
 8040556:	bf00      	nop

08040558 <__aeabi_f2d>:
 8040558:	0042      	lsls	r2, r0, #1
 804055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 804055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8040562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8040566:	bf1f      	itttt	ne
 8040568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 804056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8040574:	4770      	bxne	lr
 8040576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 804057a:	bf08      	it	eq
 804057c:	4770      	bxeq	lr
 804057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8040582:	bf04      	itt	eq
 8040584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040588:	4770      	bxeq	lr
 804058a:	b530      	push	{r4, r5, lr}
 804058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040598:	e71c      	b.n	80403d4 <__adddf3+0x138>
 804059a:	bf00      	nop

0804059c <__aeabi_ul2d>:
 804059c:	ea50 0201 	orrs.w	r2, r0, r1
 80405a0:	bf08      	it	eq
 80405a2:	4770      	bxeq	lr
 80405a4:	b530      	push	{r4, r5, lr}
 80405a6:	f04f 0500 	mov.w	r5, #0
 80405aa:	e00a      	b.n	80405c2 <__aeabi_l2d+0x16>

080405ac <__aeabi_l2d>:
 80405ac:	ea50 0201 	orrs.w	r2, r0, r1
 80405b0:	bf08      	it	eq
 80405b2:	4770      	bxeq	lr
 80405b4:	b530      	push	{r4, r5, lr}
 80405b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80405ba:	d502      	bpl.n	80405c2 <__aeabi_l2d+0x16>
 80405bc:	4240      	negs	r0, r0
 80405be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80405c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80405c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80405ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80405ce:	f43f aed8 	beq.w	8040382 <__adddf3+0xe6>
 80405d2:	f04f 0203 	mov.w	r2, #3
 80405d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405da:	bf18      	it	ne
 80405dc:	3203      	addne	r2, #3
 80405de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405e2:	bf18      	it	ne
 80405e4:	3203      	addne	r2, #3
 80405e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405ea:	f1c2 0320 	rsb	r3, r2, #32
 80405ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80405f2:	fa20 f002 	lsr.w	r0, r0, r2
 80405f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80405fa:	ea40 000e 	orr.w	r0, r0, lr
 80405fe:	fa21 f102 	lsr.w	r1, r1, r2
 8040602:	4414      	add	r4, r2
 8040604:	e6bd      	b.n	8040382 <__adddf3+0xe6>
 8040606:	bf00      	nop

08040608 <__aeabi_dmul>:
 8040608:	b570      	push	{r4, r5, r6, lr}
 804060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040616:	bf1d      	ittte	ne
 8040618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804061c:	ea94 0f0c 	teqne	r4, ip
 8040620:	ea95 0f0c 	teqne	r5, ip
 8040624:	f000 f8de 	bleq	80407e4 <__aeabi_dmul+0x1dc>
 8040628:	442c      	add	r4, r5
 804062a:	ea81 0603 	eor.w	r6, r1, r3
 804062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804063a:	bf18      	it	ne
 804063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040648:	d038      	beq.n	80406bc <__aeabi_dmul+0xb4>
 804064a:	fba0 ce02 	umull	ip, lr, r0, r2
 804064e:	f04f 0500 	mov.w	r5, #0
 8040652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8040656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 804065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 804065e:	f04f 0600 	mov.w	r6, #0
 8040662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8040666:	f09c 0f00 	teq	ip, #0
 804066a:	bf18      	it	ne
 804066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8040670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8040674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 804067c:	d204      	bcs.n	8040688 <__aeabi_dmul+0x80>
 804067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8040682:	416d      	adcs	r5, r5
 8040684:	eb46 0606 	adc.w	r6, r6, r6
 8040688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 804068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8040694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 804069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80406a0:	bf88      	it	hi
 80406a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80406a6:	d81e      	bhi.n	80406e6 <__aeabi_dmul+0xde>
 80406a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80406ac:	bf08      	it	eq
 80406ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80406b2:	f150 0000 	adcs.w	r0, r0, #0
 80406b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80406ba:	bd70      	pop	{r4, r5, r6, pc}
 80406bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80406c0:	ea46 0101 	orr.w	r1, r6, r1
 80406c4:	ea40 0002 	orr.w	r0, r0, r2
 80406c8:	ea81 0103 	eor.w	r1, r1, r3
 80406cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80406d0:	bfc2      	ittt	gt
 80406d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80406d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80406da:	bd70      	popgt	{r4, r5, r6, pc}
 80406dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80406e0:	f04f 0e00 	mov.w	lr, #0
 80406e4:	3c01      	subs	r4, #1
 80406e6:	f300 80ab 	bgt.w	8040840 <__aeabi_dmul+0x238>
 80406ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80406ee:	bfde      	ittt	le
 80406f0:	2000      	movle	r0, #0
 80406f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80406f6:	bd70      	pople	{r4, r5, r6, pc}
 80406f8:	f1c4 0400 	rsb	r4, r4, #0
 80406fc:	3c20      	subs	r4, #32
 80406fe:	da35      	bge.n	804076c <__aeabi_dmul+0x164>
 8040700:	340c      	adds	r4, #12
 8040702:	dc1b      	bgt.n	804073c <__aeabi_dmul+0x134>
 8040704:	f104 0414 	add.w	r4, r4, #20
 8040708:	f1c4 0520 	rsb	r5, r4, #32
 804070c:	fa00 f305 	lsl.w	r3, r0, r5
 8040710:	fa20 f004 	lsr.w	r0, r0, r4
 8040714:	fa01 f205 	lsl.w	r2, r1, r5
 8040718:	ea40 0002 	orr.w	r0, r0, r2
 804071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040728:	fa21 f604 	lsr.w	r6, r1, r4
 804072c:	eb42 0106 	adc.w	r1, r2, r6
 8040730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040734:	bf08      	it	eq
 8040736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804073a:	bd70      	pop	{r4, r5, r6, pc}
 804073c:	f1c4 040c 	rsb	r4, r4, #12
 8040740:	f1c4 0520 	rsb	r5, r4, #32
 8040744:	fa00 f304 	lsl.w	r3, r0, r4
 8040748:	fa20 f005 	lsr.w	r0, r0, r5
 804074c:	fa01 f204 	lsl.w	r2, r1, r4
 8040750:	ea40 0002 	orr.w	r0, r0, r2
 8040754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 804075c:	f141 0100 	adc.w	r1, r1, #0
 8040760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040764:	bf08      	it	eq
 8040766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804076a:	bd70      	pop	{r4, r5, r6, pc}
 804076c:	f1c4 0520 	rsb	r5, r4, #32
 8040770:	fa00 f205 	lsl.w	r2, r0, r5
 8040774:	ea4e 0e02 	orr.w	lr, lr, r2
 8040778:	fa20 f304 	lsr.w	r3, r0, r4
 804077c:	fa01 f205 	lsl.w	r2, r1, r5
 8040780:	ea43 0302 	orr.w	r3, r3, r2
 8040784:	fa21 f004 	lsr.w	r0, r1, r4
 8040788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 804078c:	fa21 f204 	lsr.w	r2, r1, r4
 8040790:	ea20 0002 	bic.w	r0, r0, r2
 8040794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804079c:	bf08      	it	eq
 804079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80407a2:	bd70      	pop	{r4, r5, r6, pc}
 80407a4:	f094 0f00 	teq	r4, #0
 80407a8:	d10f      	bne.n	80407ca <__aeabi_dmul+0x1c2>
 80407aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80407ae:	0040      	lsls	r0, r0, #1
 80407b0:	eb41 0101 	adc.w	r1, r1, r1
 80407b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80407b8:	bf08      	it	eq
 80407ba:	3c01      	subeq	r4, #1
 80407bc:	d0f7      	beq.n	80407ae <__aeabi_dmul+0x1a6>
 80407be:	ea41 0106 	orr.w	r1, r1, r6
 80407c2:	f095 0f00 	teq	r5, #0
 80407c6:	bf18      	it	ne
 80407c8:	4770      	bxne	lr
 80407ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80407ce:	0052      	lsls	r2, r2, #1
 80407d0:	eb43 0303 	adc.w	r3, r3, r3
 80407d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80407d8:	bf08      	it	eq
 80407da:	3d01      	subeq	r5, #1
 80407dc:	d0f7      	beq.n	80407ce <__aeabi_dmul+0x1c6>
 80407de:	ea43 0306 	orr.w	r3, r3, r6
 80407e2:	4770      	bx	lr
 80407e4:	ea94 0f0c 	teq	r4, ip
 80407e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407ec:	bf18      	it	ne
 80407ee:	ea95 0f0c 	teqne	r5, ip
 80407f2:	d00c      	beq.n	804080e <__aeabi_dmul+0x206>
 80407f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407f8:	bf18      	it	ne
 80407fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407fe:	d1d1      	bne.n	80407a4 <__aeabi_dmul+0x19c>
 8040800:	ea81 0103 	eor.w	r1, r1, r3
 8040804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040808:	f04f 0000 	mov.w	r0, #0
 804080c:	bd70      	pop	{r4, r5, r6, pc}
 804080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040812:	bf06      	itte	eq
 8040814:	4610      	moveq	r0, r2
 8040816:	4619      	moveq	r1, r3
 8040818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804081c:	d019      	beq.n	8040852 <__aeabi_dmul+0x24a>
 804081e:	ea94 0f0c 	teq	r4, ip
 8040822:	d102      	bne.n	804082a <__aeabi_dmul+0x222>
 8040824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040828:	d113      	bne.n	8040852 <__aeabi_dmul+0x24a>
 804082a:	ea95 0f0c 	teq	r5, ip
 804082e:	d105      	bne.n	804083c <__aeabi_dmul+0x234>
 8040830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040834:	bf1c      	itt	ne
 8040836:	4610      	movne	r0, r2
 8040838:	4619      	movne	r1, r3
 804083a:	d10a      	bne.n	8040852 <__aeabi_dmul+0x24a>
 804083c:	ea81 0103 	eor.w	r1, r1, r3
 8040840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804084c:	f04f 0000 	mov.w	r0, #0
 8040850:	bd70      	pop	{r4, r5, r6, pc}
 8040852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 804085a:	bd70      	pop	{r4, r5, r6, pc}

0804085c <__aeabi_ddiv>:
 804085c:	b570      	push	{r4, r5, r6, lr}
 804085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 804086a:	bf1d      	ittte	ne
 804086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040870:	ea94 0f0c 	teqne	r4, ip
 8040874:	ea95 0f0c 	teqne	r5, ip
 8040878:	f000 f8a7 	bleq	80409ca <__aeabi_ddiv+0x16e>
 804087c:	eba4 0405 	sub.w	r4, r4, r5
 8040880:	ea81 0e03 	eor.w	lr, r1, r3
 8040884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804088c:	f000 8088 	beq.w	80409a0 <__aeabi_ddiv+0x144>
 8040890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 804089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80408a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80408a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80408a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80408ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80408b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80408b4:	429d      	cmp	r5, r3
 80408b6:	bf08      	it	eq
 80408b8:	4296      	cmpeq	r6, r2
 80408ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80408be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80408c2:	d202      	bcs.n	80408ca <__aeabi_ddiv+0x6e>
 80408c4:	085b      	lsrs	r3, r3, #1
 80408c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ca:	1ab6      	subs	r6, r6, r2
 80408cc:	eb65 0503 	sbc.w	r5, r5, r3
 80408d0:	085b      	lsrs	r3, r3, #1
 80408d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80408da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80408de:	ebb6 0e02 	subs.w	lr, r6, r2
 80408e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408e6:	bf22      	ittt	cs
 80408e8:	1ab6      	subcs	r6, r6, r2
 80408ea:	4675      	movcs	r5, lr
 80408ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80408f0:	085b      	lsrs	r3, r3, #1
 80408f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408fe:	bf22      	ittt	cs
 8040900:	1ab6      	subcs	r6, r6, r2
 8040902:	4675      	movcs	r5, lr
 8040904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040908:	085b      	lsrs	r3, r3, #1
 804090a:	ea4f 0232 	mov.w	r2, r2, rrx
 804090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040916:	bf22      	ittt	cs
 8040918:	1ab6      	subcs	r6, r6, r2
 804091a:	4675      	movcs	r5, lr
 804091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040920:	085b      	lsrs	r3, r3, #1
 8040922:	ea4f 0232 	mov.w	r2, r2, rrx
 8040926:	ebb6 0e02 	subs.w	lr, r6, r2
 804092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804092e:	bf22      	ittt	cs
 8040930:	1ab6      	subcs	r6, r6, r2
 8040932:	4675      	movcs	r5, lr
 8040934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040938:	ea55 0e06 	orrs.w	lr, r5, r6
 804093c:	d018      	beq.n	8040970 <__aeabi_ddiv+0x114>
 804093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 804094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 804094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 804095a:	d1c0      	bne.n	80408de <__aeabi_ddiv+0x82>
 804095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040960:	d10b      	bne.n	804097a <__aeabi_ddiv+0x11e>
 8040962:	ea41 0100 	orr.w	r1, r1, r0
 8040966:	f04f 0000 	mov.w	r0, #0
 804096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 804096e:	e7b6      	b.n	80408de <__aeabi_ddiv+0x82>
 8040970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040974:	bf04      	itt	eq
 8040976:	4301      	orreq	r1, r0
 8040978:	2000      	moveq	r0, #0
 804097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 804097e:	bf88      	it	hi
 8040980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040984:	f63f aeaf 	bhi.w	80406e6 <__aeabi_dmul+0xde>
 8040988:	ebb5 0c03 	subs.w	ip, r5, r3
 804098c:	bf04      	itt	eq
 804098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040996:	f150 0000 	adcs.w	r0, r0, #0
 804099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804099e:	bd70      	pop	{r4, r5, r6, pc}
 80409a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80409a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80409a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80409ac:	bfc2      	ittt	gt
 80409ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80409b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80409b6:	bd70      	popgt	{r4, r5, r6, pc}
 80409b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80409bc:	f04f 0e00 	mov.w	lr, #0
 80409c0:	3c01      	subs	r4, #1
 80409c2:	e690      	b.n	80406e6 <__aeabi_dmul+0xde>
 80409c4:	ea45 0e06 	orr.w	lr, r5, r6
 80409c8:	e68d      	b.n	80406e6 <__aeabi_dmul+0xde>
 80409ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80409ce:	ea94 0f0c 	teq	r4, ip
 80409d2:	bf08      	it	eq
 80409d4:	ea95 0f0c 	teqeq	r5, ip
 80409d8:	f43f af3b 	beq.w	8040852 <__aeabi_dmul+0x24a>
 80409dc:	ea94 0f0c 	teq	r4, ip
 80409e0:	d10a      	bne.n	80409f8 <__aeabi_ddiv+0x19c>
 80409e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80409e6:	f47f af34 	bne.w	8040852 <__aeabi_dmul+0x24a>
 80409ea:	ea95 0f0c 	teq	r5, ip
 80409ee:	f47f af25 	bne.w	804083c <__aeabi_dmul+0x234>
 80409f2:	4610      	mov	r0, r2
 80409f4:	4619      	mov	r1, r3
 80409f6:	e72c      	b.n	8040852 <__aeabi_dmul+0x24a>
 80409f8:	ea95 0f0c 	teq	r5, ip
 80409fc:	d106      	bne.n	8040a0c <__aeabi_ddiv+0x1b0>
 80409fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040a02:	f43f aefd 	beq.w	8040800 <__aeabi_dmul+0x1f8>
 8040a06:	4610      	mov	r0, r2
 8040a08:	4619      	mov	r1, r3
 8040a0a:	e722      	b.n	8040852 <__aeabi_dmul+0x24a>
 8040a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a10:	bf18      	it	ne
 8040a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a16:	f47f aec5 	bne.w	80407a4 <__aeabi_dmul+0x19c>
 8040a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040a1e:	f47f af0d 	bne.w	804083c <__aeabi_dmul+0x234>
 8040a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040a26:	f47f aeeb 	bne.w	8040800 <__aeabi_dmul+0x1f8>
 8040a2a:	e712      	b.n	8040852 <__aeabi_dmul+0x24a>

08040a2c <__gedf2>:
 8040a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8040a30:	e006      	b.n	8040a40 <__cmpdf2+0x4>
 8040a32:	bf00      	nop

08040a34 <__ledf2>:
 8040a34:	f04f 0c01 	mov.w	ip, #1
 8040a38:	e002      	b.n	8040a40 <__cmpdf2+0x4>
 8040a3a:	bf00      	nop

08040a3c <__cmpdf2>:
 8040a3c:	f04f 0c01 	mov.w	ip, #1
 8040a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a50:	bf18      	it	ne
 8040a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a56:	d01b      	beq.n	8040a90 <__cmpdf2+0x54>
 8040a58:	b001      	add	sp, #4
 8040a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a5e:	bf0c      	ite	eq
 8040a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a64:	ea91 0f03 	teqne	r1, r3
 8040a68:	bf02      	ittt	eq
 8040a6a:	ea90 0f02 	teqeq	r0, r2
 8040a6e:	2000      	moveq	r0, #0
 8040a70:	4770      	bxeq	lr
 8040a72:	f110 0f00 	cmn.w	r0, #0
 8040a76:	ea91 0f03 	teq	r1, r3
 8040a7a:	bf58      	it	pl
 8040a7c:	4299      	cmppl	r1, r3
 8040a7e:	bf08      	it	eq
 8040a80:	4290      	cmpeq	r0, r2
 8040a82:	bf2c      	ite	cs
 8040a84:	17d8      	asrcs	r0, r3, #31
 8040a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a8a:	f040 0001 	orr.w	r0, r0, #1
 8040a8e:	4770      	bx	lr
 8040a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a98:	d102      	bne.n	8040aa0 <__cmpdf2+0x64>
 8040a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040a9e:	d107      	bne.n	8040ab0 <__cmpdf2+0x74>
 8040aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040aa8:	d1d6      	bne.n	8040a58 <__cmpdf2+0x1c>
 8040aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040aae:	d0d3      	beq.n	8040a58 <__cmpdf2+0x1c>
 8040ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040ab4:	4770      	bx	lr
 8040ab6:	bf00      	nop

08040ab8 <__aeabi_cdrcmple>:
 8040ab8:	4684      	mov	ip, r0
 8040aba:	4610      	mov	r0, r2
 8040abc:	4662      	mov	r2, ip
 8040abe:	468c      	mov	ip, r1
 8040ac0:	4619      	mov	r1, r3
 8040ac2:	4663      	mov	r3, ip
 8040ac4:	e000      	b.n	8040ac8 <__aeabi_cdcmpeq>
 8040ac6:	bf00      	nop

08040ac8 <__aeabi_cdcmpeq>:
 8040ac8:	b501      	push	{r0, lr}
 8040aca:	f7ff ffb7 	bl	8040a3c <__cmpdf2>
 8040ace:	2800      	cmp	r0, #0
 8040ad0:	bf48      	it	mi
 8040ad2:	f110 0f00 	cmnmi.w	r0, #0
 8040ad6:	bd01      	pop	{r0, pc}

08040ad8 <__aeabi_dcmpeq>:
 8040ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040adc:	f7ff fff4 	bl	8040ac8 <__aeabi_cdcmpeq>
 8040ae0:	bf0c      	ite	eq
 8040ae2:	2001      	moveq	r0, #1
 8040ae4:	2000      	movne	r0, #0
 8040ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aea:	bf00      	nop

08040aec <__aeabi_dcmplt>:
 8040aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040af0:	f7ff ffea 	bl	8040ac8 <__aeabi_cdcmpeq>
 8040af4:	bf34      	ite	cc
 8040af6:	2001      	movcc	r0, #1
 8040af8:	2000      	movcs	r0, #0
 8040afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8040afe:	bf00      	nop

08040b00 <__aeabi_dcmple>:
 8040b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b04:	f7ff ffe0 	bl	8040ac8 <__aeabi_cdcmpeq>
 8040b08:	bf94      	ite	ls
 8040b0a:	2001      	movls	r0, #1
 8040b0c:	2000      	movhi	r0, #0
 8040b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b12:	bf00      	nop

08040b14 <__aeabi_dcmpge>:
 8040b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b18:	f7ff ffce 	bl	8040ab8 <__aeabi_cdrcmple>
 8040b1c:	bf94      	ite	ls
 8040b1e:	2001      	movls	r0, #1
 8040b20:	2000      	movhi	r0, #0
 8040b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b26:	bf00      	nop

08040b28 <__aeabi_dcmpgt>:
 8040b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b2c:	f7ff ffc4 	bl	8040ab8 <__aeabi_cdrcmple>
 8040b30:	bf34      	ite	cc
 8040b32:	2001      	movcc	r0, #1
 8040b34:	2000      	movcs	r0, #0
 8040b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b3a:	bf00      	nop

08040b3c <__aeabi_dcmpun>:
 8040b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b44:	d102      	bne.n	8040b4c <__aeabi_dcmpun+0x10>
 8040b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040b4a:	d10a      	bne.n	8040b62 <__aeabi_dcmpun+0x26>
 8040b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b54:	d102      	bne.n	8040b5c <__aeabi_dcmpun+0x20>
 8040b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040b5a:	d102      	bne.n	8040b62 <__aeabi_dcmpun+0x26>
 8040b5c:	f04f 0000 	mov.w	r0, #0
 8040b60:	4770      	bx	lr
 8040b62:	f04f 0001 	mov.w	r0, #1
 8040b66:	4770      	bx	lr

08040b68 <__aeabi_d2iz>:
 8040b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040b70:	d215      	bcs.n	8040b9e <__aeabi_d2iz+0x36>
 8040b72:	d511      	bpl.n	8040b98 <__aeabi_d2iz+0x30>
 8040b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b7c:	d912      	bls.n	8040ba4 <__aeabi_d2iz+0x3c>
 8040b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8040b92:	bf18      	it	ne
 8040b94:	4240      	negne	r0, r0
 8040b96:	4770      	bx	lr
 8040b98:	f04f 0000 	mov.w	r0, #0
 8040b9c:	4770      	bx	lr
 8040b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040ba2:	d105      	bne.n	8040bb0 <__aeabi_d2iz+0x48>
 8040ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040ba8:	bf08      	it	eq
 8040baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040bae:	4770      	bx	lr
 8040bb0:	f04f 0000 	mov.w	r0, #0
 8040bb4:	4770      	bx	lr
 8040bb6:	bf00      	nop

08040bb8 <__aeabi_uldivmod>:
 8040bb8:	b953      	cbnz	r3, 8040bd0 <__aeabi_uldivmod+0x18>
 8040bba:	b94a      	cbnz	r2, 8040bd0 <__aeabi_uldivmod+0x18>
 8040bbc:	2900      	cmp	r1, #0
 8040bbe:	bf08      	it	eq
 8040bc0:	2800      	cmpeq	r0, #0
 8040bc2:	bf1c      	itt	ne
 8040bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8040bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8040bcc:	f000 b974 	b.w	8040eb8 <__aeabi_idiv0>
 8040bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8040bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040bd8:	f000 f806 	bl	8040be8 <__udivmoddi4>
 8040bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040be4:	b004      	add	sp, #16
 8040be6:	4770      	bx	lr

08040be8 <__udivmoddi4>:
 8040be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040bec:	9d08      	ldr	r5, [sp, #32]
 8040bee:	4604      	mov	r4, r0
 8040bf0:	468e      	mov	lr, r1
 8040bf2:	2b00      	cmp	r3, #0
 8040bf4:	d14d      	bne.n	8040c92 <__udivmoddi4+0xaa>
 8040bf6:	428a      	cmp	r2, r1
 8040bf8:	4694      	mov	ip, r2
 8040bfa:	d969      	bls.n	8040cd0 <__udivmoddi4+0xe8>
 8040bfc:	fab2 f282 	clz	r2, r2
 8040c00:	b152      	cbz	r2, 8040c18 <__udivmoddi4+0x30>
 8040c02:	fa01 f302 	lsl.w	r3, r1, r2
 8040c06:	f1c2 0120 	rsb	r1, r2, #32
 8040c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8040c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8040c12:	ea41 0e03 	orr.w	lr, r1, r3
 8040c16:	4094      	lsls	r4, r2
 8040c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040c1c:	0c21      	lsrs	r1, r4, #16
 8040c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8040c22:	fa1f f78c 	uxth.w	r7, ip
 8040c26:	fb08 e316 	mls	r3, r8, r6, lr
 8040c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040c2e:	fb06 f107 	mul.w	r1, r6, r7
 8040c32:	4299      	cmp	r1, r3
 8040c34:	d90a      	bls.n	8040c4c <__udivmoddi4+0x64>
 8040c36:	eb1c 0303 	adds.w	r3, ip, r3
 8040c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8040c3e:	f080 811f 	bcs.w	8040e80 <__udivmoddi4+0x298>
 8040c42:	4299      	cmp	r1, r3
 8040c44:	f240 811c 	bls.w	8040e80 <__udivmoddi4+0x298>
 8040c48:	3e02      	subs	r6, #2
 8040c4a:	4463      	add	r3, ip
 8040c4c:	1a5b      	subs	r3, r3, r1
 8040c4e:	b2a4      	uxth	r4, r4
 8040c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8040c54:	fb08 3310 	mls	r3, r8, r0, r3
 8040c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040c5c:	fb00 f707 	mul.w	r7, r0, r7
 8040c60:	42a7      	cmp	r7, r4
 8040c62:	d90a      	bls.n	8040c7a <__udivmoddi4+0x92>
 8040c64:	eb1c 0404 	adds.w	r4, ip, r4
 8040c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8040c6c:	f080 810a 	bcs.w	8040e84 <__udivmoddi4+0x29c>
 8040c70:	42a7      	cmp	r7, r4
 8040c72:	f240 8107 	bls.w	8040e84 <__udivmoddi4+0x29c>
 8040c76:	4464      	add	r4, ip
 8040c78:	3802      	subs	r0, #2
 8040c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040c7e:	1be4      	subs	r4, r4, r7
 8040c80:	2600      	movs	r6, #0
 8040c82:	b11d      	cbz	r5, 8040c8c <__udivmoddi4+0xa4>
 8040c84:	40d4      	lsrs	r4, r2
 8040c86:	2300      	movs	r3, #0
 8040c88:	e9c5 4300 	strd	r4, r3, [r5]
 8040c8c:	4631      	mov	r1, r6
 8040c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040c92:	428b      	cmp	r3, r1
 8040c94:	d909      	bls.n	8040caa <__udivmoddi4+0xc2>
 8040c96:	2d00      	cmp	r5, #0
 8040c98:	f000 80ef 	beq.w	8040e7a <__udivmoddi4+0x292>
 8040c9c:	2600      	movs	r6, #0
 8040c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8040ca2:	4630      	mov	r0, r6
 8040ca4:	4631      	mov	r1, r6
 8040ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040caa:	fab3 f683 	clz	r6, r3
 8040cae:	2e00      	cmp	r6, #0
 8040cb0:	d14a      	bne.n	8040d48 <__udivmoddi4+0x160>
 8040cb2:	428b      	cmp	r3, r1
 8040cb4:	d302      	bcc.n	8040cbc <__udivmoddi4+0xd4>
 8040cb6:	4282      	cmp	r2, r0
 8040cb8:	f200 80f9 	bhi.w	8040eae <__udivmoddi4+0x2c6>
 8040cbc:	1a84      	subs	r4, r0, r2
 8040cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8040cc2:	2001      	movs	r0, #1
 8040cc4:	469e      	mov	lr, r3
 8040cc6:	2d00      	cmp	r5, #0
 8040cc8:	d0e0      	beq.n	8040c8c <__udivmoddi4+0xa4>
 8040cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8040cce:	e7dd      	b.n	8040c8c <__udivmoddi4+0xa4>
 8040cd0:	b902      	cbnz	r2, 8040cd4 <__udivmoddi4+0xec>
 8040cd2:	deff      	udf	#255	; 0xff
 8040cd4:	fab2 f282 	clz	r2, r2
 8040cd8:	2a00      	cmp	r2, #0
 8040cda:	f040 8092 	bne.w	8040e02 <__udivmoddi4+0x21a>
 8040cde:	eba1 010c 	sub.w	r1, r1, ip
 8040ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040ce6:	fa1f fe8c 	uxth.w	lr, ip
 8040cea:	2601      	movs	r6, #1
 8040cec:	0c20      	lsrs	r0, r4, #16
 8040cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8040cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8040cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040cfa:	fb0e f003 	mul.w	r0, lr, r3
 8040cfe:	4288      	cmp	r0, r1
 8040d00:	d908      	bls.n	8040d14 <__udivmoddi4+0x12c>
 8040d02:	eb1c 0101 	adds.w	r1, ip, r1
 8040d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8040d0a:	d202      	bcs.n	8040d12 <__udivmoddi4+0x12a>
 8040d0c:	4288      	cmp	r0, r1
 8040d0e:	f200 80cb 	bhi.w	8040ea8 <__udivmoddi4+0x2c0>
 8040d12:	4643      	mov	r3, r8
 8040d14:	1a09      	subs	r1, r1, r0
 8040d16:	b2a4      	uxth	r4, r4
 8040d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8040d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8040d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040d24:	fb0e fe00 	mul.w	lr, lr, r0
 8040d28:	45a6      	cmp	lr, r4
 8040d2a:	d908      	bls.n	8040d3e <__udivmoddi4+0x156>
 8040d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8040d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8040d34:	d202      	bcs.n	8040d3c <__udivmoddi4+0x154>
 8040d36:	45a6      	cmp	lr, r4
 8040d38:	f200 80bb 	bhi.w	8040eb2 <__udivmoddi4+0x2ca>
 8040d3c:	4608      	mov	r0, r1
 8040d3e:	eba4 040e 	sub.w	r4, r4, lr
 8040d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8040d46:	e79c      	b.n	8040c82 <__udivmoddi4+0x9a>
 8040d48:	f1c6 0720 	rsb	r7, r6, #32
 8040d4c:	40b3      	lsls	r3, r6
 8040d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8040d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8040d56:	fa20 f407 	lsr.w	r4, r0, r7
 8040d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8040d5e:	431c      	orrs	r4, r3
 8040d60:	40f9      	lsrs	r1, r7
 8040d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040d66:	fa00 f306 	lsl.w	r3, r0, r6
 8040d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8040d6e:	0c20      	lsrs	r0, r4, #16
 8040d70:	fa1f fe8c 	uxth.w	lr, ip
 8040d74:	fb09 1118 	mls	r1, r9, r8, r1
 8040d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8040d80:	4288      	cmp	r0, r1
 8040d82:	fa02 f206 	lsl.w	r2, r2, r6
 8040d86:	d90b      	bls.n	8040da0 <__udivmoddi4+0x1b8>
 8040d88:	eb1c 0101 	adds.w	r1, ip, r1
 8040d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8040d90:	f080 8088 	bcs.w	8040ea4 <__udivmoddi4+0x2bc>
 8040d94:	4288      	cmp	r0, r1
 8040d96:	f240 8085 	bls.w	8040ea4 <__udivmoddi4+0x2bc>
 8040d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8040d9e:	4461      	add	r1, ip
 8040da0:	1a09      	subs	r1, r1, r0
 8040da2:	b2a4      	uxth	r4, r4
 8040da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8040da8:	fb09 1110 	mls	r1, r9, r0, r1
 8040dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8040db4:	458e      	cmp	lr, r1
 8040db6:	d908      	bls.n	8040dca <__udivmoddi4+0x1e2>
 8040db8:	eb1c 0101 	adds.w	r1, ip, r1
 8040dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8040dc0:	d26c      	bcs.n	8040e9c <__udivmoddi4+0x2b4>
 8040dc2:	458e      	cmp	lr, r1
 8040dc4:	d96a      	bls.n	8040e9c <__udivmoddi4+0x2b4>
 8040dc6:	3802      	subs	r0, #2
 8040dc8:	4461      	add	r1, ip
 8040dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040dce:	fba0 9402 	umull	r9, r4, r0, r2
 8040dd2:	eba1 010e 	sub.w	r1, r1, lr
 8040dd6:	42a1      	cmp	r1, r4
 8040dd8:	46c8      	mov	r8, r9
 8040dda:	46a6      	mov	lr, r4
 8040ddc:	d356      	bcc.n	8040e8c <__udivmoddi4+0x2a4>
 8040dde:	d053      	beq.n	8040e88 <__udivmoddi4+0x2a0>
 8040de0:	b15d      	cbz	r5, 8040dfa <__udivmoddi4+0x212>
 8040de2:	ebb3 0208 	subs.w	r2, r3, r8
 8040de6:	eb61 010e 	sbc.w	r1, r1, lr
 8040dea:	fa01 f707 	lsl.w	r7, r1, r7
 8040dee:	fa22 f306 	lsr.w	r3, r2, r6
 8040df2:	40f1      	lsrs	r1, r6
 8040df4:	431f      	orrs	r7, r3
 8040df6:	e9c5 7100 	strd	r7, r1, [r5]
 8040dfa:	2600      	movs	r6, #0
 8040dfc:	4631      	mov	r1, r6
 8040dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040e02:	f1c2 0320 	rsb	r3, r2, #32
 8040e06:	40d8      	lsrs	r0, r3
 8040e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8040e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8040e10:	4091      	lsls	r1, r2
 8040e12:	4301      	orrs	r1, r0
 8040e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040e18:	fa1f fe8c 	uxth.w	lr, ip
 8040e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8040e20:	fb07 3610 	mls	r6, r7, r0, r3
 8040e24:	0c0b      	lsrs	r3, r1, #16
 8040e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8040e2e:	429e      	cmp	r6, r3
 8040e30:	fa04 f402 	lsl.w	r4, r4, r2
 8040e34:	d908      	bls.n	8040e48 <__udivmoddi4+0x260>
 8040e36:	eb1c 0303 	adds.w	r3, ip, r3
 8040e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8040e3e:	d22f      	bcs.n	8040ea0 <__udivmoddi4+0x2b8>
 8040e40:	429e      	cmp	r6, r3
 8040e42:	d92d      	bls.n	8040ea0 <__udivmoddi4+0x2b8>
 8040e44:	3802      	subs	r0, #2
 8040e46:	4463      	add	r3, ip
 8040e48:	1b9b      	subs	r3, r3, r6
 8040e4a:	b289      	uxth	r1, r1
 8040e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8040e50:	fb07 3316 	mls	r3, r7, r6, r3
 8040e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040e58:	fb06 f30e 	mul.w	r3, r6, lr
 8040e5c:	428b      	cmp	r3, r1
 8040e5e:	d908      	bls.n	8040e72 <__udivmoddi4+0x28a>
 8040e60:	eb1c 0101 	adds.w	r1, ip, r1
 8040e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8040e68:	d216      	bcs.n	8040e98 <__udivmoddi4+0x2b0>
 8040e6a:	428b      	cmp	r3, r1
 8040e6c:	d914      	bls.n	8040e98 <__udivmoddi4+0x2b0>
 8040e6e:	3e02      	subs	r6, #2
 8040e70:	4461      	add	r1, ip
 8040e72:	1ac9      	subs	r1, r1, r3
 8040e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040e78:	e738      	b.n	8040cec <__udivmoddi4+0x104>
 8040e7a:	462e      	mov	r6, r5
 8040e7c:	4628      	mov	r0, r5
 8040e7e:	e705      	b.n	8040c8c <__udivmoddi4+0xa4>
 8040e80:	4606      	mov	r6, r0
 8040e82:	e6e3      	b.n	8040c4c <__udivmoddi4+0x64>
 8040e84:	4618      	mov	r0, r3
 8040e86:	e6f8      	b.n	8040c7a <__udivmoddi4+0x92>
 8040e88:	454b      	cmp	r3, r9
 8040e8a:	d2a9      	bcs.n	8040de0 <__udivmoddi4+0x1f8>
 8040e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8040e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8040e94:	3801      	subs	r0, #1
 8040e96:	e7a3      	b.n	8040de0 <__udivmoddi4+0x1f8>
 8040e98:	4646      	mov	r6, r8
 8040e9a:	e7ea      	b.n	8040e72 <__udivmoddi4+0x28a>
 8040e9c:	4620      	mov	r0, r4
 8040e9e:	e794      	b.n	8040dca <__udivmoddi4+0x1e2>
 8040ea0:	4640      	mov	r0, r8
 8040ea2:	e7d1      	b.n	8040e48 <__udivmoddi4+0x260>
 8040ea4:	46d0      	mov	r8, sl
 8040ea6:	e77b      	b.n	8040da0 <__udivmoddi4+0x1b8>
 8040ea8:	3b02      	subs	r3, #2
 8040eaa:	4461      	add	r1, ip
 8040eac:	e732      	b.n	8040d14 <__udivmoddi4+0x12c>
 8040eae:	4630      	mov	r0, r6
 8040eb0:	e709      	b.n	8040cc6 <__udivmoddi4+0xde>
 8040eb2:	4464      	add	r4, ip
 8040eb4:	3802      	subs	r0, #2
 8040eb6:	e742      	b.n	8040d3e <__udivmoddi4+0x156>

08040eb8 <__aeabi_idiv0>:
 8040eb8:	4770      	bx	lr
 8040eba:	bf00      	nop

08040ebc <BMP180_SetI2C>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_SetI2C(I2C_HandleTypeDef *hi2c) {
 8040ebc:	b480      	push	{r7}
 8040ebe:	b083      	sub	sp, #12
 8040ec0:	af00      	add	r7, sp, #0
 8040ec2:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8040ec4:	4a04      	ldr	r2, [pc, #16]	; (8040ed8 <BMP180_SetI2C+0x1c>)
 8040ec6:	687b      	ldr	r3, [r7, #4]
 8040ec8:	6013      	str	r3, [r2, #0]
}
 8040eca:	bf00      	nop
 8040ecc:	370c      	adds	r7, #12
 8040ece:	46bd      	mov	sp, r7
 8040ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ed4:	4770      	bx	lr
 8040ed6:	bf00      	nop
 8040ed8:	200001fc 	.word	0x200001fc

08040edc <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8040edc:	b480      	push	{r7}
 8040ede:	b083      	sub	sp, #12
 8040ee0:	af00      	add	r7, sp, #0
 8040ee2:	4603      	mov	r3, r0
 8040ee4:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8040ee6:	4a04      	ldr	r2, [pc, #16]	; (8040ef8 <BMP180_SetOversampling+0x1c>)
 8040ee8:	79fb      	ldrb	r3, [r7, #7]
 8040eea:	7013      	strb	r3, [r2, #0]
}
 8040eec:	bf00      	nop
 8040eee:	370c      	adds	r7, #12
 8040ef0:	46bd      	mov	sp, r7
 8040ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ef6:	4770      	bx	lr
 8040ef8:	20000216 	.word	0x20000216

08040efc <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8040efc:	b598      	push	{r3, r4, r7, lr}
 8040efe:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8040f00:	23aa      	movs	r3, #170	; 0xaa
 8040f02:	4618      	mov	r0, r3
 8040f04:	f000 f8dc 	bl	80410c0 <BMP180_ReadReg>
 8040f08:	4603      	mov	r3, r0
 8040f0a:	021b      	lsls	r3, r3, #8
 8040f0c:	b21c      	sxth	r4, r3
 8040f0e:	23ab      	movs	r3, #171	; 0xab
 8040f10:	4618      	mov	r0, r3
 8040f12:	f000 f8d5 	bl	80410c0 <BMP180_ReadReg>
 8040f16:	4603      	mov	r3, r0
 8040f18:	b21b      	sxth	r3, r3
 8040f1a:	4323      	orrs	r3, r4
 8040f1c:	b21a      	sxth	r2, r3
 8040f1e:	4b58      	ldr	r3, [pc, #352]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8040f20:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8040f22:	23ac      	movs	r3, #172	; 0xac
 8040f24:	4618      	mov	r0, r3
 8040f26:	f000 f8cb 	bl	80410c0 <BMP180_ReadReg>
 8040f2a:	4603      	mov	r3, r0
 8040f2c:	021b      	lsls	r3, r3, #8
 8040f2e:	b21c      	sxth	r4, r3
 8040f30:	23ad      	movs	r3, #173	; 0xad
 8040f32:	4618      	mov	r0, r3
 8040f34:	f000 f8c4 	bl	80410c0 <BMP180_ReadReg>
 8040f38:	4603      	mov	r3, r0
 8040f3a:	b21b      	sxth	r3, r3
 8040f3c:	4323      	orrs	r3, r4
 8040f3e:	b21a      	sxth	r2, r3
 8040f40:	4b4f      	ldr	r3, [pc, #316]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8040f42:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8040f44:	23ae      	movs	r3, #174	; 0xae
 8040f46:	4618      	mov	r0, r3
 8040f48:	f000 f8ba 	bl	80410c0 <BMP180_ReadReg>
 8040f4c:	4603      	mov	r3, r0
 8040f4e:	021b      	lsls	r3, r3, #8
 8040f50:	b21c      	sxth	r4, r3
 8040f52:	23af      	movs	r3, #175	; 0xaf
 8040f54:	4618      	mov	r0, r3
 8040f56:	f000 f8b3 	bl	80410c0 <BMP180_ReadReg>
 8040f5a:	4603      	mov	r3, r0
 8040f5c:	b21b      	sxth	r3, r3
 8040f5e:	4323      	orrs	r3, r4
 8040f60:	b21a      	sxth	r2, r3
 8040f62:	4b47      	ldr	r3, [pc, #284]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8040f64:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8040f66:	23b0      	movs	r3, #176	; 0xb0
 8040f68:	4618      	mov	r0, r3
 8040f6a:	f000 f8a9 	bl	80410c0 <BMP180_ReadReg>
 8040f6e:	4603      	mov	r3, r0
 8040f70:	021b      	lsls	r3, r3, #8
 8040f72:	b21c      	sxth	r4, r3
 8040f74:	23b1      	movs	r3, #177	; 0xb1
 8040f76:	4618      	mov	r0, r3
 8040f78:	f000 f8a2 	bl	80410c0 <BMP180_ReadReg>
 8040f7c:	4603      	mov	r3, r0
 8040f7e:	b21b      	sxth	r3, r3
 8040f80:	4323      	orrs	r3, r4
 8040f82:	b21b      	sxth	r3, r3
 8040f84:	b29a      	uxth	r2, r3
 8040f86:	4b3e      	ldr	r3, [pc, #248]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8040f88:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8040f8a:	23b2      	movs	r3, #178	; 0xb2
 8040f8c:	4618      	mov	r0, r3
 8040f8e:	f000 f897 	bl	80410c0 <BMP180_ReadReg>
 8040f92:	4603      	mov	r3, r0
 8040f94:	021b      	lsls	r3, r3, #8
 8040f96:	b21c      	sxth	r4, r3
 8040f98:	23b3      	movs	r3, #179	; 0xb3
 8040f9a:	4618      	mov	r0, r3
 8040f9c:	f000 f890 	bl	80410c0 <BMP180_ReadReg>
 8040fa0:	4603      	mov	r3, r0
 8040fa2:	b21b      	sxth	r3, r3
 8040fa4:	4323      	orrs	r3, r4
 8040fa6:	b21b      	sxth	r3, r3
 8040fa8:	b29a      	uxth	r2, r3
 8040faa:	4b35      	ldr	r3, [pc, #212]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8040fac:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8040fae:	23b4      	movs	r3, #180	; 0xb4
 8040fb0:	4618      	mov	r0, r3
 8040fb2:	f000 f885 	bl	80410c0 <BMP180_ReadReg>
 8040fb6:	4603      	mov	r3, r0
 8040fb8:	021b      	lsls	r3, r3, #8
 8040fba:	b21c      	sxth	r4, r3
 8040fbc:	23b5      	movs	r3, #181	; 0xb5
 8040fbe:	4618      	mov	r0, r3
 8040fc0:	f000 f87e 	bl	80410c0 <BMP180_ReadReg>
 8040fc4:	4603      	mov	r3, r0
 8040fc6:	b21b      	sxth	r3, r3
 8040fc8:	4323      	orrs	r3, r4
 8040fca:	b21b      	sxth	r3, r3
 8040fcc:	b29a      	uxth	r2, r3
 8040fce:	4b2c      	ldr	r3, [pc, #176]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8040fd0:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8040fd2:	23b6      	movs	r3, #182	; 0xb6
 8040fd4:	4618      	mov	r0, r3
 8040fd6:	f000 f873 	bl	80410c0 <BMP180_ReadReg>
 8040fda:	4603      	mov	r3, r0
 8040fdc:	021b      	lsls	r3, r3, #8
 8040fde:	b21c      	sxth	r4, r3
 8040fe0:	23b7      	movs	r3, #183	; 0xb7
 8040fe2:	4618      	mov	r0, r3
 8040fe4:	f000 f86c 	bl	80410c0 <BMP180_ReadReg>
 8040fe8:	4603      	mov	r3, r0
 8040fea:	b21b      	sxth	r3, r3
 8040fec:	4323      	orrs	r3, r4
 8040fee:	b21a      	sxth	r2, r3
 8040ff0:	4b23      	ldr	r3, [pc, #140]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8040ff2:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8040ff4:	23b8      	movs	r3, #184	; 0xb8
 8040ff6:	4618      	mov	r0, r3
 8040ff8:	f000 f862 	bl	80410c0 <BMP180_ReadReg>
 8040ffc:	4603      	mov	r3, r0
 8040ffe:	021b      	lsls	r3, r3, #8
 8041000:	b21c      	sxth	r4, r3
 8041002:	23b9      	movs	r3, #185	; 0xb9
 8041004:	4618      	mov	r0, r3
 8041006:	f000 f85b 	bl	80410c0 <BMP180_ReadReg>
 804100a:	4603      	mov	r3, r0
 804100c:	b21b      	sxth	r3, r3
 804100e:	4323      	orrs	r3, r4
 8041010:	b21a      	sxth	r2, r3
 8041012:	4b1b      	ldr	r3, [pc, #108]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8041014:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8041016:	23ba      	movs	r3, #186	; 0xba
 8041018:	4618      	mov	r0, r3
 804101a:	f000 f851 	bl	80410c0 <BMP180_ReadReg>
 804101e:	4603      	mov	r3, r0
 8041020:	021b      	lsls	r3, r3, #8
 8041022:	b21c      	sxth	r4, r3
 8041024:	23bb      	movs	r3, #187	; 0xbb
 8041026:	4618      	mov	r0, r3
 8041028:	f000 f84a 	bl	80410c0 <BMP180_ReadReg>
 804102c:	4603      	mov	r3, r0
 804102e:	b21b      	sxth	r3, r3
 8041030:	4323      	orrs	r3, r4
 8041032:	b21a      	sxth	r2, r3
 8041034:	4b12      	ldr	r3, [pc, #72]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8041036:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8041038:	23bc      	movs	r3, #188	; 0xbc
 804103a:	4618      	mov	r0, r3
 804103c:	f000 f840 	bl	80410c0 <BMP180_ReadReg>
 8041040:	4603      	mov	r3, r0
 8041042:	021b      	lsls	r3, r3, #8
 8041044:	b21c      	sxth	r4, r3
 8041046:	23bd      	movs	r3, #189	; 0xbd
 8041048:	4618      	mov	r0, r3
 804104a:	f000 f839 	bl	80410c0 <BMP180_ReadReg>
 804104e:	4603      	mov	r3, r0
 8041050:	b21b      	sxth	r3, r3
 8041052:	4323      	orrs	r3, r4
 8041054:	b21a      	sxth	r2, r3
 8041056:	4b0a      	ldr	r3, [pc, #40]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 8041058:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 804105a:	23be      	movs	r3, #190	; 0xbe
 804105c:	4618      	mov	r0, r3
 804105e:	f000 f82f 	bl	80410c0 <BMP180_ReadReg>
 8041062:	4603      	mov	r3, r0
 8041064:	021b      	lsls	r3, r3, #8
 8041066:	b21c      	sxth	r4, r3
 8041068:	23bf      	movs	r3, #191	; 0xbf
 804106a:	4618      	mov	r0, r3
 804106c:	f000 f828 	bl	80410c0 <BMP180_ReadReg>
 8041070:	4603      	mov	r3, r0
 8041072:	b21b      	sxth	r3, r3
 8041074:	4323      	orrs	r3, r4
 8041076:	b21a      	sxth	r2, r3
 8041078:	4b01      	ldr	r3, [pc, #4]	; (8041080 <BMP180_UpdateCalibrationData+0x184>)
 804107a:	829a      	strh	r2, [r3, #20]
}
 804107c:	bf00      	nop
 804107e:	bd98      	pop	{r3, r4, r7, pc}
 8041080:	20000200 	.word	0x20000200

08041084 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8041084:	b580      	push	{r7, lr}
 8041086:	b086      	sub	sp, #24
 8041088:	af02      	add	r7, sp, #8
 804108a:	4603      	mov	r3, r0
 804108c:	460a      	mov	r2, r1
 804108e:	71fb      	strb	r3, [r7, #7]
 8041090:	4613      	mov	r3, r2
 8041092:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8041094:	79fb      	ldrb	r3, [r7, #7]
 8041096:	733b      	strb	r3, [r7, #12]
 8041098:	79bb      	ldrb	r3, [r7, #6]
 804109a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 804109c:	4b07      	ldr	r3, [pc, #28]	; (80410bc <BMP180_WriteReg+0x38>)
 804109e:	6818      	ldr	r0, [r3, #0]
 80410a0:	f107 020c 	add.w	r2, r7, #12
 80410a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80410a8:	9300      	str	r3, [sp, #0]
 80410aa:	2302      	movs	r3, #2
 80410ac:	21ee      	movs	r1, #238	; 0xee
 80410ae:	f002 f92b 	bl	8043308 <HAL_I2C_Master_Transmit>
}
 80410b2:	bf00      	nop
 80410b4:	3710      	adds	r7, #16
 80410b6:	46bd      	mov	sp, r7
 80410b8:	bd80      	pop	{r7, pc}
 80410ba:	bf00      	nop
 80410bc:	200001fc 	.word	0x200001fc

080410c0 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 80410c0:	b580      	push	{r7, lr}
 80410c2:	b086      	sub	sp, #24
 80410c4:	af02      	add	r7, sp, #8
 80410c6:	4603      	mov	r3, r0
 80410c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80410ca:	4b0d      	ldr	r3, [pc, #52]	; (8041100 <BMP180_ReadReg+0x40>)
 80410cc:	6818      	ldr	r0, [r3, #0]
 80410ce:	1dfa      	adds	r2, r7, #7
 80410d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80410d4:	9300      	str	r3, [sp, #0]
 80410d6:	2301      	movs	r3, #1
 80410d8:	21ee      	movs	r1, #238	; 0xee
 80410da:	f002 f915 	bl	8043308 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80410de:	4b08      	ldr	r3, [pc, #32]	; (8041100 <BMP180_ReadReg+0x40>)
 80410e0:	6818      	ldr	r0, [r3, #0]
 80410e2:	f107 020f 	add.w	r2, r7, #15
 80410e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80410ea:	9300      	str	r3, [sp, #0]
 80410ec:	2301      	movs	r3, #1
 80410ee:	21ee      	movs	r1, #238	; 0xee
 80410f0:	f002 fa08 	bl	8043504 <HAL_I2C_Master_Receive>
	return result;
 80410f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80410f6:	4618      	mov	r0, r3
 80410f8:	3710      	adds	r7, #16
 80410fa:	46bd      	mov	sp, r7
 80410fc:	bd80      	pop	{r7, pc}
 80410fe:	bf00      	nop
 8041100:	200001fc 	.word	0x200001fc

08041104 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8041104:	b590      	push	{r4, r7, lr}
 8041106:	b085      	sub	sp, #20
 8041108:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 804110a:	232e      	movs	r3, #46	; 0x2e
 804110c:	4619      	mov	r1, r3
 804110e:	20f4      	movs	r0, #244	; 0xf4
 8041110:	f7ff ffb8 	bl	8041084 <BMP180_WriteReg>
	//HAL_Delay(BMP180_DELAY_TEMP);
	osDelay(BMP180_DELAY_TEMP);
 8041114:	2305      	movs	r3, #5
 8041116:	4618      	mov	r0, r3
 8041118:	f004 fcdf 	bl	8045ada <osDelay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 804111c:	20f6      	movs	r0, #246	; 0xf6
 804111e:	f7ff ffcf 	bl	80410c0 <BMP180_ReadReg>
 8041122:	4603      	mov	r3, r0
 8041124:	021c      	lsls	r4, r3, #8
 8041126:	20f7      	movs	r0, #247	; 0xf7
 8041128:	f7ff ffca 	bl	80410c0 <BMP180_ReadReg>
 804112c:	4603      	mov	r3, r0
 804112e:	4323      	orrs	r3, r4
 8041130:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8041132:	4b15      	ldr	r3, [pc, #84]	; (8041188 <BMP180_GetRawTemperature+0x84>)
 8041134:	895b      	ldrh	r3, [r3, #10]
 8041136:	461a      	mov	r2, r3
 8041138:	68fb      	ldr	r3, [r7, #12]
 804113a:	1a9b      	subs	r3, r3, r2
 804113c:	4a12      	ldr	r2, [pc, #72]	; (8041188 <BMP180_GetRawTemperature+0x84>)
 804113e:	8912      	ldrh	r2, [r2, #8]
 8041140:	fb02 f303 	mul.w	r3, r2, r3
 8041144:	2b00      	cmp	r3, #0
 8041146:	da02      	bge.n	804114e <BMP180_GetRawTemperature+0x4a>
 8041148:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 804114c:	337f      	adds	r3, #127	; 0x7f
 804114e:	13db      	asrs	r3, r3, #15
 8041150:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8041152:	4b0d      	ldr	r3, [pc, #52]	; (8041188 <BMP180_GetRawTemperature+0x84>)
 8041154:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8041158:	02da      	lsls	r2, r3, #11
 804115a:	4b0b      	ldr	r3, [pc, #44]	; (8041188 <BMP180_GetRawTemperature+0x84>)
 804115c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8041160:	4619      	mov	r1, r3
 8041162:	68bb      	ldr	r3, [r7, #8]
 8041164:	440b      	add	r3, r1
 8041166:	fb92 f3f3 	sdiv	r3, r2, r3
 804116a:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 804116c:	68ba      	ldr	r2, [r7, #8]
 804116e:	687b      	ldr	r3, [r7, #4]
 8041170:	4413      	add	r3, r2
 8041172:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8041174:	683b      	ldr	r3, [r7, #0]
 8041176:	3308      	adds	r3, #8
 8041178:	2b00      	cmp	r3, #0
 804117a:	da00      	bge.n	804117e <BMP180_GetRawTemperature+0x7a>
 804117c:	330f      	adds	r3, #15
 804117e:	111b      	asrs	r3, r3, #4
}
 8041180:	4618      	mov	r0, r3
 8041182:	3714      	adds	r7, #20
 8041184:	46bd      	mov	sp, r7
 8041186:	bd90      	pop	{r4, r7, pc}
 8041188:	20000200 	.word	0x20000200

0804118c <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 804118c:	b580      	push	{r7, lr}
 804118e:	b08c      	sub	sp, #48	; 0x30
 8041190:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8041192:	232e      	movs	r3, #46	; 0x2e
 8041194:	4619      	mov	r1, r3
 8041196:	20f4      	movs	r0, #244	; 0xf4
 8041198:	f7ff ff74 	bl	8041084 <BMP180_WriteReg>
	//HAL_Delay(BMP180_DELAY_TEMP);
	osDelay(BMP180_DELAY_TEMP);
 804119c:	2305      	movs	r3, #5
 804119e:	4618      	mov	r0, r3
 80411a0:	f004 fc9b 	bl	8045ada <osDelay>
	int32_t ut = BMP180_GetUT();
 80411a4:	f000 f902 	bl	80413ac <BMP180_GetUT>
 80411a8:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80411aa:	4b7b      	ldr	r3, [pc, #492]	; (8041398 <BMP180_GetPressure+0x20c>)
 80411ac:	781b      	ldrb	r3, [r3, #0]
 80411ae:	461a      	mov	r2, r3
 80411b0:	4b7a      	ldr	r3, [pc, #488]	; (804139c <BMP180_GetPressure+0x210>)
 80411b2:	5c9b      	ldrb	r3, [r3, r2]
 80411b4:	4619      	mov	r1, r3
 80411b6:	20f4      	movs	r0, #244	; 0xf4
 80411b8:	f7ff ff64 	bl	8041084 <BMP180_WriteReg>
	//HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
	osDelay(BMP180_DELAY_PRES[_bmp180_oss]);
 80411bc:	4b76      	ldr	r3, [pc, #472]	; (8041398 <BMP180_GetPressure+0x20c>)
 80411be:	781b      	ldrb	r3, [r3, #0]
 80411c0:	461a      	mov	r2, r3
 80411c2:	4b77      	ldr	r3, [pc, #476]	; (80413a0 <BMP180_GetPressure+0x214>)
 80411c4:	5c9b      	ldrb	r3, [r3, r2]
 80411c6:	4618      	mov	r0, r3
 80411c8:	f004 fc87 	bl	8045ada <osDelay>
	int32_t up = BMP180_GetUP();
 80411cc:	f000 f8fc 	bl	80413c8 <BMP180_GetUP>
 80411d0:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80411d2:	4b74      	ldr	r3, [pc, #464]	; (80413a4 <BMP180_GetPressure+0x218>)
 80411d4:	895b      	ldrh	r3, [r3, #10]
 80411d6:	461a      	mov	r2, r3
 80411d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80411da:	1a9b      	subs	r3, r3, r2
 80411dc:	4a71      	ldr	r2, [pc, #452]	; (80413a4 <BMP180_GetPressure+0x218>)
 80411de:	8912      	ldrh	r2, [r2, #8]
 80411e0:	fb02 f303 	mul.w	r3, r2, r3
 80411e4:	2b00      	cmp	r3, #0
 80411e6:	da02      	bge.n	80411ee <BMP180_GetPressure+0x62>
 80411e8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80411ec:	337f      	adds	r3, #127	; 0x7f
 80411ee:	13db      	asrs	r3, r3, #15
 80411f0:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80411f2:	4b6c      	ldr	r3, [pc, #432]	; (80413a4 <BMP180_GetPressure+0x218>)
 80411f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80411f8:	02da      	lsls	r2, r3, #11
 80411fa:	4b6a      	ldr	r3, [pc, #424]	; (80413a4 <BMP180_GetPressure+0x218>)
 80411fc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8041200:	4619      	mov	r1, r3
 8041202:	6a3b      	ldr	r3, [r7, #32]
 8041204:	440b      	add	r3, r1
 8041206:	fb92 f3f3 	sdiv	r3, r2, r3
 804120a:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 804120c:	6a3a      	ldr	r2, [r7, #32]
 804120e:	69fb      	ldr	r3, [r7, #28]
 8041210:	4413      	add	r3, r2
 8041212:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8041214:	69bb      	ldr	r3, [r7, #24]
 8041216:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 804121a:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 804121c:	4b61      	ldr	r3, [pc, #388]	; (80413a4 <BMP180_GetPressure+0x218>)
 804121e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8041222:	461a      	mov	r2, r3
 8041224:	697b      	ldr	r3, [r7, #20]
 8041226:	fb03 f303 	mul.w	r3, r3, r3
 804122a:	2b00      	cmp	r3, #0
 804122c:	da01      	bge.n	8041232 <BMP180_GetPressure+0xa6>
 804122e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8041232:	131b      	asrs	r3, r3, #12
 8041234:	fb02 f303 	mul.w	r3, r2, r3
 8041238:	2b00      	cmp	r3, #0
 804123a:	da01      	bge.n	8041240 <BMP180_GetPressure+0xb4>
 804123c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8041240:	12db      	asrs	r3, r3, #11
 8041242:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8041244:	4b57      	ldr	r3, [pc, #348]	; (80413a4 <BMP180_GetPressure+0x218>)
 8041246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 804124a:	461a      	mov	r2, r3
 804124c:	697b      	ldr	r3, [r7, #20]
 804124e:	fb02 f303 	mul.w	r3, r2, r3
 8041252:	2b00      	cmp	r3, #0
 8041254:	da01      	bge.n	804125a <BMP180_GetPressure+0xce>
 8041256:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 804125a:	12db      	asrs	r3, r3, #11
 804125c:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 804125e:	6a3a      	ldr	r2, [r7, #32]
 8041260:	69fb      	ldr	r3, [r7, #28]
 8041262:	4413      	add	r3, r2
 8041264:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8041266:	4b4f      	ldr	r3, [pc, #316]	; (80413a4 <BMP180_GetPressure+0x218>)
 8041268:	f9b3 3000 	ldrsh.w	r3, [r3]
 804126c:	009a      	lsls	r2, r3, #2
 804126e:	693b      	ldr	r3, [r7, #16]
 8041270:	4413      	add	r3, r2
 8041272:	4a49      	ldr	r2, [pc, #292]	; (8041398 <BMP180_GetPressure+0x20c>)
 8041274:	7812      	ldrb	r2, [r2, #0]
 8041276:	4093      	lsls	r3, r2
 8041278:	3302      	adds	r3, #2
 804127a:	2b00      	cmp	r3, #0
 804127c:	da00      	bge.n	8041280 <BMP180_GetPressure+0xf4>
 804127e:	3303      	adds	r3, #3
 8041280:	109b      	asrs	r3, r3, #2
 8041282:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8041284:	4b47      	ldr	r3, [pc, #284]	; (80413a4 <BMP180_GetPressure+0x218>)
 8041286:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 804128a:	461a      	mov	r2, r3
 804128c:	697b      	ldr	r3, [r7, #20]
 804128e:	fb02 f303 	mul.w	r3, r2, r3
 8041292:	2b00      	cmp	r3, #0
 8041294:	da02      	bge.n	804129c <BMP180_GetPressure+0x110>
 8041296:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 804129a:	331f      	adds	r3, #31
 804129c:	135b      	asrs	r3, r3, #13
 804129e:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 80412a0:	4b40      	ldr	r3, [pc, #256]	; (80413a4 <BMP180_GetPressure+0x218>)
 80412a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80412a6:	461a      	mov	r2, r3
 80412a8:	697b      	ldr	r3, [r7, #20]
 80412aa:	fb03 f303 	mul.w	r3, r3, r3
 80412ae:	2b00      	cmp	r3, #0
 80412b0:	da01      	bge.n	80412b6 <BMP180_GetPressure+0x12a>
 80412b2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80412b6:	131b      	asrs	r3, r3, #12
 80412b8:	fb02 f303 	mul.w	r3, r2, r3
 80412bc:	2b00      	cmp	r3, #0
 80412be:	da02      	bge.n	80412c6 <BMP180_GetPressure+0x13a>
 80412c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80412c4:	33ff      	adds	r3, #255	; 0xff
 80412c6:	141b      	asrs	r3, r3, #16
 80412c8:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 80412ca:	6a3a      	ldr	r2, [r7, #32]
 80412cc:	69fb      	ldr	r3, [r7, #28]
 80412ce:	4413      	add	r3, r2
 80412d0:	3302      	adds	r3, #2
 80412d2:	2b00      	cmp	r3, #0
 80412d4:	da00      	bge.n	80412d8 <BMP180_GetPressure+0x14c>
 80412d6:	3303      	adds	r3, #3
 80412d8:	109b      	asrs	r3, r3, #2
 80412da:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 80412dc:	4b31      	ldr	r3, [pc, #196]	; (80413a4 <BMP180_GetPressure+0x218>)
 80412de:	88db      	ldrh	r3, [r3, #6]
 80412e0:	461a      	mov	r2, r3
 80412e2:	693b      	ldr	r3, [r7, #16]
 80412e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80412e8:	fb02 f303 	mul.w	r3, r2, r3
 80412ec:	0bdb      	lsrs	r3, r3, #15
 80412ee:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 80412f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80412f2:	68fb      	ldr	r3, [r7, #12]
 80412f4:	1ad3      	subs	r3, r2, r3
 80412f6:	4a28      	ldr	r2, [pc, #160]	; (8041398 <BMP180_GetPressure+0x20c>)
 80412f8:	7812      	ldrb	r2, [r2, #0]
 80412fa:	4611      	mov	r1, r2
 80412fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8041300:	410a      	asrs	r2, r1
 8041302:	fb02 f303 	mul.w	r3, r2, r3
 8041306:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8041308:	687b      	ldr	r3, [r7, #4]
 804130a:	2b00      	cmp	r3, #0
 804130c:	db06      	blt.n	804131c <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 804130e:	687b      	ldr	r3, [r7, #4]
 8041310:	005a      	lsls	r2, r3, #1
 8041312:	68bb      	ldr	r3, [r7, #8]
 8041314:	fbb2 f3f3 	udiv	r3, r2, r3
 8041318:	62fb      	str	r3, [r7, #44]	; 0x2c
 804131a:	e005      	b.n	8041328 <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 804131c:	687a      	ldr	r2, [r7, #4]
 804131e:	68bb      	ldr	r3, [r7, #8]
 8041320:	fbb2 f3f3 	udiv	r3, r2, r3
 8041324:	005b      	lsls	r3, r3, #1
 8041326:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8041328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804132a:	2b00      	cmp	r3, #0
 804132c:	da00      	bge.n	8041330 <BMP180_GetPressure+0x1a4>
 804132e:	33ff      	adds	r3, #255	; 0xff
 8041330:	121b      	asrs	r3, r3, #8
 8041332:	461a      	mov	r2, r3
 8041334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041336:	2b00      	cmp	r3, #0
 8041338:	da00      	bge.n	804133c <BMP180_GetPressure+0x1b0>
 804133a:	33ff      	adds	r3, #255	; 0xff
 804133c:	121b      	asrs	r3, r3, #8
 804133e:	fb02 f303 	mul.w	r3, r2, r3
 8041342:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8041344:	6a3b      	ldr	r3, [r7, #32]
 8041346:	f640 32de 	movw	r2, #3038	; 0xbde
 804134a:	fb02 f303 	mul.w	r3, r2, r3
 804134e:	2b00      	cmp	r3, #0
 8041350:	da02      	bge.n	8041358 <BMP180_GetPressure+0x1cc>
 8041352:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8041356:	33ff      	adds	r3, #255	; 0xff
 8041358:	141b      	asrs	r3, r3, #16
 804135a:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 804135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804135e:	4a12      	ldr	r2, [pc, #72]	; (80413a8 <BMP180_GetPressure+0x21c>)
 8041360:	fb02 f303 	mul.w	r3, r2, r3
 8041364:	2b00      	cmp	r3, #0
 8041366:	da02      	bge.n	804136e <BMP180_GetPressure+0x1e2>
 8041368:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 804136c:	33ff      	adds	r3, #255	; 0xff
 804136e:	141b      	asrs	r3, r3, #16
 8041370:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8041372:	6a3a      	ldr	r2, [r7, #32]
 8041374:	69fb      	ldr	r3, [r7, #28]
 8041376:	4413      	add	r3, r2
 8041378:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 804137c:	2b00      	cmp	r3, #0
 804137e:	da00      	bge.n	8041382 <BMP180_GetPressure+0x1f6>
 8041380:	330f      	adds	r3, #15
 8041382:	111b      	asrs	r3, r3, #4
 8041384:	461a      	mov	r2, r3
 8041386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041388:	4413      	add	r3, r2
 804138a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 804138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 804138e:	4618      	mov	r0, r3
 8041390:	3730      	adds	r7, #48	; 0x30
 8041392:	46bd      	mov	sp, r7
 8041394:	bd80      	pop	{r7, pc}
 8041396:	bf00      	nop
 8041398:	20000216 	.word	0x20000216
 804139c:	0804a134 	.word	0x0804a134
 80413a0:	0804a138 	.word	0x0804a138
 80413a4:	20000200 	.word	0x20000200
 80413a8:	ffffe343 	.word	0xffffe343

080413ac <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 80413ac:	b598      	push	{r3, r4, r7, lr}
 80413ae:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 80413b0:	20f6      	movs	r0, #246	; 0xf6
 80413b2:	f7ff fe85 	bl	80410c0 <BMP180_ReadReg>
 80413b6:	4603      	mov	r3, r0
 80413b8:	021c      	lsls	r4, r3, #8
 80413ba:	20f7      	movs	r0, #247	; 0xf7
 80413bc:	f7ff fe80 	bl	80410c0 <BMP180_ReadReg>
 80413c0:	4603      	mov	r3, r0
 80413c2:	4323      	orrs	r3, r4
}
 80413c4:	4618      	mov	r0, r3
 80413c6:	bd98      	pop	{r3, r4, r7, pc}

080413c8 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 80413c8:	b598      	push	{r3, r4, r7, lr}
 80413ca:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 80413cc:	20f6      	movs	r0, #246	; 0xf6
 80413ce:	f7ff fe77 	bl	80410c0 <BMP180_ReadReg>
 80413d2:	4603      	mov	r3, r0
 80413d4:	041c      	lsls	r4, r3, #16
 80413d6:	20f7      	movs	r0, #247	; 0xf7
 80413d8:	f7ff fe72 	bl	80410c0 <BMP180_ReadReg>
 80413dc:	4603      	mov	r3, r0
 80413de:	021b      	lsls	r3, r3, #8
 80413e0:	431c      	orrs	r4, r3
 80413e2:	20f8      	movs	r0, #248	; 0xf8
 80413e4:	f7ff fe6c 	bl	80410c0 <BMP180_ReadReg>
 80413e8:	4603      	mov	r3, r0
 80413ea:	ea44 0203 	orr.w	r2, r4, r3
 80413ee:	4b04      	ldr	r3, [pc, #16]	; (8041400 <BMP180_GetUP+0x38>)
 80413f0:	781b      	ldrb	r3, [r3, #0]
 80413f2:	f1c3 0308 	rsb	r3, r3, #8
 80413f6:	fa42 f303 	asr.w	r3, r2, r3
}
 80413fa:	4618      	mov	r0, r3
 80413fc:	bd98      	pop	{r3, r4, r7, pc}
 80413fe:	bf00      	nop
 8041400:	20000216 	.word	0x20000216

08041404 <Ds18b20_Init>:
void Task_Ds18b20(void const *argument);
#endif

//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void Ds18b20_Init(osPriority Priority) {
 8041404:	b580      	push	{r7, lr}
 8041406:	b08a      	sub	sp, #40	; 0x28
 8041408:	af00      	add	r7, sp, #0
 804140a:	4603      	mov	r3, r0
 804140c:	80fb      	strh	r3, [r7, #6]
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
 804140e:	4b0d      	ldr	r3, [pc, #52]	; (8041444 <Ds18b20_Init+0x40>)
 8041410:	60fb      	str	r3, [r7, #12]
 8041412:	4b0d      	ldr	r3, [pc, #52]	; (8041448 <Ds18b20_Init+0x44>)
 8041414:	613b      	str	r3, [r7, #16]
 8041416:	88fb      	ldrh	r3, [r7, #6]
 8041418:	82bb      	strh	r3, [r7, #20]
 804141a:	2300      	movs	r3, #0
 804141c:	61bb      	str	r3, [r7, #24]
 804141e:	2380      	movs	r3, #128	; 0x80
 8041420:	61fb      	str	r3, [r7, #28]
 8041422:	2300      	movs	r3, #0
 8041424:	623b      	str	r3, [r7, #32]
 8041426:	2300      	movs	r3, #0
 8041428:	627b      	str	r3, [r7, #36]	; 0x24
	Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
 804142a:	f107 030c 	add.w	r3, r7, #12
 804142e:	2100      	movs	r1, #0
 8041430:	4618      	mov	r0, r3
 8041432:	f004 fb06 	bl	8045a42 <osThreadCreate>
 8041436:	4603      	mov	r3, r0
 8041438:	4a04      	ldr	r2, [pc, #16]	; (804144c <Ds18b20_Init+0x48>)
 804143a:	6013      	str	r3, [r2, #0]
}
 804143c:	bf00      	nop
 804143e:	3728      	adds	r7, #40	; 0x28
 8041440:	46bd      	mov	sp, r7
 8041442:	bd80      	pop	{r7, pc}
 8041444:	0804a050 	.word	0x0804a050
 8041448:	08041451 	.word	0x08041451
 804144c:	20000244 	.word	0x20000244

08041450 <Task_Ds18b20>:
		return true;
	#endif
}
//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void Task_Ds18b20(void const *argument) {
 8041450:	b590      	push	{r4, r7, lr}
 8041452:	b085      	sub	sp, #20
 8041454:	af00      	add	r7, sp, #0
 8041456:	6078      	str	r0, [r7, #4]
	uint8_t Ds18b20TryToFind = 5;
 8041458:	2305      	movs	r3, #5
 804145a:	73fb      	strb	r3, [r7, #15]
	do {
		OneWire_Init(&OneWire, _DS18B20_GPIO, _DS18B20_PIN);
 804145c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041460:	4971      	ldr	r1, [pc, #452]	; (8041628 <Task_Ds18b20+0x1d8>)
 8041462:	4872      	ldr	r0, [pc, #456]	; (804162c <Task_Ds18b20+0x1dc>)
 8041464:	f000 fe0c 	bl	8042080 <OneWire_Init>
		TempSensorCount = 0;
 8041468:	4b71      	ldr	r3, [pc, #452]	; (8041630 <Task_Ds18b20+0x1e0>)
 804146a:	2200      	movs	r2, #0
 804146c:	701a      	strb	r2, [r3, #0]
		while (HAL_GetTick() < 3000)
 804146e:	e002      	b.n	8041476 <Task_Ds18b20+0x26>
			Ds18b20Delay(100);
 8041470:	2064      	movs	r0, #100	; 0x64
 8041472:	f004 fb32 	bl	8045ada <osDelay>
		while (HAL_GetTick() < 3000)
 8041476:	f001 fb45 	bl	8042b04 <HAL_GetTick>
 804147a:	4603      	mov	r3, r0
 804147c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8041480:	4293      	cmp	r3, r2
 8041482:	d9f5      	bls.n	8041470 <Task_Ds18b20+0x20>
		OneWireDevices = OneWire_First(&OneWire);
 8041484:	4869      	ldr	r0, [pc, #420]	; (804162c <Task_Ds18b20+0x1dc>)
 8041486:	f000 feee 	bl	8042266 <OneWire_First>
 804148a:	4603      	mov	r3, r0
 804148c:	461a      	mov	r2, r3
 804148e:	4b69      	ldr	r3, [pc, #420]	; (8041634 <Task_Ds18b20+0x1e4>)
 8041490:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices) {
 8041492:	e019      	b.n	80414c8 <Task_Ds18b20+0x78>
			Ds18b20Delay(100);
 8041494:	2064      	movs	r0, #100	; 0x64
 8041496:	f004 fb20 	bl	8045ada <osDelay>
			TempSensorCount++;
 804149a:	4b65      	ldr	r3, [pc, #404]	; (8041630 <Task_Ds18b20+0x1e0>)
 804149c:	781b      	ldrb	r3, [r3, #0]
 804149e:	3301      	adds	r3, #1
 80414a0:	b2da      	uxtb	r2, r3
 80414a2:	4b63      	ldr	r3, [pc, #396]	; (8041630 <Task_Ds18b20+0x1e0>)
 80414a4:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount - 1].Address);
 80414a6:	4b62      	ldr	r3, [pc, #392]	; (8041630 <Task_Ds18b20+0x1e0>)
 80414a8:	781b      	ldrb	r3, [r3, #0]
 80414aa:	3b01      	subs	r3, #1
 80414ac:	011b      	lsls	r3, r3, #4
 80414ae:	4a62      	ldr	r2, [pc, #392]	; (8041638 <Task_Ds18b20+0x1e8>)
 80414b0:	4413      	add	r3, r2
 80414b2:	4619      	mov	r1, r3
 80414b4:	485d      	ldr	r0, [pc, #372]	; (804162c <Task_Ds18b20+0x1dc>)
 80414b6:	f000 ffeb 	bl	8042490 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80414ba:	485c      	ldr	r0, [pc, #368]	; (804162c <Task_Ds18b20+0x1dc>)
 80414bc:	f000 fee3 	bl	8042286 <OneWire_Next>
 80414c0:	4603      	mov	r3, r0
 80414c2:	461a      	mov	r2, r3
 80414c4:	4b5b      	ldr	r3, [pc, #364]	; (8041634 <Task_Ds18b20+0x1e4>)
 80414c6:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices) {
 80414c8:	4b5a      	ldr	r3, [pc, #360]	; (8041634 <Task_Ds18b20+0x1e4>)
 80414ca:	781b      	ldrb	r3, [r3, #0]
 80414cc:	2b00      	cmp	r3, #0
 80414ce:	d1e1      	bne.n	8041494 <Task_Ds18b20+0x44>
		}
		if (TempSensorCount > 0)
 80414d0:	4b57      	ldr	r3, [pc, #348]	; (8041630 <Task_Ds18b20+0x1e0>)
 80414d2:	781b      	ldrb	r3, [r3, #0]
 80414d4:	2b00      	cmp	r3, #0
 80414d6:	d106      	bne.n	80414e6 <Task_Ds18b20+0x96>
			break;
		Ds18b20TryToFind--;
 80414d8:	7bfb      	ldrb	r3, [r7, #15]
 80414da:	3b01      	subs	r3, #1
 80414dc:	73fb      	strb	r3, [r7, #15]
	} while (Ds18b20TryToFind > 0);
 80414de:	7bfb      	ldrb	r3, [r7, #15]
 80414e0:	2b00      	cmp	r3, #0
 80414e2:	d1bb      	bne.n	804145c <Task_Ds18b20+0xc>
 80414e4:	e000      	b.n	80414e8 <Task_Ds18b20+0x98>
			break;
 80414e6:	bf00      	nop
	if (Ds18b20TryToFind == 0)
 80414e8:	7bfb      	ldrb	r3, [r7, #15]
 80414ea:	2b00      	cmp	r3, #0
 80414ec:	d102      	bne.n	80414f4 <Task_Ds18b20+0xa4>
		printf("vTaskDelete(Ds18b20Handle)\r\n");
 80414ee:	4853      	ldr	r0, [pc, #332]	; (804163c <Task_Ds18b20+0x1ec>)
 80414f0:	f006 fc52 	bl	8047d98 <puts>
		vTaskDelete(Ds18b20Handle);
 80414f4:	4b52      	ldr	r3, [pc, #328]	; (8041640 <Task_Ds18b20+0x1f0>)
 80414f6:	681b      	ldr	r3, [r3, #0]
 80414f8:	4618      	mov	r0, r3
 80414fa:	f004 fd61 	bl	8045fc0 <vTaskDelete>
	for (uint8_t i = 0; i < TempSensorCount; i++) {
 80414fe:	2300      	movs	r3, #0
 8041500:	73bb      	strb	r3, [r7, #14]
 8041502:	e019      	b.n	8041538 <Task_Ds18b20+0xe8>
		Ds18b20Delay(50);
 8041504:	2032      	movs	r0, #50	; 0x32
 8041506:	f004 fae8 	bl	8045ada <osDelay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address,
 804150a:	7bbb      	ldrb	r3, [r7, #14]
 804150c:	011b      	lsls	r3, r3, #4
 804150e:	4a4a      	ldr	r2, [pc, #296]	; (8041638 <Task_Ds18b20+0x1e8>)
 8041510:	4413      	add	r3, r2
 8041512:	220c      	movs	r2, #12
 8041514:	4619      	mov	r1, r3
 8041516:	4845      	ldr	r0, [pc, #276]	; (804162c <Task_Ds18b20+0x1dc>)
 8041518:	f000 f9ae 	bl	8041878 <DS18B20_SetResolution>
				DS18B20_Resolution_12bits);
		Ds18b20Delay(50);
 804151c:	2032      	movs	r0, #50	; 0x32
 804151e:	f004 fadc 	bl	8045ada <osDelay>
		DS18B20_DisableAlarmTemperature(&OneWire, ds18b20[i].Address);
 8041522:	7bbb      	ldrb	r3, [r7, #14]
 8041524:	011b      	lsls	r3, r3, #4
 8041526:	4a44      	ldr	r2, [pc, #272]	; (8041638 <Task_Ds18b20+0x1e8>)
 8041528:	4413      	add	r3, r2
 804152a:	4619      	mov	r1, r3
 804152c:	483f      	ldr	r0, [pc, #252]	; (804162c <Task_Ds18b20+0x1dc>)
 804152e:	f000 fa3c 	bl	80419aa <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++) {
 8041532:	7bbb      	ldrb	r3, [r7, #14]
 8041534:	3301      	adds	r3, #1
 8041536:	73bb      	strb	r3, [r7, #14]
 8041538:	4b3d      	ldr	r3, [pc, #244]	; (8041630 <Task_Ds18b20+0x1e0>)
 804153a:	781b      	ldrb	r3, [r3, #0]
 804153c:	7bba      	ldrb	r2, [r7, #14]
 804153e:	429a      	cmp	r2, r3
 8041540:	d3e0      	bcc.n	8041504 <Task_Ds18b20+0xb4>
	}
	for (;;) {
		while (_DS18B20_UPDATE_INTERVAL_MS == 0) {
 8041542:	bf00      	nop
			if (Ds18b20StartConvert == 1)
				break;
			Ds18b20Delay(10);
		}
		Ds18b20Timeout = _DS18B20_CONVERT_TIMEOUT_MS / 10;
 8041544:	4b3f      	ldr	r3, [pc, #252]	; (8041644 <Task_Ds18b20+0x1f4>)
 8041546:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 804154a:	801a      	strh	r2, [r3, #0]
		DS18B20_StartAll(&OneWire);
 804154c:	4837      	ldr	r0, [pc, #220]	; (804162c <Task_Ds18b20+0x1dc>)
 804154e:	f000 f87f 	bl	8041650 <DS18B20_StartAll>
		osDelay(100);
 8041552:	2064      	movs	r0, #100	; 0x64
 8041554:	f004 fac1 	bl	8045ada <osDelay>
		while (!DS18B20_AllDone(&OneWire)) {
 8041558:	e00c      	b.n	8041574 <Task_Ds18b20+0x124>
			osDelay(10);
 804155a:	200a      	movs	r0, #10
 804155c:	f004 fabd 	bl	8045ada <osDelay>
			Ds18b20Timeout -= 1;
 8041560:	4b38      	ldr	r3, [pc, #224]	; (8041644 <Task_Ds18b20+0x1f4>)
 8041562:	881b      	ldrh	r3, [r3, #0]
 8041564:	3b01      	subs	r3, #1
 8041566:	b29a      	uxth	r2, r3
 8041568:	4b36      	ldr	r3, [pc, #216]	; (8041644 <Task_Ds18b20+0x1f4>)
 804156a:	801a      	strh	r2, [r3, #0]
			if (Ds18b20Timeout == 0)
 804156c:	4b35      	ldr	r3, [pc, #212]	; (8041644 <Task_Ds18b20+0x1f4>)
 804156e:	881b      	ldrh	r3, [r3, #0]
 8041570:	2b00      	cmp	r3, #0
 8041572:	d006      	beq.n	8041582 <Task_Ds18b20+0x132>
		while (!DS18B20_AllDone(&OneWire)) {
 8041574:	482d      	ldr	r0, [pc, #180]	; (804162c <Task_Ds18b20+0x1dc>)
 8041576:	f000 fa73 	bl	8041a60 <DS18B20_AllDone>
 804157a:	4603      	mov	r3, r0
 804157c:	2b00      	cmp	r3, #0
 804157e:	d0ec      	beq.n	804155a <Task_Ds18b20+0x10a>
 8041580:	e000      	b.n	8041584 <Task_Ds18b20+0x134>
				break;
 8041582:	bf00      	nop
		}
		if (Ds18b20Timeout > 0) {
 8041584:	4b2f      	ldr	r3, [pc, #188]	; (8041644 <Task_Ds18b20+0x1f4>)
 8041586:	881b      	ldrh	r3, [r3, #0]
 8041588:	2b00      	cmp	r3, #0
 804158a:	d033      	beq.n	80415f4 <Task_Ds18b20+0x1a4>
			for (uint8_t i = 0; i < TempSensorCount; i++) {
 804158c:	2300      	movs	r3, #0
 804158e:	737b      	strb	r3, [r7, #13]
 8041590:	e02a      	b.n	80415e8 <Task_Ds18b20+0x198>
				Ds18b20Delay(1000);
 8041592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8041596:	f004 faa0 	bl	8045ada <osDelay>
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire,
						ds18b20[i].Address, &ds18b20[i].Temperature);
 804159a:	7b7b      	ldrb	r3, [r7, #13]
 804159c:	011b      	lsls	r3, r3, #4
 804159e:	4a26      	ldr	r2, [pc, #152]	; (8041638 <Task_Ds18b20+0x1e8>)
 80415a0:	1899      	adds	r1, r3, r2
 80415a2:	7b7b      	ldrb	r3, [r7, #13]
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire,
 80415a4:	011b      	lsls	r3, r3, #4
 80415a6:	3308      	adds	r3, #8
 80415a8:	4a23      	ldr	r2, [pc, #140]	; (8041638 <Task_Ds18b20+0x1e8>)
 80415aa:	4413      	add	r3, r2
 80415ac:	7b7c      	ldrb	r4, [r7, #13]
 80415ae:	461a      	mov	r2, r3
 80415b0:	481e      	ldr	r0, [pc, #120]	; (804162c <Task_Ds18b20+0x1dc>)
 80415b2:	f000 f861 	bl	8041678 <DS18B20_Read>
 80415b6:	4603      	mov	r3, r0
 80415b8:	4619      	mov	r1, r3
 80415ba:	4a1f      	ldr	r2, [pc, #124]	; (8041638 <Task_Ds18b20+0x1e8>)
 80415bc:	0123      	lsls	r3, r4, #4
 80415be:	4413      	add	r3, r2
 80415c0:	330c      	adds	r3, #12
 80415c2:	460a      	mov	r2, r1
 80415c4:	701a      	strb	r2, [r3, #0]
				printf("ds18b20[i].Temperature: %f\r\n", ds18b20[i].Temperature);
 80415c6:	7b7b      	ldrb	r3, [r7, #13]
 80415c8:	4a1b      	ldr	r2, [pc, #108]	; (8041638 <Task_Ds18b20+0x1e8>)
 80415ca:	011b      	lsls	r3, r3, #4
 80415cc:	4413      	add	r3, r2
 80415ce:	3308      	adds	r3, #8
 80415d0:	681b      	ldr	r3, [r3, #0]
 80415d2:	4618      	mov	r0, r3
 80415d4:	f7fe ffc0 	bl	8040558 <__aeabi_f2d>
 80415d8:	4602      	mov	r2, r0
 80415da:	460b      	mov	r3, r1
 80415dc:	481a      	ldr	r0, [pc, #104]	; (8041648 <Task_Ds18b20+0x1f8>)
 80415de:	f006 fb55 	bl	8047c8c <iprintf>
			for (uint8_t i = 0; i < TempSensorCount; i++) {
 80415e2:	7b7b      	ldrb	r3, [r7, #13]
 80415e4:	3301      	adds	r3, #1
 80415e6:	737b      	strb	r3, [r7, #13]
 80415e8:	4b11      	ldr	r3, [pc, #68]	; (8041630 <Task_Ds18b20+0x1e0>)
 80415ea:	781b      	ldrb	r3, [r3, #0]
 80415ec:	7b7a      	ldrb	r2, [r7, #13]
 80415ee:	429a      	cmp	r2, r3
 80415f0:	d3cf      	bcc.n	8041592 <Task_Ds18b20+0x142>
 80415f2:	e011      	b.n	8041618 <Task_Ds18b20+0x1c8>
			}
		} else {
			for (uint8_t i = 0; i < TempSensorCount; i++)
 80415f4:	2300      	movs	r3, #0
 80415f6:	733b      	strb	r3, [r7, #12]
 80415f8:	e009      	b.n	804160e <Task_Ds18b20+0x1be>
				ds18b20[i].DataIsValid = false;
 80415fa:	7b3b      	ldrb	r3, [r7, #12]
 80415fc:	4a0e      	ldr	r2, [pc, #56]	; (8041638 <Task_Ds18b20+0x1e8>)
 80415fe:	011b      	lsls	r3, r3, #4
 8041600:	4413      	add	r3, r2
 8041602:	330c      	adds	r3, #12
 8041604:	2200      	movs	r2, #0
 8041606:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8041608:	7b3b      	ldrb	r3, [r7, #12]
 804160a:	3301      	adds	r3, #1
 804160c:	733b      	strb	r3, [r7, #12]
 804160e:	4b08      	ldr	r3, [pc, #32]	; (8041630 <Task_Ds18b20+0x1e0>)
 8041610:	781b      	ldrb	r3, [r3, #0]
 8041612:	7b3a      	ldrb	r2, [r7, #12]
 8041614:	429a      	cmp	r2, r3
 8041616:	d3f0      	bcc.n	80415fa <Task_Ds18b20+0x1aa>
		}
		Ds18b20StartConvert = 0;
 8041618:	4b0c      	ldr	r3, [pc, #48]	; (804164c <Task_Ds18b20+0x1fc>)
 804161a:	2200      	movs	r2, #0
 804161c:	701a      	strb	r2, [r3, #0]
		osDelay(_DS18B20_UPDATE_INTERVAL_MS);
 804161e:	f242 7010 	movw	r0, #10000	; 0x2710
 8041622:	f004 fa5a 	bl	8045ada <osDelay>
		while (_DS18B20_UPDATE_INTERVAL_MS == 0) {
 8041626:	e78c      	b.n	8041542 <Task_Ds18b20+0xf2>
 8041628:	40020000 	.word	0x40020000
 804162c:	20000228 	.word	0x20000228
 8041630:	2000023d 	.word	0x2000023d
 8041634:	2000023c 	.word	0x2000023c
 8041638:	20000218 	.word	0x20000218
 804163c:	0804a060 	.word	0x0804a060
 8041640:	20000244 	.word	0x20000244
 8041644:	20000240 	.word	0x20000240
 8041648:	0804a07c 	.word	0x0804a07c
 804164c:	2000023e 	.word	0x2000023e

08041650 <DS18B20_StartAll>:
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);

	return 1;
}

void DS18B20_StartAll(OneWire_t *OneWire) {
 8041650:	b580      	push	{r7, lr}
 8041652:	b082      	sub	sp, #8
 8041654:	af00      	add	r7, sp, #0
 8041656:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8041658:	6878      	ldr	r0, [r7, #4]
 804165a:	f000 fd3f 	bl	80420dc <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 804165e:	21cc      	movs	r1, #204	; 0xcc
 8041660:	6878      	ldr	r0, [r7, #4]
 8041662:	f000 fdc1 	bl	80421e8 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8041666:	2144      	movs	r1, #68	; 0x44
 8041668:	6878      	ldr	r0, [r7, #4]
 804166a:	f000 fdbd 	bl	80421e8 <OneWire_WriteByte>
}
 804166e:	bf00      	nop
 8041670:	3708      	adds	r7, #8
 8041672:	46bd      	mov	sp, r7
 8041674:	bd80      	pop	{r7, pc}
	...

08041678 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t *OneWire, uint8_t *ROM, float *destination) {
 8041678:	b590      	push	{r4, r7, lr}
 804167a:	b08b      	sub	sp, #44	; 0x2c
 804167c:	af00      	add	r7, sp, #0
 804167e:	60f8      	str	r0, [r7, #12]
 8041680:	60b9      	str	r1, [r7, #8]
 8041682:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8041684:	2300      	movs	r3, #0
 8041686:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 804168a:	2300      	movs	r3, #0
 804168c:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 804168e:	68b8      	ldr	r0, [r7, #8]
 8041690:	f000 f97a 	bl	8041988 <DS18B20_Is>
 8041694:	4603      	mov	r3, r0
 8041696:	2b00      	cmp	r3, #0
 8041698:	d101      	bne.n	804169e <DS18B20_Read+0x26>
		return false;
 804169a:	2300      	movs	r3, #0
 804169c:	e0e1      	b.n	8041862 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) {
 804169e:	68f8      	ldr	r0, [r7, #12]
 80416a0:	f000 fd78 	bl	8042194 <OneWire_ReadBit>
 80416a4:	4603      	mov	r3, r0
 80416a6:	2b00      	cmp	r3, #0
 80416a8:	d101      	bne.n	80416ae <DS18B20_Read+0x36>
		/* Conversion is not finished yet */
		return false;
 80416aa:	2300      	movs	r3, #0
 80416ac:	e0d9      	b.n	8041862 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80416ae:	68f8      	ldr	r0, [r7, #12]
 80416b0:	f000 fd14 	bl	80420dc <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80416b4:	68b9      	ldr	r1, [r7, #8]
 80416b6:	68f8      	ldr	r0, [r7, #12]
 80416b8:	f000 fecb 	bl	8042452 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80416bc:	21be      	movs	r1, #190	; 0xbe
 80416be:	68f8      	ldr	r0, [r7, #12]
 80416c0:	f000 fd92 	bl	80421e8 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++) {
 80416c4:	2300      	movs	r3, #0
 80416c6:	77fb      	strb	r3, [r7, #31]
 80416c8:	e00d      	b.n	80416e6 <DS18B20_Read+0x6e>
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80416ca:	7ffc      	ldrb	r4, [r7, #31]
 80416cc:	68f8      	ldr	r0, [r7, #12]
 80416ce:	f000 fda9 	bl	8042224 <OneWire_ReadByte>
 80416d2:	4603      	mov	r3, r0
 80416d4:	461a      	mov	r2, r3
 80416d6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80416da:	443b      	add	r3, r7
 80416dc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) {
 80416e0:	7ffb      	ldrb	r3, [r7, #31]
 80416e2:	3301      	adds	r3, #1
 80416e4:	77fb      	strb	r3, [r7, #31]
 80416e6:	7ffb      	ldrb	r3, [r7, #31]
 80416e8:	2b08      	cmp	r3, #8
 80416ea:	d9ee      	bls.n	80416ca <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80416ec:	f107 0314 	add.w	r3, r7, #20
 80416f0:	2108      	movs	r1, #8
 80416f2:	4618      	mov	r0, r3
 80416f4:	f000 fee9 	bl	80424ca <OneWire_CRC8>
 80416f8:	4603      	mov	r3, r0
 80416fa:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 80416fc:	7f3b      	ldrb	r3, [r7, #28]
 80416fe:	7fba      	ldrb	r2, [r7, #30]
 8041700:	429a      	cmp	r2, r3
 8041702:	d001      	beq.n	8041708 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8041704:	2300      	movs	r3, #0
 8041706:	e0ac      	b.n	8041862 <DS18B20_Read+0x1ea>

	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8041708:	7d3b      	ldrb	r3, [r7, #20]
 804170a:	b21a      	sxth	r2, r3
 804170c:	7d7b      	ldrb	r3, [r7, #21]
 804170e:	021b      	lsls	r3, r3, #8
 8041710:	b21b      	sxth	r3, r3
 8041712:	4313      	orrs	r3, r2
 8041714:	b21b      	sxth	r3, r3
 8041716:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8041718:	68f8      	ldr	r0, [r7, #12]
 804171a:	f000 fcdf 	bl	80420dc <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000) {
 804171e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041722:	2b00      	cmp	r3, #0
 8041724:	da05      	bge.n	8041732 <DS18B20_Read+0xba>
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8041726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041728:	425b      	negs	r3, r3
 804172a:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 804172c:	2301      	movs	r3, #1
 804172e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8041732:	7e3b      	ldrb	r3, [r7, #24]
 8041734:	115b      	asrs	r3, r3, #5
 8041736:	b2db      	uxtb	r3, r3
 8041738:	f003 0303 	and.w	r3, r3, #3
 804173c:	b2db      	uxtb	r3, r3
 804173e:	3309      	adds	r3, #9
 8041740:	777b      	strb	r3, [r7, #29]

	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8041742:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041744:	091b      	lsrs	r3, r3, #4
 8041746:	b29b      	uxth	r3, r3
 8041748:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 804174c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804174e:	0a1b      	lsrs	r3, r3, #8
 8041750:	b29b      	uxth	r3, r3
 8041752:	011b      	lsls	r3, r3, #4
 8041754:	b25b      	sxtb	r3, r3
 8041756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 804175a:	b25a      	sxtb	r2, r3
 804175c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8041760:	4313      	orrs	r3, r2
 8041762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution) {
 8041766:	7f7b      	ldrb	r3, [r7, #29]
 8041768:	3b09      	subs	r3, #9
 804176a:	2b03      	cmp	r3, #3
 804176c:	d858      	bhi.n	8041820 <DS18B20_Read+0x1a8>
 804176e:	a201      	add	r2, pc, #4	; (adr r2, 8041774 <DS18B20_Read+0xfc>)
 8041770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041774:	08041785 	.word	0x08041785
 8041778:	080417ad 	.word	0x080417ad
 804177c:	080417d5 	.word	0x080417d5
 8041780:	080417fd 	.word	0x080417fd
	case 9:
		decimal = (temperature >> 3) & 0x01;
 8041784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041786:	08db      	lsrs	r3, r3, #3
 8041788:	b29b      	uxth	r3, r3
 804178a:	f003 0301 	and.w	r3, r3, #1
 804178e:	ee07 3a90 	vmov	s15, r3
 8041792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8041796:	edc7 7a08 	vstr	s15, [r7, #32]
		decimal *= (float) DS18B20_DECIMAL_STEPS_9BIT;
 804179a:	edd7 7a08 	vldr	s15, [r7, #32]
 804179e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80417a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80417a6:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 80417aa:	e03e      	b.n	804182a <DS18B20_Read+0x1b2>
	case 10:
		decimal = (temperature >> 2) & 0x03;
 80417ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80417ae:	089b      	lsrs	r3, r3, #2
 80417b0:	b29b      	uxth	r3, r3
 80417b2:	f003 0303 	and.w	r3, r3, #3
 80417b6:	ee07 3a90 	vmov	s15, r3
 80417ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80417be:	edc7 7a08 	vstr	s15, [r7, #32]
		decimal *= (float) DS18B20_DECIMAL_STEPS_10BIT;
 80417c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80417c6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80417ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80417ce:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 80417d2:	e02a      	b.n	804182a <DS18B20_Read+0x1b2>
	case 11:
		decimal = (temperature >> 1) & 0x07;
 80417d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80417d6:	085b      	lsrs	r3, r3, #1
 80417d8:	b29b      	uxth	r3, r3
 80417da:	f003 0307 	and.w	r3, r3, #7
 80417de:	ee07 3a90 	vmov	s15, r3
 80417e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80417e6:	edc7 7a08 	vstr	s15, [r7, #32]
		decimal *= (float) DS18B20_DECIMAL_STEPS_11BIT;
 80417ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80417ee:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80417f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80417f6:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 80417fa:	e016      	b.n	804182a <DS18B20_Read+0x1b2>
	case 12:
		decimal = temperature & 0x0F;
 80417fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80417fe:	f003 030f 	and.w	r3, r3, #15
 8041802:	ee07 3a90 	vmov	s15, r3
 8041806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 804180a:	edc7 7a08 	vstr	s15, [r7, #32]
		decimal *= (float) DS18B20_DECIMAL_STEPS_12BIT;
 804180e:	edd7 7a08 	vldr	s15, [r7, #32]
 8041812:	ed9f 7a16 	vldr	s14, [pc, #88]	; 804186c <DS18B20_Read+0x1f4>
 8041816:	ee67 7a87 	vmul.f32	s15, s15, s14
 804181a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 804181e:	e004      	b.n	804182a <DS18B20_Read+0x1b2>
	default:
		decimal = 0xFF;
 8041820:	4b13      	ldr	r3, [pc, #76]	; (8041870 <DS18B20_Read+0x1f8>)
 8041822:	623b      	str	r3, [r7, #32]
		digit = 0;
 8041824:	2300      	movs	r3, #0
 8041826:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 804182a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 804182e:	ee07 3a90 	vmov	s15, r3
 8041832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8041836:	ed97 7a08 	vldr	s14, [r7, #32]
 804183a:	ee77 7a27 	vadd.f32	s15, s14, s15
 804183e:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8041842:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8041846:	2b00      	cmp	r3, #0
 8041848:	d007      	beq.n	804185a <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 804184a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8041874 <DS18B20_Read+0x1fc>
 804184e:	edd7 7a08 	vldr	s15, [r7, #32]
 8041852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8041856:	edc7 7a08 	vstr	s15, [r7, #32]

	/* Set to pointer */
	*destination = decimal;
 804185a:	687b      	ldr	r3, [r7, #4]
 804185c:	6a3a      	ldr	r2, [r7, #32]
 804185e:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8041860:	2301      	movs	r3, #1
}
 8041862:	4618      	mov	r0, r3
 8041864:	372c      	adds	r7, #44	; 0x2c
 8041866:	46bd      	mov	sp, r7
 8041868:	bd90      	pop	{r4, r7, pc}
 804186a:	bf00      	nop
 804186c:	3d800000 	.word	0x3d800000
 8041870:	437f0000 	.word	0x437f0000
 8041874:	00000000 	.word	0x00000000

08041878 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t *OneWire, uint8_t *ROM,
		DS18B20_Resolution_t resolution) {
 8041878:	b580      	push	{r7, lr}
 804187a:	b086      	sub	sp, #24
 804187c:	af00      	add	r7, sp, #0
 804187e:	60f8      	str	r0, [r7, #12]
 8041880:	60b9      	str	r1, [r7, #8]
 8041882:	4613      	mov	r3, r2
 8041884:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8041886:	68b8      	ldr	r0, [r7, #8]
 8041888:	f000 f87e 	bl	8041988 <DS18B20_Is>
 804188c:	4603      	mov	r3, r0
 804188e:	2b00      	cmp	r3, #0
 8041890:	d101      	bne.n	8041896 <DS18B20_SetResolution+0x1e>
		return 0;
 8041892:	2300      	movs	r3, #0
 8041894:	e074      	b.n	8041980 <DS18B20_SetResolution+0x108>

	/* Reset line */
	OneWire_Reset(OneWire);
 8041896:	68f8      	ldr	r0, [r7, #12]
 8041898:	f000 fc20 	bl	80420dc <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 804189c:	68b9      	ldr	r1, [r7, #8]
 804189e:	68f8      	ldr	r0, [r7, #12]
 80418a0:	f000 fdd7 	bl	8042452 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80418a4:	21be      	movs	r1, #190	; 0xbe
 80418a6:	68f8      	ldr	r0, [r7, #12]
 80418a8:	f000 fc9e 	bl	80421e8 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80418ac:	68f8      	ldr	r0, [r7, #12]
 80418ae:	f000 fcb9 	bl	8042224 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80418b2:	68f8      	ldr	r0, [r7, #12]
 80418b4:	f000 fcb6 	bl	8042224 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 80418b8:	68f8      	ldr	r0, [r7, #12]
 80418ba:	f000 fcb3 	bl	8042224 <OneWire_ReadByte>
 80418be:	4603      	mov	r3, r0
 80418c0:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 80418c2:	68f8      	ldr	r0, [r7, #12]
 80418c4:	f000 fcae 	bl	8042224 <OneWire_ReadByte>
 80418c8:	4603      	mov	r3, r0
 80418ca:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 80418cc:	68f8      	ldr	r0, [r7, #12]
 80418ce:	f000 fca9 	bl	8042224 <OneWire_ReadByte>
 80418d2:	4603      	mov	r3, r0
 80418d4:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits) {
 80418d6:	79fb      	ldrb	r3, [r7, #7]
 80418d8:	2b09      	cmp	r3, #9
 80418da:	d108      	bne.n	80418ee <DS18B20_SetResolution+0x76>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80418dc:	7dfb      	ldrb	r3, [r7, #23]
 80418de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80418e2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80418e4:	7dfb      	ldrb	r3, [r7, #23]
 80418e6:	f023 0320 	bic.w	r3, r3, #32
 80418ea:	75fb      	strb	r3, [r7, #23]
 80418ec:	e022      	b.n	8041934 <DS18B20_SetResolution+0xbc>
	} else if (resolution == DS18B20_Resolution_10bits) {
 80418ee:	79fb      	ldrb	r3, [r7, #7]
 80418f0:	2b0a      	cmp	r3, #10
 80418f2:	d108      	bne.n	8041906 <DS18B20_SetResolution+0x8e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80418f4:	7dfb      	ldrb	r3, [r7, #23]
 80418f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80418fa:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80418fc:	7dfb      	ldrb	r3, [r7, #23]
 80418fe:	f043 0320 	orr.w	r3, r3, #32
 8041902:	75fb      	strb	r3, [r7, #23]
 8041904:	e016      	b.n	8041934 <DS18B20_SetResolution+0xbc>
	} else if (resolution == DS18B20_Resolution_11bits) {
 8041906:	79fb      	ldrb	r3, [r7, #7]
 8041908:	2b0b      	cmp	r3, #11
 804190a:	d108      	bne.n	804191e <DS18B20_SetResolution+0xa6>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 804190c:	7dfb      	ldrb	r3, [r7, #23]
 804190e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8041912:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8041914:	7dfb      	ldrb	r3, [r7, #23]
 8041916:	f023 0320 	bic.w	r3, r3, #32
 804191a:	75fb      	strb	r3, [r7, #23]
 804191c:	e00a      	b.n	8041934 <DS18B20_SetResolution+0xbc>
	} else if (resolution == DS18B20_Resolution_12bits) {
 804191e:	79fb      	ldrb	r3, [r7, #7]
 8041920:	2b0c      	cmp	r3, #12
 8041922:	d107      	bne.n	8041934 <DS18B20_SetResolution+0xbc>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8041924:	7dfb      	ldrb	r3, [r7, #23]
 8041926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804192a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 804192c:	7dfb      	ldrb	r3, [r7, #23]
 804192e:	f043 0320 	orr.w	r3, r3, #32
 8041932:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8041934:	68f8      	ldr	r0, [r7, #12]
 8041936:	f000 fbd1 	bl	80420dc <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 804193a:	68b9      	ldr	r1, [r7, #8]
 804193c:	68f8      	ldr	r0, [r7, #12]
 804193e:	f000 fd88 	bl	8042452 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8041942:	214e      	movs	r1, #78	; 0x4e
 8041944:	68f8      	ldr	r0, [r7, #12]
 8041946:	f000 fc4f 	bl	80421e8 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 804194a:	7dbb      	ldrb	r3, [r7, #22]
 804194c:	4619      	mov	r1, r3
 804194e:	68f8      	ldr	r0, [r7, #12]
 8041950:	f000 fc4a 	bl	80421e8 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8041954:	7d7b      	ldrb	r3, [r7, #21]
 8041956:	4619      	mov	r1, r3
 8041958:	68f8      	ldr	r0, [r7, #12]
 804195a:	f000 fc45 	bl	80421e8 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 804195e:	7dfb      	ldrb	r3, [r7, #23]
 8041960:	4619      	mov	r1, r3
 8041962:	68f8      	ldr	r0, [r7, #12]
 8041964:	f000 fc40 	bl	80421e8 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8041968:	68f8      	ldr	r0, [r7, #12]
 804196a:	f000 fbb7 	bl	80420dc <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 804196e:	68b9      	ldr	r1, [r7, #8]
 8041970:	68f8      	ldr	r0, [r7, #12]
 8041972:	f000 fd6e 	bl	8042452 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8041976:	2148      	movs	r1, #72	; 0x48
 8041978:	68f8      	ldr	r0, [r7, #12]
 804197a:	f000 fc35 	bl	80421e8 <OneWire_WriteByte>

	return 1;
 804197e:	2301      	movs	r3, #1
}
 8041980:	4618      	mov	r0, r3
 8041982:	3718      	adds	r7, #24
 8041984:	46bd      	mov	sp, r7
 8041986:	bd80      	pop	{r7, pc}

08041988 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) {
 8041988:	b480      	push	{r7}
 804198a:	b083      	sub	sp, #12
 804198c:	af00      	add	r7, sp, #0
 804198e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8041990:	687b      	ldr	r3, [r7, #4]
 8041992:	781b      	ldrb	r3, [r3, #0]
 8041994:	2b28      	cmp	r3, #40	; 0x28
 8041996:	d101      	bne.n	804199c <DS18B20_Is+0x14>
		return 1;
 8041998:	2301      	movs	r3, #1
 804199a:	e000      	b.n	804199e <DS18B20_Is+0x16>

	return 0;
 804199c:	2300      	movs	r3, #0
}
 804199e:	4618      	mov	r0, r3
 80419a0:	370c      	adds	r7, #12
 80419a2:	46bd      	mov	sp, r7
 80419a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419a8:	4770      	bx	lr

080419aa <DS18B20_DisableAlarmTemperature>:
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t *OneWire, uint8_t *ROM) {
 80419aa:	b580      	push	{r7, lr}
 80419ac:	b084      	sub	sp, #16
 80419ae:	af00      	add	r7, sp, #0
 80419b0:	6078      	str	r0, [r7, #4]
 80419b2:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 80419b4:	6838      	ldr	r0, [r7, #0]
 80419b6:	f7ff ffe7 	bl	8041988 <DS18B20_Is>
 80419ba:	4603      	mov	r3, r0
 80419bc:	2b00      	cmp	r3, #0
 80419be:	d101      	bne.n	80419c4 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 80419c0:	2300      	movs	r3, #0
 80419c2:	e049      	b.n	8041a58 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 80419c4:	6878      	ldr	r0, [r7, #4]
 80419c6:	f000 fb89 	bl	80420dc <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80419ca:	6839      	ldr	r1, [r7, #0]
 80419cc:	6878      	ldr	r0, [r7, #4]
 80419ce:	f000 fd40 	bl	8042452 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80419d2:	21be      	movs	r1, #190	; 0xbe
 80419d4:	6878      	ldr	r0, [r7, #4]
 80419d6:	f000 fc07 	bl	80421e8 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80419da:	6878      	ldr	r0, [r7, #4]
 80419dc:	f000 fc22 	bl	8042224 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80419e0:	6878      	ldr	r0, [r7, #4]
 80419e2:	f000 fc1f 	bl	8042224 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 80419e6:	6878      	ldr	r0, [r7, #4]
 80419e8:	f000 fc1c 	bl	8042224 <OneWire_ReadByte>
 80419ec:	4603      	mov	r3, r0
 80419ee:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 80419f0:	6878      	ldr	r0, [r7, #4]
 80419f2:	f000 fc17 	bl	8042224 <OneWire_ReadByte>
 80419f6:	4603      	mov	r3, r0
 80419f8:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 80419fa:	6878      	ldr	r0, [r7, #4]
 80419fc:	f000 fc12 	bl	8042224 <OneWire_ReadByte>
 8041a00:	4603      	mov	r3, r0
 8041a02:	737b      	strb	r3, [r7, #13]

	th = 125;
 8041a04:	237d      	movs	r3, #125	; 0x7d
 8041a06:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t) -55;
 8041a08:	23c9      	movs	r3, #201	; 0xc9
 8041a0a:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8041a0c:	6878      	ldr	r0, [r7, #4]
 8041a0e:	f000 fb65 	bl	80420dc <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8041a12:	6839      	ldr	r1, [r7, #0]
 8041a14:	6878      	ldr	r0, [r7, #4]
 8041a16:	f000 fd1c 	bl	8042452 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8041a1a:	214e      	movs	r1, #78	; 0x4e
 8041a1c:	6878      	ldr	r0, [r7, #4]
 8041a1e:	f000 fbe3 	bl	80421e8 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8041a22:	7bfb      	ldrb	r3, [r7, #15]
 8041a24:	4619      	mov	r1, r3
 8041a26:	6878      	ldr	r0, [r7, #4]
 8041a28:	f000 fbde 	bl	80421e8 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8041a2c:	7bbb      	ldrb	r3, [r7, #14]
 8041a2e:	4619      	mov	r1, r3
 8041a30:	6878      	ldr	r0, [r7, #4]
 8041a32:	f000 fbd9 	bl	80421e8 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8041a36:	7b7b      	ldrb	r3, [r7, #13]
 8041a38:	4619      	mov	r1, r3
 8041a3a:	6878      	ldr	r0, [r7, #4]
 8041a3c:	f000 fbd4 	bl	80421e8 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8041a40:	6878      	ldr	r0, [r7, #4]
 8041a42:	f000 fb4b 	bl	80420dc <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8041a46:	6839      	ldr	r1, [r7, #0]
 8041a48:	6878      	ldr	r0, [r7, #4]
 8041a4a:	f000 fd02 	bl	8042452 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8041a4e:	2148      	movs	r1, #72	; 0x48
 8041a50:	6878      	ldr	r0, [r7, #4]
 8041a52:	f000 fbc9 	bl	80421e8 <OneWire_WriteByte>

	return 1;
 8041a56:	2301      	movs	r3, #1
}
 8041a58:	4618      	mov	r0, r3
 8041a5a:	3710      	adds	r7, #16
 8041a5c:	46bd      	mov	sp, r7
 8041a5e:	bd80      	pop	{r7, pc}

08041a60 <DS18B20_AllDone>:
uint8_t DS18B20_AlarmSearch(OneWire_t *OneWire) {
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t *OneWire) {
 8041a60:	b580      	push	{r7, lr}
 8041a62:	b082      	sub	sp, #8
 8041a64:	af00      	add	r7, sp, #0
 8041a66:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8041a68:	6878      	ldr	r0, [r7, #4]
 8041a6a:	f000 fb93 	bl	8042194 <OneWire_ReadBit>
 8041a6e:	4603      	mov	r3, r0
}
 8041a70:	4618      	mov	r0, r3
 8041a72:	3708      	adds	r7, #8
 8041a74:	46bd      	mov	sp, r7
 8041a76:	bd80      	pop	{r7, pc}

08041a78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8041a78:	b480      	push	{r7}
 8041a7a:	b085      	sub	sp, #20
 8041a7c:	af00      	add	r7, sp, #0
 8041a7e:	60f8      	str	r0, [r7, #12]
 8041a80:	60b9      	str	r1, [r7, #8]
 8041a82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8041a84:	68fb      	ldr	r3, [r7, #12]
 8041a86:	4a07      	ldr	r2, [pc, #28]	; (8041aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8041a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8041a8a:	68bb      	ldr	r3, [r7, #8]
 8041a8c:	4a06      	ldr	r2, [pc, #24]	; (8041aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8041a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8041a90:	687b      	ldr	r3, [r7, #4]
 8041a92:	2280      	movs	r2, #128	; 0x80
 8041a94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8041a96:	bf00      	nop
 8041a98:	3714      	adds	r7, #20
 8041a9a:	46bd      	mov	sp, r7
 8041a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041aa0:	4770      	bx	lr
 8041aa2:	bf00      	nop
 8041aa4:	2000024c 	.word	0x2000024c
 8041aa8:	20000300 	.word	0x20000300

08041aac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8041aac:	b5b0      	push	{r4, r5, r7, lr}
 8041aae:	b088      	sub	sp, #32
 8041ab0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8041ab2:	4b0a      	ldr	r3, [pc, #40]	; (8041adc <MX_FREERTOS_Init+0x30>)
 8041ab4:	1d3c      	adds	r4, r7, #4
 8041ab6:	461d      	mov	r5, r3
 8041ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8041aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8041abc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8041ac0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8041ac4:	1d3b      	adds	r3, r7, #4
 8041ac6:	2100      	movs	r1, #0
 8041ac8:	4618      	mov	r0, r3
 8041aca:	f003 ffba 	bl	8045a42 <osThreadCreate>
 8041ace:	4603      	mov	r3, r0
 8041ad0:	4a03      	ldr	r2, [pc, #12]	; (8041ae0 <MX_FREERTOS_Init+0x34>)
 8041ad2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8041ad4:	bf00      	nop
 8041ad6:	3720      	adds	r7, #32
 8041ad8:	46bd      	mov	sp, r7
 8041ada:	bdb0      	pop	{r4, r5, r7, pc}
 8041adc:	0804a0a8 	.word	0x0804a0a8
 8041ae0:	20000248 	.word	0x20000248

08041ae4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8041ae4:	b580      	push	{r7, lr}
 8041ae6:	b082      	sub	sp, #8
 8041ae8:	af00      	add	r7, sp, #0
 8041aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8041aec:	2001      	movs	r0, #1
 8041aee:	f003 fff4 	bl	8045ada <osDelay>
 8041af2:	e7fb      	b.n	8041aec <StartDefaultTask+0x8>

08041af4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8041af4:	b580      	push	{r7, lr}
 8041af6:	b08a      	sub	sp, #40	; 0x28
 8041af8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041afa:	f107 0314 	add.w	r3, r7, #20
 8041afe:	2200      	movs	r2, #0
 8041b00:	601a      	str	r2, [r3, #0]
 8041b02:	605a      	str	r2, [r3, #4]
 8041b04:	609a      	str	r2, [r3, #8]
 8041b06:	60da      	str	r2, [r3, #12]
 8041b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8041b0a:	2300      	movs	r3, #0
 8041b0c:	613b      	str	r3, [r7, #16]
 8041b0e:	4b3f      	ldr	r3, [pc, #252]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b12:	4a3e      	ldr	r2, [pc, #248]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b14:	f043 0304 	orr.w	r3, r3, #4
 8041b18:	6313      	str	r3, [r2, #48]	; 0x30
 8041b1a:	4b3c      	ldr	r3, [pc, #240]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b1e:	f003 0304 	and.w	r3, r3, #4
 8041b22:	613b      	str	r3, [r7, #16]
 8041b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8041b26:	2300      	movs	r3, #0
 8041b28:	60fb      	str	r3, [r7, #12]
 8041b2a:	4b38      	ldr	r3, [pc, #224]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b2e:	4a37      	ldr	r2, [pc, #220]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041b34:	6313      	str	r3, [r2, #48]	; 0x30
 8041b36:	4b35      	ldr	r3, [pc, #212]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041b3e:	60fb      	str	r3, [r7, #12]
 8041b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8041b42:	2300      	movs	r3, #0
 8041b44:	60bb      	str	r3, [r7, #8]
 8041b46:	4b31      	ldr	r3, [pc, #196]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b4a:	4a30      	ldr	r2, [pc, #192]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b4c:	f043 0301 	orr.w	r3, r3, #1
 8041b50:	6313      	str	r3, [r2, #48]	; 0x30
 8041b52:	4b2e      	ldr	r3, [pc, #184]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b56:	f003 0301 	and.w	r3, r3, #1
 8041b5a:	60bb      	str	r3, [r7, #8]
 8041b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8041b5e:	2300      	movs	r3, #0
 8041b60:	607b      	str	r3, [r7, #4]
 8041b62:	4b2a      	ldr	r3, [pc, #168]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b66:	4a29      	ldr	r2, [pc, #164]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b68:	f043 0302 	orr.w	r3, r3, #2
 8041b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8041b6e:	4b27      	ldr	r3, [pc, #156]	; (8041c0c <MX_GPIO_Init+0x118>)
 8041b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b72:	f003 0302 	and.w	r3, r3, #2
 8041b76:	607b      	str	r3, [r7, #4]
 8041b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8041b7a:	2200      	movs	r2, #0
 8041b7c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8041b80:	4823      	ldr	r0, [pc, #140]	; (8041c10 <MX_GPIO_Init+0x11c>)
 8041b82:	f001 fa49 	bl	8043018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8041b86:	2200      	movs	r2, #0
 8041b88:	2120      	movs	r1, #32
 8041b8a:	4822      	ldr	r0, [pc, #136]	; (8041c14 <MX_GPIO_Init+0x120>)
 8041b8c:	f001 fa44 	bl	8043018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8041b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8041b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8041b96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8041b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b9c:	2300      	movs	r3, #0
 8041b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8041ba0:	f107 0314 	add.w	r3, r7, #20
 8041ba4:	4619      	mov	r1, r3
 8041ba6:	481b      	ldr	r0, [pc, #108]	; (8041c14 <MX_GPIO_Init+0x120>)
 8041ba8:	f001 f89a 	bl	8042ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8041bac:	2320      	movs	r3, #32
 8041bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041bb0:	2301      	movs	r3, #1
 8041bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041bb4:	2300      	movs	r3, #0
 8041bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041bb8:	2300      	movs	r3, #0
 8041bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8041bbc:	f107 0314 	add.w	r3, r7, #20
 8041bc0:	4619      	mov	r1, r3
 8041bc2:	4813      	ldr	r0, [pc, #76]	; (8041c10 <MX_GPIO_Init+0x11c>)
 8041bc4:	f001 f88c 	bl	8042ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8041bc8:	2320      	movs	r3, #32
 8041bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041bcc:	2301      	movs	r3, #1
 8041bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041bd0:	2300      	movs	r3, #0
 8041bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041bd4:	2300      	movs	r3, #0
 8041bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8041bd8:	f107 0314 	add.w	r3, r7, #20
 8041bdc:	4619      	mov	r1, r3
 8041bde:	480d      	ldr	r0, [pc, #52]	; (8041c14 <MX_GPIO_Init+0x120>)
 8041be0:	f001 f87e 	bl	8042ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8041be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8041be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8041bea:	2311      	movs	r3, #17
 8041bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8041bee:	2301      	movs	r3, #1
 8041bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041bf2:	2300      	movs	r3, #0
 8041bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8041bf6:	f107 0314 	add.w	r3, r7, #20
 8041bfa:	4619      	mov	r1, r3
 8041bfc:	4804      	ldr	r0, [pc, #16]	; (8041c10 <MX_GPIO_Init+0x11c>)
 8041bfe:	f001 f86f 	bl	8042ce0 <HAL_GPIO_Init>

}
 8041c02:	bf00      	nop
 8041c04:	3728      	adds	r7, #40	; 0x28
 8041c06:	46bd      	mov	sp, r7
 8041c08:	bd80      	pop	{r7, pc}
 8041c0a:	bf00      	nop
 8041c0c:	40023800 	.word	0x40023800
 8041c10:	40020000 	.word	0x40020000
 8041c14:	40020800 	.word	0x40020800

08041c18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8041c18:	b580      	push	{r7, lr}
 8041c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8041c1c:	4b12      	ldr	r3, [pc, #72]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c1e:	4a13      	ldr	r2, [pc, #76]	; (8041c6c <MX_I2C1_Init+0x54>)
 8041c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8041c22:	4b11      	ldr	r3, [pc, #68]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c24:	4a12      	ldr	r2, [pc, #72]	; (8041c70 <MX_I2C1_Init+0x58>)
 8041c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8041c28:	4b0f      	ldr	r3, [pc, #60]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c2a:	2200      	movs	r2, #0
 8041c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8041c2e:	4b0e      	ldr	r3, [pc, #56]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c30:	2200      	movs	r2, #0
 8041c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8041c34:	4b0c      	ldr	r3, [pc, #48]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8041c3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8041c3c:	4b0a      	ldr	r3, [pc, #40]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c3e:	2200      	movs	r2, #0
 8041c40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8041c42:	4b09      	ldr	r3, [pc, #36]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c44:	2200      	movs	r2, #0
 8041c46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8041c48:	4b07      	ldr	r3, [pc, #28]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c4a:	2200      	movs	r2, #0
 8041c4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8041c4e:	4b06      	ldr	r3, [pc, #24]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c50:	2200      	movs	r2, #0
 8041c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8041c54:	4804      	ldr	r0, [pc, #16]	; (8041c68 <MX_I2C1_Init+0x50>)
 8041c56:	f001 fa13 	bl	8043080 <HAL_I2C_Init>
 8041c5a:	4603      	mov	r3, r0
 8041c5c:	2b00      	cmp	r3, #0
 8041c5e:	d001      	beq.n	8041c64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8041c60:	f000 f99c 	bl	8041f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8041c64:	bf00      	nop
 8041c66:	bd80      	pop	{r7, pc}
 8041c68:	20000500 	.word	0x20000500
 8041c6c:	40005400 	.word	0x40005400
 8041c70:	000186a0 	.word	0x000186a0

08041c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8041c74:	b580      	push	{r7, lr}
 8041c76:	b08a      	sub	sp, #40	; 0x28
 8041c78:	af00      	add	r7, sp, #0
 8041c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041c7c:	f107 0314 	add.w	r3, r7, #20
 8041c80:	2200      	movs	r2, #0
 8041c82:	601a      	str	r2, [r3, #0]
 8041c84:	605a      	str	r2, [r3, #4]
 8041c86:	609a      	str	r2, [r3, #8]
 8041c88:	60da      	str	r2, [r3, #12]
 8041c8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8041c8c:	687b      	ldr	r3, [r7, #4]
 8041c8e:	681b      	ldr	r3, [r3, #0]
 8041c90:	4a19      	ldr	r2, [pc, #100]	; (8041cf8 <HAL_I2C_MspInit+0x84>)
 8041c92:	4293      	cmp	r3, r2
 8041c94:	d12c      	bne.n	8041cf0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8041c96:	2300      	movs	r3, #0
 8041c98:	613b      	str	r3, [r7, #16]
 8041c9a:	4b18      	ldr	r3, [pc, #96]	; (8041cfc <HAL_I2C_MspInit+0x88>)
 8041c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c9e:	4a17      	ldr	r2, [pc, #92]	; (8041cfc <HAL_I2C_MspInit+0x88>)
 8041ca0:	f043 0302 	orr.w	r3, r3, #2
 8041ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8041ca6:	4b15      	ldr	r3, [pc, #84]	; (8041cfc <HAL_I2C_MspInit+0x88>)
 8041ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041caa:	f003 0302 	and.w	r3, r3, #2
 8041cae:	613b      	str	r3, [r7, #16]
 8041cb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8041cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8041cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8041cb8:	2312      	movs	r3, #18
 8041cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041cbc:	2300      	movs	r3, #0
 8041cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041cc0:	2303      	movs	r3, #3
 8041cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8041cc4:	2304      	movs	r3, #4
 8041cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041cc8:	f107 0314 	add.w	r3, r7, #20
 8041ccc:	4619      	mov	r1, r3
 8041cce:	480c      	ldr	r0, [pc, #48]	; (8041d00 <HAL_I2C_MspInit+0x8c>)
 8041cd0:	f001 f806 	bl	8042ce0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8041cd4:	2300      	movs	r3, #0
 8041cd6:	60fb      	str	r3, [r7, #12]
 8041cd8:	4b08      	ldr	r3, [pc, #32]	; (8041cfc <HAL_I2C_MspInit+0x88>)
 8041cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041cdc:	4a07      	ldr	r2, [pc, #28]	; (8041cfc <HAL_I2C_MspInit+0x88>)
 8041cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8041ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8041ce4:	4b05      	ldr	r3, [pc, #20]	; (8041cfc <HAL_I2C_MspInit+0x88>)
 8041ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041cec:	60fb      	str	r3, [r7, #12]
 8041cee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8041cf0:	bf00      	nop
 8041cf2:	3728      	adds	r7, #40	; 0x28
 8041cf4:	46bd      	mov	sp, r7
 8041cf6:	bd80      	pop	{r7, pc}
 8041cf8:	40005400 	.word	0x40005400
 8041cfc:	40023800 	.word	0x40023800
 8041d00:	40020400 	.word	0x40020400

08041d04 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8041d04:	b580      	push	{r7, lr}
 8041d06:	b082      	sub	sp, #8
 8041d08:	af00      	add	r7, sp, #0
 8041d0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8041d0c:	1d39      	adds	r1, r7, #4
 8041d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8041d12:	2201      	movs	r2, #1
 8041d14:	4803      	ldr	r0, [pc, #12]	; (8041d24 <__io_putchar+0x20>)
 8041d16:	f003 fb00 	bl	804531a <HAL_UART_Transmit>
	return ch;
 8041d1a:	687b      	ldr	r3, [r7, #4]
}
 8041d1c:	4618      	mov	r0, r3
 8041d1e:	3708      	adds	r7, #8
 8041d20:	46bd      	mov	sp, r7
 8041d22:	bd80      	pop	{r7, pc}
 8041d24:	200005f0 	.word	0x200005f0

08041d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8041d28:	b580      	push	{r7, lr}
 8041d2a:	b088      	sub	sp, #32
 8041d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8041d2e:	f000 feb3 	bl	8042a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8041d32:	f000 f837 	bl	8041da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8041d36:	f7ff fedd 	bl	8041af4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8041d3a:	f000 fe11 	bl	8042960 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8041d3e:	f7ff ff6b 	bl	8041c18 <MX_I2C1_Init>
  MX_TIM1_Init();
 8041d42:	f000 fd95 	bl	8042870 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	printf("Everything is initialized\r\n");
 8041d46:	4813      	ldr	r0, [pc, #76]	; (8041d94 <main+0x6c>)
 8041d48:	f006 f826 	bl	8047d98 <puts>

	osPriority Task_BlinkyPriority = osPriorityNormal;
 8041d4c:	2300      	movs	r3, #0
 8041d4e:	83fb      	strh	r3, [r7, #30]
	osThreadDef(myTask_Blinky, Task_Blinky, Task_BlinkyPriority, 0, 128);
 8041d50:	4b11      	ldr	r3, [pc, #68]	; (8041d98 <main+0x70>)
 8041d52:	603b      	str	r3, [r7, #0]
 8041d54:	4b11      	ldr	r3, [pc, #68]	; (8041d9c <main+0x74>)
 8041d56:	607b      	str	r3, [r7, #4]
 8041d58:	8bfb      	ldrh	r3, [r7, #30]
 8041d5a:	813b      	strh	r3, [r7, #8]
 8041d5c:	2300      	movs	r3, #0
 8041d5e:	60fb      	str	r3, [r7, #12]
 8041d60:	2380      	movs	r3, #128	; 0x80
 8041d62:	613b      	str	r3, [r7, #16]
 8041d64:	2300      	movs	r3, #0
 8041d66:	617b      	str	r3, [r7, #20]
 8041d68:	2300      	movs	r3, #0
 8041d6a:	61bb      	str	r3, [r7, #24]
	BlinkyHandle = osThreadCreate(osThread(myTask_Blinky), NULL);
 8041d6c:	463b      	mov	r3, r7
 8041d6e:	2100      	movs	r1, #0
 8041d70:	4618      	mov	r0, r3
 8041d72:	f003 fe66 	bl	8045a42 <osThreadCreate>
 8041d76:	4603      	mov	r3, r0
 8041d78:	4a09      	ldr	r2, [pc, #36]	; (8041da0 <main+0x78>)
 8041d7a:	6013      	str	r3, [r2, #0]

	Bmp180_Init(osPriorityNormal);
 8041d7c:	2000      	movs	r0, #0
 8041d7e:	f000 f87b 	bl	8041e78 <Bmp180_Init>
	Ds18b20_Init(osPriorityNormal);
 8041d82:	2000      	movs	r0, #0
 8041d84:	f7ff fb3e 	bl	8041404 <Ds18b20_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8041d88:	f7ff fe90 	bl	8041aac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8041d8c:	f003 fe52 	bl	8045a34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8041d90:	e7fe      	b.n	8041d90 <main+0x68>
 8041d92:	bf00      	nop
 8041d94:	0804a0c4 	.word	0x0804a0c4
 8041d98:	0804a0e0 	.word	0x0804a0e0
 8041d9c:	08041f59 	.word	0x08041f59
 8041da0:	20000558 	.word	0x20000558

08041da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8041da4:	b580      	push	{r7, lr}
 8041da6:	b094      	sub	sp, #80	; 0x50
 8041da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8041daa:	f107 0320 	add.w	r3, r7, #32
 8041dae:	2230      	movs	r2, #48	; 0x30
 8041db0:	2100      	movs	r1, #0
 8041db2:	4618      	mov	r0, r3
 8041db4:	f005 fa63 	bl	804727e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8041db8:	f107 030c 	add.w	r3, r7, #12
 8041dbc:	2200      	movs	r2, #0
 8041dbe:	601a      	str	r2, [r3, #0]
 8041dc0:	605a      	str	r2, [r3, #4]
 8041dc2:	609a      	str	r2, [r3, #8]
 8041dc4:	60da      	str	r2, [r3, #12]
 8041dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8041dc8:	2300      	movs	r3, #0
 8041dca:	60bb      	str	r3, [r7, #8]
 8041dcc:	4b28      	ldr	r3, [pc, #160]	; (8041e70 <SystemClock_Config+0xcc>)
 8041dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041dd0:	4a27      	ldr	r2, [pc, #156]	; (8041e70 <SystemClock_Config+0xcc>)
 8041dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8041dd8:	4b25      	ldr	r3, [pc, #148]	; (8041e70 <SystemClock_Config+0xcc>)
 8041dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041de0:	60bb      	str	r3, [r7, #8]
 8041de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8041de4:	2300      	movs	r3, #0
 8041de6:	607b      	str	r3, [r7, #4]
 8041de8:	4b22      	ldr	r3, [pc, #136]	; (8041e74 <SystemClock_Config+0xd0>)
 8041dea:	681b      	ldr	r3, [r3, #0]
 8041dec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8041df0:	4a20      	ldr	r2, [pc, #128]	; (8041e74 <SystemClock_Config+0xd0>)
 8041df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8041df6:	6013      	str	r3, [r2, #0]
 8041df8:	4b1e      	ldr	r3, [pc, #120]	; (8041e74 <SystemClock_Config+0xd0>)
 8041dfa:	681b      	ldr	r3, [r3, #0]
 8041dfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8041e00:	607b      	str	r3, [r7, #4]
 8041e02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8041e04:	2302      	movs	r3, #2
 8041e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8041e08:	2301      	movs	r3, #1
 8041e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8041e0c:	2310      	movs	r3, #16
 8041e0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8041e10:	2302      	movs	r3, #2
 8041e12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8041e14:	2300      	movs	r3, #0
 8041e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8041e18:	2308      	movs	r3, #8
 8041e1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8041e1c:	2354      	movs	r3, #84	; 0x54
 8041e1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8041e20:	2302      	movs	r3, #2
 8041e22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8041e24:	2307      	movs	r3, #7
 8041e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8041e28:	f107 0320 	add.w	r3, r7, #32
 8041e2c:	4618      	mov	r0, r3
 8041e2e:	f002 f8bd 	bl	8043fac <HAL_RCC_OscConfig>
 8041e32:	4603      	mov	r3, r0
 8041e34:	2b00      	cmp	r3, #0
 8041e36:	d001      	beq.n	8041e3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8041e38:	f000 f8b0 	bl	8041f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8041e3c:	230f      	movs	r3, #15
 8041e3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8041e40:	2302      	movs	r3, #2
 8041e42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8041e44:	2300      	movs	r3, #0
 8041e46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8041e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8041e4e:	2300      	movs	r3, #0
 8041e50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8041e52:	f107 030c 	add.w	r3, r7, #12
 8041e56:	2102      	movs	r1, #2
 8041e58:	4618      	mov	r0, r3
 8041e5a:	f002 fb1f 	bl	804449c <HAL_RCC_ClockConfig>
 8041e5e:	4603      	mov	r3, r0
 8041e60:	2b00      	cmp	r3, #0
 8041e62:	d001      	beq.n	8041e68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8041e64:	f000 f89a 	bl	8041f9c <Error_Handler>
  }
}
 8041e68:	bf00      	nop
 8041e6a:	3750      	adds	r7, #80	; 0x50
 8041e6c:	46bd      	mov	sp, r7
 8041e6e:	bd80      	pop	{r7, pc}
 8041e70:	40023800 	.word	0x40023800
 8041e74:	40007000 	.word	0x40007000

08041e78 <Bmp180_Init>:

/* USER CODE BEGIN 4 */

void Bmp180_Init(osPriority Priority) {
 8041e78:	b580      	push	{r7, lr}
 8041e7a:	b08a      	sub	sp, #40	; 0x28
 8041e7c:	af00      	add	r7, sp, #0
 8041e7e:	4603      	mov	r3, r0
 8041e80:	80fb      	strh	r3, [r7, #6]
	osThreadDef(myTask_Bmp180, Task_Bmp180, Priority, 0, 128);
 8041e82:	4b11      	ldr	r3, [pc, #68]	; (8041ec8 <Bmp180_Init+0x50>)
 8041e84:	60fb      	str	r3, [r7, #12]
 8041e86:	4b11      	ldr	r3, [pc, #68]	; (8041ecc <Bmp180_Init+0x54>)
 8041e88:	613b      	str	r3, [r7, #16]
 8041e8a:	88fb      	ldrh	r3, [r7, #6]
 8041e8c:	82bb      	strh	r3, [r7, #20]
 8041e8e:	2300      	movs	r3, #0
 8041e90:	61bb      	str	r3, [r7, #24]
 8041e92:	2380      	movs	r3, #128	; 0x80
 8041e94:	61fb      	str	r3, [r7, #28]
 8041e96:	2300      	movs	r3, #0
 8041e98:	623b      	str	r3, [r7, #32]
 8041e9a:	2300      	movs	r3, #0
 8041e9c:	627b      	str	r3, [r7, #36]	; 0x24
	Bmp180Handle = osThreadCreate(osThread(myTask_Bmp180), NULL);
 8041e9e:	f107 030c 	add.w	r3, r7, #12
 8041ea2:	2100      	movs	r1, #0
 8041ea4:	4618      	mov	r0, r3
 8041ea6:	f003 fdcc 	bl	8045a42 <osThreadCreate>
 8041eaa:	4603      	mov	r3, r0
 8041eac:	4a08      	ldr	r2, [pc, #32]	; (8041ed0 <Bmp180_Init+0x58>)
 8041eae:	6013      	str	r3, [r2, #0]

	//TODO: a hibakezelelést itt még meg kéne oldani, mert ha nincs csatlakoztatva szenzor akkor beragad
#if 1
	/* Initializes BMP180 sensor and oversampling settings. */
	BMP180_SetI2C(&hi2c1);
 8041eb0:	4808      	ldr	r0, [pc, #32]	; (8041ed4 <Bmp180_Init+0x5c>)
 8041eb2:	f7ff f803 	bl	8040ebc <BMP180_SetI2C>
	BMP180_SetOversampling(BMP180_ULTRA);
 8041eb6:	2003      	movs	r0, #3
 8041eb8:	f7ff f810 	bl	8040edc <BMP180_SetOversampling>
	/* Update calibration data. Must be called once before entering main loop. */
	BMP180_UpdateCalibrationData();
 8041ebc:	f7ff f81e 	bl	8040efc <BMP180_UpdateCalibrationData>
#endif
}
 8041ec0:	bf00      	nop
 8041ec2:	3728      	adds	r7, #40	; 0x28
 8041ec4:	46bd      	mov	sp, r7
 8041ec6:	bd80      	pop	{r7, pc}
 8041ec8:	0804a0f0 	.word	0x0804a0f0
 8041ecc:	08041ed9 	.word	0x08041ed9
 8041ed0:	20000554 	.word	0x20000554
 8041ed4:	20000500 	.word	0x20000500

08041ed8 <Task_Bmp180>:

void Task_Bmp180(void const *argument) {
 8041ed8:	b590      	push	{r4, r7, lr}
 8041eda:	b0a1      	sub	sp, #132	; 0x84
 8041edc:	af02      	add	r7, sp, #8
 8041ede:	6078      	str	r0, [r7, #4]
	for (;;) {
#if 1
		/* Reads temperature. */
		int32_t temperature = BMP180_GetRawTemperature();
 8041ee0:	f7ff f910 	bl	8041104 <BMP180_GetRawTemperature>
 8041ee4:	6778      	str	r0, [r7, #116]	; 0x74
		/* If you want a floating point number instead, you can call: */
		//float temperature = BMP180_GetTemperature();
		/* Reads pressure. */
		int32_t pressure = BMP180_GetPressure();
 8041ee6:	f7ff f951 	bl	804118c <BMP180_GetPressure>
 8041eea:	6738      	str	r0, [r7, #112]	; 0x70
		char buffer[100];
		sprintf(buffer, "Temperature: %d.%d deg C\nPressure: %d Pa\n",
 8041eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8041eee:	4a17      	ldr	r2, [pc, #92]	; (8041f4c <Task_Bmp180+0x74>)
 8041ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8041ef4:	1092      	asrs	r2, r2, #2
 8041ef6:	17db      	asrs	r3, r3, #31
 8041ef8:	1ad4      	subs	r4, r2, r3
 8041efa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8041efc:	4b13      	ldr	r3, [pc, #76]	; (8041f4c <Task_Bmp180+0x74>)
 8041efe:	fb83 1302 	smull	r1, r3, r3, r2
 8041f02:	1099      	asrs	r1, r3, #2
 8041f04:	17d3      	asrs	r3, r2, #31
 8041f06:	1ac9      	subs	r1, r1, r3
 8041f08:	460b      	mov	r3, r1
 8041f0a:	009b      	lsls	r3, r3, #2
 8041f0c:	440b      	add	r3, r1
 8041f0e:	005b      	lsls	r3, r3, #1
 8041f10:	1ad1      	subs	r1, r2, r3
 8041f12:	f107 000c 	add.w	r0, r7, #12
 8041f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8041f18:	9300      	str	r3, [sp, #0]
 8041f1a:	460b      	mov	r3, r1
 8041f1c:	4622      	mov	r2, r4
 8041f1e:	490c      	ldr	r1, [pc, #48]	; (8041f50 <Task_Bmp180+0x78>)
 8041f20:	f005 ffbc 	bl	8047e9c <siprintf>
				(int) temperature / 10, (int) temperature % 10, (int) pressure);
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8041f24:	f107 030c 	add.w	r3, r7, #12
 8041f28:	4618      	mov	r0, r3
 8041f2a:	f7fe f959 	bl	80401e0 <strlen>
 8041f2e:	4603      	mov	r3, r0
 8041f30:	b29a      	uxth	r2, r3
 8041f32:	f107 010c 	add.w	r1, r7, #12
 8041f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041f3a:	4806      	ldr	r0, [pc, #24]	; (8041f54 <Task_Bmp180+0x7c>)
 8041f3c:	f003 f9ed 	bl	804531a <HAL_UART_Transmit>
#endif
		//printf("Task_Bmp180\r\n");
		osDelay(3000);
 8041f40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8041f44:	f003 fdc9 	bl	8045ada <osDelay>
	for (;;) {
 8041f48:	e7ca      	b.n	8041ee0 <Task_Bmp180+0x8>
 8041f4a:	bf00      	nop
 8041f4c:	66666667 	.word	0x66666667
 8041f50:	0804a100 	.word	0x0804a100
 8041f54:	200005f0 	.word	0x200005f0

08041f58 <Task_Blinky>:
	}
}

void Task_Blinky(void const *argument) {
 8041f58:	b580      	push	{r7, lr}
 8041f5a:	b082      	sub	sp, #8
 8041f5c:	af00      	add	r7, sp, #0
 8041f5e:	6078      	str	r0, [r7, #4]
	for (;;) {
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8041f60:	2120      	movs	r1, #32
 8041f62:	4804      	ldr	r0, [pc, #16]	; (8041f74 <Task_Blinky+0x1c>)
 8041f64:	f001 f871 	bl	804304a <HAL_GPIO_TogglePin>
		osDelay(500);
 8041f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8041f6c:	f003 fdb5 	bl	8045ada <osDelay>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8041f70:	e7f6      	b.n	8041f60 <Task_Blinky+0x8>
 8041f72:	bf00      	nop
 8041f74:	40020800 	.word	0x40020800

08041f78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8041f78:	b580      	push	{r7, lr}
 8041f7a:	b082      	sub	sp, #8
 8041f7c:	af00      	add	r7, sp, #0
 8041f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8041f80:	687b      	ldr	r3, [r7, #4]
 8041f82:	681b      	ldr	r3, [r3, #0]
 8041f84:	4a04      	ldr	r2, [pc, #16]	; (8041f98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8041f86:	4293      	cmp	r3, r2
 8041f88:	d101      	bne.n	8041f8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8041f8a:	f000 fda7 	bl	8042adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8041f8e:	bf00      	nop
 8041f90:	3708      	adds	r7, #8
 8041f92:	46bd      	mov	sp, r7
 8041f94:	bd80      	pop	{r7, pc}
 8041f96:	bf00      	nop
 8041f98:	40014400 	.word	0x40014400

08041f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8041f9c:	b480      	push	{r7}
 8041f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8041fa0:	b672      	cpsid	i
}
 8041fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8041fa4:	e7fe      	b.n	8041fa4 <Error_Handler+0x8>
	...

08041fa8 <ONEWIRE_DELAY>:
 */
#include "onewire.h"
#include "ds18b20Config.h"
#include "tim.h"

void ONEWIRE_DELAY(uint16_t time_us) {
 8041fa8:	b480      	push	{r7}
 8041faa:	b083      	sub	sp, #12
 8041fac:	af00      	add	r7, sp, #0
 8041fae:	4603      	mov	r3, r0
 8041fb0:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8041fb2:	4b09      	ldr	r3, [pc, #36]	; (8041fd8 <ONEWIRE_DELAY+0x30>)
 8041fb4:	681b      	ldr	r3, [r3, #0]
 8041fb6:	2200      	movs	r2, #0
 8041fb8:	625a      	str	r2, [r3, #36]	; 0x24
	while (_DS18B20_TIMER.Instance->CNT <= time_us)
 8041fba:	bf00      	nop
 8041fbc:	4b06      	ldr	r3, [pc, #24]	; (8041fd8 <ONEWIRE_DELAY+0x30>)
 8041fbe:	681b      	ldr	r3, [r3, #0]
 8041fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8041fc2:	88fb      	ldrh	r3, [r7, #6]
 8041fc4:	429a      	cmp	r2, r3
 8041fc6:	d9f9      	bls.n	8041fbc <ONEWIRE_DELAY+0x14>
		;
}
 8041fc8:	bf00      	nop
 8041fca:	bf00      	nop
 8041fcc:	370c      	adds	r7, #12
 8041fce:	46bd      	mov	sp, r7
 8041fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fd4:	4770      	bx	lr
 8041fd6:	bf00      	nop
 8041fd8:	200005a8 	.word	0x200005a8

08041fdc <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp) {
 8041fdc:	b480      	push	{r7}
 8041fde:	b083      	sub	sp, #12
 8041fe0:	af00      	add	r7, sp, #0
 8041fe2:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin << 16;
 8041fe4:	687b      	ldr	r3, [r7, #4]
 8041fe6:	889b      	ldrh	r3, [r3, #4]
 8041fe8:	041a      	lsls	r2, r3, #16
 8041fea:	687b      	ldr	r3, [r7, #4]
 8041fec:	681b      	ldr	r3, [r3, #0]
 8041fee:	619a      	str	r2, [r3, #24]
}
 8041ff0:	bf00      	nop
 8041ff2:	370c      	adds	r7, #12
 8041ff4:	46bd      	mov	sp, r7
 8041ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ffa:	4770      	bx	lr

08041ffc <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp) {
 8041ffc:	b480      	push	{r7}
 8041ffe:	b083      	sub	sp, #12
 8042000:	af00      	add	r7, sp, #0
 8042002:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8042004:	687b      	ldr	r3, [r7, #4]
 8042006:	889a      	ldrh	r2, [r3, #4]
 8042008:	687b      	ldr	r3, [r7, #4]
 804200a:	681b      	ldr	r3, [r3, #0]
 804200c:	619a      	str	r2, [r3, #24]
}
 804200e:	bf00      	nop
 8042010:	370c      	adds	r7, #12
 8042012:	46bd      	mov	sp, r7
 8042014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042018:	4770      	bx	lr

0804201a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp) {
 804201a:	b580      	push	{r7, lr}
 804201c:	b088      	sub	sp, #32
 804201e:	af00      	add	r7, sp, #0
 8042020:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8042022:	2300      	movs	r3, #0
 8042024:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8042026:	2300      	movs	r3, #0
 8042028:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 804202a:	2302      	movs	r3, #2
 804202c:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 804202e:	687b      	ldr	r3, [r7, #4]
 8042030:	889b      	ldrh	r3, [r3, #4]
 8042032:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx, &gpinit);
 8042034:	687b      	ldr	r3, [r7, #4]
 8042036:	681b      	ldr	r3, [r3, #0]
 8042038:	f107 020c 	add.w	r2, r7, #12
 804203c:	4611      	mov	r1, r2
 804203e:	4618      	mov	r0, r3
 8042040:	f000 fe4e 	bl	8042ce0 <HAL_GPIO_Init>
}
 8042044:	bf00      	nop
 8042046:	3720      	adds	r7, #32
 8042048:	46bd      	mov	sp, r7
 804204a:	bd80      	pop	{r7, pc}

0804204c <ONEWIRE_OUTPUT>:

void ONEWIRE_OUTPUT(OneWire_t *gp) {
 804204c:	b580      	push	{r7, lr}
 804204e:	b088      	sub	sp, #32
 8042050:	af00      	add	r7, sp, #0
 8042052:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8042054:	2311      	movs	r3, #17
 8042056:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8042058:	2300      	movs	r3, #0
 804205a:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 804205c:	2302      	movs	r3, #2
 804205e:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8042060:	687b      	ldr	r3, [r7, #4]
 8042062:	889b      	ldrh	r3, [r3, #4]
 8042064:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx, &gpinit);
 8042066:	687b      	ldr	r3, [r7, #4]
 8042068:	681b      	ldr	r3, [r3, #0]
 804206a:	f107 020c 	add.w	r2, r7, #12
 804206e:	4611      	mov	r1, r2
 8042070:	4618      	mov	r0, r3
 8042072:	f000 fe35 	bl	8042ce0 <HAL_GPIO_Init>
}
 8042076:	bf00      	nop
 8042078:	3720      	adds	r7, #32
 804207a:	46bd      	mov	sp, r7
 804207c:	bd80      	pop	{r7, pc}
	...

08042080 <OneWire_Init>:
void OneWire_Init(OneWire_t *OneWireStruct, GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin) {
 8042080:	b580      	push	{r7, lr}
 8042082:	b084      	sub	sp, #16
 8042084:	af00      	add	r7, sp, #0
 8042086:	60f8      	str	r0, [r7, #12]
 8042088:	60b9      	str	r1, [r7, #8]
 804208a:	4613      	mov	r3, r2
 804208c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 804208e:	4812      	ldr	r0, [pc, #72]	; (80420d8 <OneWire_Init+0x58>)
 8042090:	f002 fca6 	bl	80449e0 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8042094:	68fb      	ldr	r3, [r7, #12]
 8042096:	68ba      	ldr	r2, [r7, #8]
 8042098:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 804209a:	68fb      	ldr	r3, [r7, #12]
 804209c:	88fa      	ldrh	r2, [r7, #6]
 804209e:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 80420a0:	68f8      	ldr	r0, [r7, #12]
 80420a2:	f7ff ffd3 	bl	804204c <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 80420a6:	68f8      	ldr	r0, [r7, #12]
 80420a8:	f7ff ffa8 	bl	8041ffc <ONEWIRE_HIGH>
	OneWireDelay(1000);
 80420ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80420b0:	f003 fd13 	bl	8045ada <osDelay>
	ONEWIRE_LOW(OneWireStruct);
 80420b4:	68f8      	ldr	r0, [r7, #12]
 80420b6:	f7ff ff91 	bl	8041fdc <ONEWIRE_LOW>
	OneWireDelay(1000);
 80420ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80420be:	f003 fd0c 	bl	8045ada <osDelay>
	ONEWIRE_HIGH(OneWireStruct);
 80420c2:	68f8      	ldr	r0, [r7, #12]
 80420c4:	f7ff ff9a 	bl	8041ffc <ONEWIRE_HIGH>
	OneWireDelay(2000);
 80420c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80420cc:	f003 fd05 	bl	8045ada <osDelay>
}
 80420d0:	bf00      	nop
 80420d2:	3710      	adds	r7, #16
 80420d4:	46bd      	mov	sp, r7
 80420d6:	bd80      	pop	{r7, pc}
 80420d8:	200005a8 	.word	0x200005a8

080420dc <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t *OneWireStruct) {
 80420dc:	b580      	push	{r7, lr}
 80420de:	b084      	sub	sp, #16
 80420e0:	af00      	add	r7, sp, #0
 80420e2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 80420e4:	6878      	ldr	r0, [r7, #4]
 80420e6:	f7ff ff79 	bl	8041fdc <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80420ea:	6878      	ldr	r0, [r7, #4]
 80420ec:	f7ff ffae 	bl	804204c <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 80420f0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80420f4:	f7ff ff58 	bl	8041fa8 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 80420f8:	2014      	movs	r0, #20
 80420fa:	f7ff ff55 	bl	8041fa8 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 80420fe:	6878      	ldr	r0, [r7, #4]
 8042100:	f7ff ff8b 	bl	804201a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8042104:	2046      	movs	r0, #70	; 0x46
 8042106:	f7ff ff4f 	bl	8041fa8 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 804210a:	687b      	ldr	r3, [r7, #4]
 804210c:	681a      	ldr	r2, [r3, #0]
 804210e:	687b      	ldr	r3, [r7, #4]
 8042110:	889b      	ldrh	r3, [r3, #4]
 8042112:	4619      	mov	r1, r3
 8042114:	4610      	mov	r0, r2
 8042116:	f000 ff67 	bl	8042fe8 <HAL_GPIO_ReadPin>
 804211a:	4603      	mov	r3, r0
 804211c:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 804211e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8042122:	f7ff ff41 	bl	8041fa8 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8042126:	7bfb      	ldrb	r3, [r7, #15]
}
 8042128:	4618      	mov	r0, r3
 804212a:	3710      	adds	r7, #16
 804212c:	46bd      	mov	sp, r7
 804212e:	bd80      	pop	{r7, pc}

08042130 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t *OneWireStruct, uint8_t bit) {
 8042130:	b580      	push	{r7, lr}
 8042132:	b082      	sub	sp, #8
 8042134:	af00      	add	r7, sp, #0
 8042136:	6078      	str	r0, [r7, #4]
 8042138:	460b      	mov	r3, r1
 804213a:	70fb      	strb	r3, [r7, #3]
	if (bit) {
 804213c:	78fb      	ldrb	r3, [r7, #3]
 804213e:	2b00      	cmp	r3, #0
 8042140:	d012      	beq.n	8042168 <OneWire_WriteBit+0x38>
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8042142:	6878      	ldr	r0, [r7, #4]
 8042144:	f7ff ff4a 	bl	8041fdc <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8042148:	6878      	ldr	r0, [r7, #4]
 804214a:	f7ff ff7f 	bl	804204c <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 804214e:	200a      	movs	r0, #10
 8042150:	f7ff ff2a 	bl	8041fa8 <ONEWIRE_DELAY>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8042154:	6878      	ldr	r0, [r7, #4]
 8042156:	f7ff ff60 	bl	804201a <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 804215a:	2037      	movs	r0, #55	; 0x37
 804215c:	f7ff ff24 	bl	8041fa8 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8042160:	6878      	ldr	r0, [r7, #4]
 8042162:	f7ff ff5a 	bl	804201a <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8042166:	e011      	b.n	804218c <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8042168:	6878      	ldr	r0, [r7, #4]
 804216a:	f7ff ff37 	bl	8041fdc <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 804216e:	6878      	ldr	r0, [r7, #4]
 8042170:	f7ff ff6c 	bl	804204c <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8042174:	2041      	movs	r0, #65	; 0x41
 8042176:	f7ff ff17 	bl	8041fa8 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 804217a:	6878      	ldr	r0, [r7, #4]
 804217c:	f7ff ff4d 	bl	804201a <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8042180:	2005      	movs	r0, #5
 8042182:	f7ff ff11 	bl	8041fa8 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8042186:	6878      	ldr	r0, [r7, #4]
 8042188:	f7ff ff47 	bl	804201a <ONEWIRE_INPUT>
}
 804218c:	bf00      	nop
 804218e:	3708      	adds	r7, #8
 8042190:	46bd      	mov	sp, r7
 8042192:	bd80      	pop	{r7, pc}

08042194 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t *OneWireStruct) {
 8042194:	b580      	push	{r7, lr}
 8042196:	b084      	sub	sp, #16
 8042198:	af00      	add	r7, sp, #0
 804219a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 804219c:	2300      	movs	r3, #0
 804219e:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 80421a0:	6878      	ldr	r0, [r7, #4]
 80421a2:	f7ff ff1b 	bl	8041fdc <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80421a6:	6878      	ldr	r0, [r7, #4]
 80421a8:	f7ff ff50 	bl	804204c <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 80421ac:	2002      	movs	r0, #2
 80421ae:	f7ff fefb 	bl	8041fa8 <ONEWIRE_DELAY>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 80421b2:	6878      	ldr	r0, [r7, #4]
 80421b4:	f7ff ff31 	bl	804201a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 80421b8:	200a      	movs	r0, #10
 80421ba:	f7ff fef5 	bl	8041fa8 <ONEWIRE_DELAY>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80421be:	687b      	ldr	r3, [r7, #4]
 80421c0:	681a      	ldr	r2, [r3, #0]
 80421c2:	687b      	ldr	r3, [r7, #4]
 80421c4:	889b      	ldrh	r3, [r3, #4]
 80421c6:	4619      	mov	r1, r3
 80421c8:	4610      	mov	r0, r2
 80421ca:	f000 ff0d 	bl	8042fe8 <HAL_GPIO_ReadPin>
 80421ce:	4603      	mov	r3, r0
 80421d0:	2b00      	cmp	r3, #0
 80421d2:	d001      	beq.n	80421d8 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 80421d4:	2301      	movs	r3, #1
 80421d6:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 80421d8:	2032      	movs	r0, #50	; 0x32
 80421da:	f7ff fee5 	bl	8041fa8 <ONEWIRE_DELAY>

	/* Return bit value */
	return bit;
 80421de:	7bfb      	ldrb	r3, [r7, #15]
}
 80421e0:	4618      	mov	r0, r3
 80421e2:	3710      	adds	r7, #16
 80421e4:	46bd      	mov	sp, r7
 80421e6:	bd80      	pop	{r7, pc}

080421e8 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t *OneWireStruct, uint8_t byte) {
 80421e8:	b580      	push	{r7, lr}
 80421ea:	b084      	sub	sp, #16
 80421ec:	af00      	add	r7, sp, #0
 80421ee:	6078      	str	r0, [r7, #4]
 80421f0:	460b      	mov	r3, r1
 80421f2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80421f4:	2308      	movs	r3, #8
 80421f6:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80421f8:	e00a      	b.n	8042210 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80421fa:	78fb      	ldrb	r3, [r7, #3]
 80421fc:	f003 0301 	and.w	r3, r3, #1
 8042200:	b2db      	uxtb	r3, r3
 8042202:	4619      	mov	r1, r3
 8042204:	6878      	ldr	r0, [r7, #4]
 8042206:	f7ff ff93 	bl	8042130 <OneWire_WriteBit>
		byte >>= 1;
 804220a:	78fb      	ldrb	r3, [r7, #3]
 804220c:	085b      	lsrs	r3, r3, #1
 804220e:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8042210:	7bfb      	ldrb	r3, [r7, #15]
 8042212:	1e5a      	subs	r2, r3, #1
 8042214:	73fa      	strb	r2, [r7, #15]
 8042216:	2b00      	cmp	r3, #0
 8042218:	d1ef      	bne.n	80421fa <OneWire_WriteByte+0x12>
	}
}
 804221a:	bf00      	nop
 804221c:	bf00      	nop
 804221e:	3710      	adds	r7, #16
 8042220:	46bd      	mov	sp, r7
 8042222:	bd80      	pop	{r7, pc}

08042224 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t *OneWireStruct) {
 8042224:	b580      	push	{r7, lr}
 8042226:	b084      	sub	sp, #16
 8042228:	af00      	add	r7, sp, #0
 804222a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 804222c:	2308      	movs	r3, #8
 804222e:	73fb      	strb	r3, [r7, #15]
 8042230:	2300      	movs	r3, #0
 8042232:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8042234:	e00d      	b.n	8042252 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8042236:	7bbb      	ldrb	r3, [r7, #14]
 8042238:	085b      	lsrs	r3, r3, #1
 804223a:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 804223c:	6878      	ldr	r0, [r7, #4]
 804223e:	f7ff ffa9 	bl	8042194 <OneWire_ReadBit>
 8042242:	4603      	mov	r3, r0
 8042244:	01db      	lsls	r3, r3, #7
 8042246:	b25a      	sxtb	r2, r3
 8042248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 804224c:	4313      	orrs	r3, r2
 804224e:	b25b      	sxtb	r3, r3
 8042250:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8042252:	7bfb      	ldrb	r3, [r7, #15]
 8042254:	1e5a      	subs	r2, r3, #1
 8042256:	73fa      	strb	r2, [r7, #15]
 8042258:	2b00      	cmp	r3, #0
 804225a:	d1ec      	bne.n	8042236 <OneWire_ReadByte+0x12>
	}

	return byte;
 804225c:	7bbb      	ldrb	r3, [r7, #14]
}
 804225e:	4618      	mov	r0, r3
 8042260:	3710      	adds	r7, #16
 8042262:	46bd      	mov	sp, r7
 8042264:	bd80      	pop	{r7, pc}

08042266 <OneWire_First>:

uint8_t OneWire_First(OneWire_t *OneWireStruct) {
 8042266:	b580      	push	{r7, lr}
 8042268:	b082      	sub	sp, #8
 804226a:	af00      	add	r7, sp, #0
 804226c:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 804226e:	6878      	ldr	r0, [r7, #4]
 8042270:	f000 f816 	bl	80422a0 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8042274:	21f0      	movs	r1, #240	; 0xf0
 8042276:	6878      	ldr	r0, [r7, #4]
 8042278:	f000 f825 	bl	80422c6 <OneWire_Search>
 804227c:	4603      	mov	r3, r0
}
 804227e:	4618      	mov	r0, r3
 8042280:	3708      	adds	r7, #8
 8042282:	46bd      	mov	sp, r7
 8042284:	bd80      	pop	{r7, pc}

08042286 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t *OneWireStruct) {
 8042286:	b580      	push	{r7, lr}
 8042288:	b082      	sub	sp, #8
 804228a:	af00      	add	r7, sp, #0
 804228c:	6078      	str	r0, [r7, #4]
	/* Leave the search state alone */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 804228e:	21f0      	movs	r1, #240	; 0xf0
 8042290:	6878      	ldr	r0, [r7, #4]
 8042292:	f000 f818 	bl	80422c6 <OneWire_Search>
 8042296:	4603      	mov	r3, r0
}
 8042298:	4618      	mov	r0, r3
 804229a:	3708      	adds	r7, #8
 804229c:	46bd      	mov	sp, r7
 804229e:	bd80      	pop	{r7, pc}

080422a0 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t *OneWireStruct) {
 80422a0:	b480      	push	{r7}
 80422a2:	b083      	sub	sp, #12
 80422a4:	af00      	add	r7, sp, #0
 80422a6:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 80422a8:	687b      	ldr	r3, [r7, #4]
 80422aa:	2200      	movs	r2, #0
 80422ac:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80422ae:	687b      	ldr	r3, [r7, #4]
 80422b0:	2200      	movs	r2, #0
 80422b2:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 80422b4:	687b      	ldr	r3, [r7, #4]
 80422b6:	2200      	movs	r2, #0
 80422b8:	71da      	strb	r2, [r3, #7]
}
 80422ba:	bf00      	nop
 80422bc:	370c      	adds	r7, #12
 80422be:	46bd      	mov	sp, r7
 80422c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422c4:	4770      	bx	lr

080422c6 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t *OneWireStruct, uint8_t command) {
 80422c6:	b580      	push	{r7, lr}
 80422c8:	b084      	sub	sp, #16
 80422ca:	af00      	add	r7, sp, #0
 80422cc:	6078      	str	r0, [r7, #4]
 80422ce:	460b      	mov	r3, r1
 80422d0:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 80422d2:	2301      	movs	r3, #1
 80422d4:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80422d6:	2300      	movs	r3, #0
 80422d8:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80422da:	2300      	movs	r3, #0
 80422dc:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80422de:	2301      	movs	r3, #1
 80422e0:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80422e2:	2300      	movs	r3, #0
 80422e4:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag) {
 80422e6:	687b      	ldr	r3, [r7, #4]
 80422e8:	7a1b      	ldrb	r3, [r3, #8]
 80422ea:	2b00      	cmp	r3, #0
 80422ec:	f040 809a 	bne.w	8042424 <OneWire_Search+0x15e>
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) {
 80422f0:	6878      	ldr	r0, [r7, #4]
 80422f2:	f7ff fef3 	bl	80420dc <OneWire_Reset>
 80422f6:	4603      	mov	r3, r0
 80422f8:	2b00      	cmp	r3, #0
 80422fa:	d00a      	beq.n	8042312 <OneWire_Search+0x4c>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 80422fc:	687b      	ldr	r3, [r7, #4]
 80422fe:	2200      	movs	r2, #0
 8042300:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8042302:	687b      	ldr	r3, [r7, #4]
 8042304:	2200      	movs	r2, #0
 8042306:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8042308:	687b      	ldr	r3, [r7, #4]
 804230a:	2200      	movs	r2, #0
 804230c:	71da      	strb	r2, [r3, #7]
			return 0;
 804230e:	2300      	movs	r3, #0
 8042310:	e09b      	b.n	804244a <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);
 8042312:	78fb      	ldrb	r3, [r7, #3]
 8042314:	4619      	mov	r1, r3
 8042316:	6878      	ldr	r0, [r7, #4]
 8042318:	f7ff ff66 	bl	80421e8 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 804231c:	6878      	ldr	r0, [r7, #4]
 804231e:	f7ff ff39 	bl	8042194 <OneWire_ReadBit>
 8042322:	4603      	mov	r3, r0
 8042324:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8042326:	6878      	ldr	r0, [r7, #4]
 8042328:	f7ff ff34 	bl	8042194 <OneWire_ReadBit>
 804232c:	4603      	mov	r3, r0
 804232e:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8042330:	7a7b      	ldrb	r3, [r7, #9]
 8042332:	2b01      	cmp	r3, #1
 8042334:	d102      	bne.n	804233c <OneWire_Search+0x76>
 8042336:	7a3b      	ldrb	r3, [r7, #8]
 8042338:	2b01      	cmp	r3, #1
 804233a:	d064      	beq.n	8042406 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 804233c:	7a7a      	ldrb	r2, [r7, #9]
 804233e:	7a3b      	ldrb	r3, [r7, #8]
 8042340:	429a      	cmp	r2, r3
 8042342:	d002      	beq.n	804234a <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8042344:	7a7b      	ldrb	r3, [r7, #9]
 8042346:	72bb      	strb	r3, [r7, #10]
 8042348:	e026      	b.n	8042398 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 804234a:	687b      	ldr	r3, [r7, #4]
 804234c:	799b      	ldrb	r3, [r3, #6]
 804234e:	7bfa      	ldrb	r2, [r7, #15]
 8042350:	429a      	cmp	r2, r3
 8042352:	d20d      	bcs.n	8042370 <OneWire_Search+0xaa>
						search_direction =
								((OneWireStruct->ROM_NO[rom_byte_number]
 8042354:	7b7b      	ldrb	r3, [r7, #13]
 8042356:	687a      	ldr	r2, [r7, #4]
 8042358:	4413      	add	r3, r2
 804235a:	7a5a      	ldrb	r2, [r3, #9]
										& rom_byte_mask) > 0);
 804235c:	7afb      	ldrb	r3, [r7, #11]
 804235e:	4013      	ands	r3, r2
 8042360:	b2db      	uxtb	r3, r3
 8042362:	2b00      	cmp	r3, #0
 8042364:	bf14      	ite	ne
 8042366:	2301      	movne	r3, #1
 8042368:	2300      	moveq	r3, #0
 804236a:	b2db      	uxtb	r3, r3
						search_direction =
 804236c:	72bb      	strb	r3, [r7, #10]
 804236e:	e008      	b.n	8042382 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number
								== OneWireStruct->LastDiscrepancy);
 8042370:	687b      	ldr	r3, [r7, #4]
 8042372:	799b      	ldrb	r3, [r3, #6]
 8042374:	7bfa      	ldrb	r2, [r7, #15]
 8042376:	429a      	cmp	r2, r3
 8042378:	bf0c      	ite	eq
 804237a:	2301      	moveq	r3, #1
 804237c:	2300      	movne	r3, #0
 804237e:	b2db      	uxtb	r3, r3
						search_direction = (id_bit_number
 8042380:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8042382:	7abb      	ldrb	r3, [r7, #10]
 8042384:	2b00      	cmp	r3, #0
 8042386:	d107      	bne.n	8042398 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8042388:	7bfb      	ldrb	r3, [r7, #15]
 804238a:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 804238c:	7bbb      	ldrb	r3, [r7, #14]
 804238e:	2b08      	cmp	r3, #8
 8042390:	d802      	bhi.n	8042398 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8042392:	687b      	ldr	r3, [r7, #4]
 8042394:	7bba      	ldrb	r2, [r7, #14]
 8042396:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8042398:	7abb      	ldrb	r3, [r7, #10]
 804239a:	2b01      	cmp	r3, #1
 804239c:	d10c      	bne.n	80423b8 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 804239e:	7b7b      	ldrb	r3, [r7, #13]
 80423a0:	687a      	ldr	r2, [r7, #4]
 80423a2:	4413      	add	r3, r2
 80423a4:	7a59      	ldrb	r1, [r3, #9]
 80423a6:	7b7b      	ldrb	r3, [r7, #13]
 80423a8:	7afa      	ldrb	r2, [r7, #11]
 80423aa:	430a      	orrs	r2, r1
 80423ac:	b2d1      	uxtb	r1, r2
 80423ae:	687a      	ldr	r2, [r7, #4]
 80423b0:	4413      	add	r3, r2
 80423b2:	460a      	mov	r2, r1
 80423b4:	725a      	strb	r2, [r3, #9]
 80423b6:	e010      	b.n	80423da <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80423b8:	7b7b      	ldrb	r3, [r7, #13]
 80423ba:	687a      	ldr	r2, [r7, #4]
 80423bc:	4413      	add	r3, r2
 80423be:	7a5b      	ldrb	r3, [r3, #9]
 80423c0:	b25a      	sxtb	r2, r3
 80423c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80423c6:	43db      	mvns	r3, r3
 80423c8:	b25b      	sxtb	r3, r3
 80423ca:	4013      	ands	r3, r2
 80423cc:	b25a      	sxtb	r2, r3
 80423ce:	7b7b      	ldrb	r3, [r7, #13]
 80423d0:	b2d1      	uxtb	r1, r2
 80423d2:	687a      	ldr	r2, [r7, #4]
 80423d4:	4413      	add	r3, r2
 80423d6:	460a      	mov	r2, r1
 80423d8:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 80423da:	7abb      	ldrb	r3, [r7, #10]
 80423dc:	4619      	mov	r1, r3
 80423de:	6878      	ldr	r0, [r7, #4]
 80423e0:	f7ff fea6 	bl	8042130 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 80423e4:	7bfb      	ldrb	r3, [r7, #15]
 80423e6:	3301      	adds	r3, #1
 80423e8:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80423ea:	7afb      	ldrb	r3, [r7, #11]
 80423ec:	005b      	lsls	r3, r3, #1
 80423ee:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 80423f0:	7afb      	ldrb	r3, [r7, #11]
 80423f2:	2b00      	cmp	r3, #0
 80423f4:	d104      	bne.n	8042400 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 80423f6:	7b7b      	ldrb	r3, [r7, #13]
 80423f8:	3301      	adds	r3, #1
 80423fa:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 80423fc:	2301      	movs	r3, #1
 80423fe:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8042400:	7b7b      	ldrb	r3, [r7, #13]
 8042402:	2b07      	cmp	r3, #7
 8042404:	d98a      	bls.n	804231c <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8042406:	7bfb      	ldrb	r3, [r7, #15]
 8042408:	2b40      	cmp	r3, #64	; 0x40
 804240a:	d90b      	bls.n	8042424 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 804240c:	687b      	ldr	r3, [r7, #4]
 804240e:	7bba      	ldrb	r2, [r7, #14]
 8042410:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8042412:	687b      	ldr	r3, [r7, #4]
 8042414:	799b      	ldrb	r3, [r3, #6]
 8042416:	2b00      	cmp	r3, #0
 8042418:	d102      	bne.n	8042420 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 804241a:	687b      	ldr	r3, [r7, #4]
 804241c:	2201      	movs	r2, #1
 804241e:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8042420:	2301      	movs	r3, #1
 8042422:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8042424:	7b3b      	ldrb	r3, [r7, #12]
 8042426:	2b00      	cmp	r3, #0
 8042428:	d003      	beq.n	8042432 <OneWire_Search+0x16c>
 804242a:	687b      	ldr	r3, [r7, #4]
 804242c:	7a5b      	ldrb	r3, [r3, #9]
 804242e:	2b00      	cmp	r3, #0
 8042430:	d10a      	bne.n	8042448 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8042432:	687b      	ldr	r3, [r7, #4]
 8042434:	2200      	movs	r2, #0
 8042436:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8042438:	687b      	ldr	r3, [r7, #4]
 804243a:	2200      	movs	r2, #0
 804243c:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 804243e:	687b      	ldr	r3, [r7, #4]
 8042440:	2200      	movs	r2, #0
 8042442:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8042444:	2300      	movs	r3, #0
 8042446:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8042448:	7b3b      	ldrb	r3, [r7, #12]
}
 804244a:	4618      	mov	r0, r3
 804244c:	3710      	adds	r7, #16
 804244e:	46bd      	mov	sp, r7
 8042450:	bd80      	pop	{r7, pc}

08042452 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t *OneWireStruct, uint8_t *ROM) {
 8042452:	b580      	push	{r7, lr}
 8042454:	b084      	sub	sp, #16
 8042456:	af00      	add	r7, sp, #0
 8042458:	6078      	str	r0, [r7, #4]
 804245a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 804245c:	2155      	movs	r1, #85	; 0x55
 804245e:	6878      	ldr	r0, [r7, #4]
 8042460:	f7ff fec2 	bl	80421e8 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8042464:	2300      	movs	r3, #0
 8042466:	73fb      	strb	r3, [r7, #15]
 8042468:	e00a      	b.n	8042480 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 804246a:	7bfb      	ldrb	r3, [r7, #15]
 804246c:	683a      	ldr	r2, [r7, #0]
 804246e:	4413      	add	r3, r2
 8042470:	781b      	ldrb	r3, [r3, #0]
 8042472:	4619      	mov	r1, r3
 8042474:	6878      	ldr	r0, [r7, #4]
 8042476:	f7ff feb7 	bl	80421e8 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 804247a:	7bfb      	ldrb	r3, [r7, #15]
 804247c:	3301      	adds	r3, #1
 804247e:	73fb      	strb	r3, [r7, #15]
 8042480:	7bfb      	ldrb	r3, [r7, #15]
 8042482:	2b07      	cmp	r3, #7
 8042484:	d9f1      	bls.n	804246a <OneWire_SelectWithPointer+0x18>
	}
}
 8042486:	bf00      	nop
 8042488:	bf00      	nop
 804248a:	3710      	adds	r7, #16
 804248c:	46bd      	mov	sp, r7
 804248e:	bd80      	pop	{r7, pc}

08042490 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t *OneWireStruct, uint8_t *firstIndex) {
 8042490:	b480      	push	{r7}
 8042492:	b085      	sub	sp, #20
 8042494:	af00      	add	r7, sp, #0
 8042496:	6078      	str	r0, [r7, #4]
 8042498:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 804249a:	2300      	movs	r3, #0
 804249c:	73fb      	strb	r3, [r7, #15]
 804249e:	e00a      	b.n	80424b6 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80424a0:	7bfa      	ldrb	r2, [r7, #15]
 80424a2:	7bfb      	ldrb	r3, [r7, #15]
 80424a4:	6839      	ldr	r1, [r7, #0]
 80424a6:	440b      	add	r3, r1
 80424a8:	6879      	ldr	r1, [r7, #4]
 80424aa:	440a      	add	r2, r1
 80424ac:	7a52      	ldrb	r2, [r2, #9]
 80424ae:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80424b0:	7bfb      	ldrb	r3, [r7, #15]
 80424b2:	3301      	adds	r3, #1
 80424b4:	73fb      	strb	r3, [r7, #15]
 80424b6:	7bfb      	ldrb	r3, [r7, #15]
 80424b8:	2b07      	cmp	r3, #7
 80424ba:	d9f1      	bls.n	80424a0 <OneWire_GetFullROM+0x10>
	}
}
 80424bc:	bf00      	nop
 80424be:	bf00      	nop
 80424c0:	3714      	adds	r7, #20
 80424c2:	46bd      	mov	sp, r7
 80424c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424c8:	4770      	bx	lr

080424ca <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80424ca:	b480      	push	{r7}
 80424cc:	b085      	sub	sp, #20
 80424ce:	af00      	add	r7, sp, #0
 80424d0:	6078      	str	r0, [r7, #4]
 80424d2:	460b      	mov	r3, r1
 80424d4:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80424d6:	2300      	movs	r3, #0
 80424d8:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 80424da:	e022      	b.n	8042522 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80424dc:	687b      	ldr	r3, [r7, #4]
 80424de:	1c5a      	adds	r2, r3, #1
 80424e0:	607a      	str	r2, [r7, #4]
 80424e2:	781b      	ldrb	r3, [r3, #0]
 80424e4:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80424e6:	2308      	movs	r3, #8
 80424e8:	737b      	strb	r3, [r7, #13]
 80424ea:	e017      	b.n	804251c <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80424ec:	7bfa      	ldrb	r2, [r7, #15]
 80424ee:	7bbb      	ldrb	r3, [r7, #14]
 80424f0:	4053      	eors	r3, r2
 80424f2:	b2db      	uxtb	r3, r3
 80424f4:	f003 0301 	and.w	r3, r3, #1
 80424f8:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 80424fa:	7bfb      	ldrb	r3, [r7, #15]
 80424fc:	085b      	lsrs	r3, r3, #1
 80424fe:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8042500:	7b3b      	ldrb	r3, [r7, #12]
 8042502:	2b00      	cmp	r3, #0
 8042504:	d004      	beq.n	8042510 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8042506:	7bfb      	ldrb	r3, [r7, #15]
 8042508:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 804250c:	43db      	mvns	r3, r3
 804250e:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8042510:	7bbb      	ldrb	r3, [r7, #14]
 8042512:	085b      	lsrs	r3, r3, #1
 8042514:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8042516:	7b7b      	ldrb	r3, [r7, #13]
 8042518:	3b01      	subs	r3, #1
 804251a:	737b      	strb	r3, [r7, #13]
 804251c:	7b7b      	ldrb	r3, [r7, #13]
 804251e:	2b00      	cmp	r3, #0
 8042520:	d1e4      	bne.n	80424ec <OneWire_CRC8+0x22>
	while (len--) {
 8042522:	78fb      	ldrb	r3, [r7, #3]
 8042524:	1e5a      	subs	r2, r3, #1
 8042526:	70fa      	strb	r2, [r7, #3]
 8042528:	2b00      	cmp	r3, #0
 804252a:	d1d7      	bne.n	80424dc <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 804252c:	7bfb      	ldrb	r3, [r7, #15]
}
 804252e:	4618      	mov	r0, r3
 8042530:	3714      	adds	r7, #20
 8042532:	46bd      	mov	sp, r7
 8042534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042538:	4770      	bx	lr
	...

0804253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 804253c:	b580      	push	{r7, lr}
 804253e:	b082      	sub	sp, #8
 8042540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042542:	2300      	movs	r3, #0
 8042544:	607b      	str	r3, [r7, #4]
 8042546:	4b12      	ldr	r3, [pc, #72]	; (8042590 <HAL_MspInit+0x54>)
 8042548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804254a:	4a11      	ldr	r2, [pc, #68]	; (8042590 <HAL_MspInit+0x54>)
 804254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8042550:	6453      	str	r3, [r2, #68]	; 0x44
 8042552:	4b0f      	ldr	r3, [pc, #60]	; (8042590 <HAL_MspInit+0x54>)
 8042554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804255a:	607b      	str	r3, [r7, #4]
 804255c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804255e:	2300      	movs	r3, #0
 8042560:	603b      	str	r3, [r7, #0]
 8042562:	4b0b      	ldr	r3, [pc, #44]	; (8042590 <HAL_MspInit+0x54>)
 8042564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042566:	4a0a      	ldr	r2, [pc, #40]	; (8042590 <HAL_MspInit+0x54>)
 8042568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804256c:	6413      	str	r3, [r2, #64]	; 0x40
 804256e:	4b08      	ldr	r3, [pc, #32]	; (8042590 <HAL_MspInit+0x54>)
 8042570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042576:	603b      	str	r3, [r7, #0]
 8042578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 804257a:	2200      	movs	r2, #0
 804257c:	210f      	movs	r1, #15
 804257e:	f06f 0001 	mvn.w	r0, #1
 8042582:	f000 fb83 	bl	8042c8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8042586:	bf00      	nop
 8042588:	3708      	adds	r7, #8
 804258a:	46bd      	mov	sp, r7
 804258c:	bd80      	pop	{r7, pc}
 804258e:	bf00      	nop
 8042590:	40023800 	.word	0x40023800

08042594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8042594:	b580      	push	{r7, lr}
 8042596:	b08c      	sub	sp, #48	; 0x30
 8042598:	af00      	add	r7, sp, #0
 804259a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 804259c:	2300      	movs	r3, #0
 804259e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80425a0:	2300      	movs	r3, #0
 80425a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80425a4:	2300      	movs	r3, #0
 80425a6:	60bb      	str	r3, [r7, #8]
 80425a8:	4b2e      	ldr	r3, [pc, #184]	; (8042664 <HAL_InitTick+0xd0>)
 80425aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80425ac:	4a2d      	ldr	r2, [pc, #180]	; (8042664 <HAL_InitTick+0xd0>)
 80425ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80425b2:	6453      	str	r3, [r2, #68]	; 0x44
 80425b4:	4b2b      	ldr	r3, [pc, #172]	; (8042664 <HAL_InitTick+0xd0>)
 80425b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80425b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80425bc:	60bb      	str	r3, [r7, #8]
 80425be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80425c0:	f107 020c 	add.w	r2, r7, #12
 80425c4:	f107 0310 	add.w	r3, r7, #16
 80425c8:	4611      	mov	r1, r2
 80425ca:	4618      	mov	r0, r3
 80425cc:	f002 f986 	bl	80448dc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80425d0:	f002 f970 	bl	80448b4 <HAL_RCC_GetPCLK2Freq>
 80425d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80425d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80425d8:	4a23      	ldr	r2, [pc, #140]	; (8042668 <HAL_InitTick+0xd4>)
 80425da:	fba2 2303 	umull	r2, r3, r2, r3
 80425de:	0c9b      	lsrs	r3, r3, #18
 80425e0:	3b01      	subs	r3, #1
 80425e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80425e4:	4b21      	ldr	r3, [pc, #132]	; (804266c <HAL_InitTick+0xd8>)
 80425e6:	4a22      	ldr	r2, [pc, #136]	; (8042670 <HAL_InitTick+0xdc>)
 80425e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80425ea:	4b20      	ldr	r3, [pc, #128]	; (804266c <HAL_InitTick+0xd8>)
 80425ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80425f0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80425f2:	4a1e      	ldr	r2, [pc, #120]	; (804266c <HAL_InitTick+0xd8>)
 80425f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80425f6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80425f8:	4b1c      	ldr	r3, [pc, #112]	; (804266c <HAL_InitTick+0xd8>)
 80425fa:	2200      	movs	r2, #0
 80425fc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80425fe:	4b1b      	ldr	r3, [pc, #108]	; (804266c <HAL_InitTick+0xd8>)
 8042600:	2200      	movs	r2, #0
 8042602:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8042604:	4b19      	ldr	r3, [pc, #100]	; (804266c <HAL_InitTick+0xd8>)
 8042606:	2200      	movs	r2, #0
 8042608:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 804260a:	4818      	ldr	r0, [pc, #96]	; (804266c <HAL_InitTick+0xd8>)
 804260c:	f002 f998 	bl	8044940 <HAL_TIM_Base_Init>
 8042610:	4603      	mov	r3, r0
 8042612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8042616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 804261a:	2b00      	cmp	r3, #0
 804261c:	d11b      	bne.n	8042656 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 804261e:	4813      	ldr	r0, [pc, #76]	; (804266c <HAL_InitTick+0xd8>)
 8042620:	f002 fa38 	bl	8044a94 <HAL_TIM_Base_Start_IT>
 8042624:	4603      	mov	r3, r0
 8042626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 804262a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 804262e:	2b00      	cmp	r3, #0
 8042630:	d111      	bne.n	8042656 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8042632:	2019      	movs	r0, #25
 8042634:	f000 fb46 	bl	8042cc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8042638:	687b      	ldr	r3, [r7, #4]
 804263a:	2b0f      	cmp	r3, #15
 804263c:	d808      	bhi.n	8042650 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 804263e:	2200      	movs	r2, #0
 8042640:	6879      	ldr	r1, [r7, #4]
 8042642:	2019      	movs	r0, #25
 8042644:	f000 fb22 	bl	8042c8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8042648:	4a0a      	ldr	r2, [pc, #40]	; (8042674 <HAL_InitTick+0xe0>)
 804264a:	687b      	ldr	r3, [r7, #4]
 804264c:	6013      	str	r3, [r2, #0]
 804264e:	e002      	b.n	8042656 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8042650:	2301      	movs	r3, #1
 8042652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8042656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804265a:	4618      	mov	r0, r3
 804265c:	3730      	adds	r7, #48	; 0x30
 804265e:	46bd      	mov	sp, r7
 8042660:	bd80      	pop	{r7, pc}
 8042662:	bf00      	nop
 8042664:	40023800 	.word	0x40023800
 8042668:	431bde83 	.word	0x431bde83
 804266c:	2000055c 	.word	0x2000055c
 8042670:	40014400 	.word	0x40014400
 8042674:	20000004 	.word	0x20000004

08042678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8042678:	b480      	push	{r7}
 804267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 804267c:	e7fe      	b.n	804267c <NMI_Handler+0x4>

0804267e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804267e:	b480      	push	{r7}
 8042680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8042682:	e7fe      	b.n	8042682 <HardFault_Handler+0x4>

08042684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8042684:	b480      	push	{r7}
 8042686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8042688:	e7fe      	b.n	8042688 <MemManage_Handler+0x4>

0804268a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804268a:	b480      	push	{r7}
 804268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804268e:	e7fe      	b.n	804268e <BusFault_Handler+0x4>

08042690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8042690:	b480      	push	{r7}
 8042692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8042694:	e7fe      	b.n	8042694 <UsageFault_Handler+0x4>

08042696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8042696:	b480      	push	{r7}
 8042698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 804269a:	bf00      	nop
 804269c:	46bd      	mov	sp, r7
 804269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426a2:	4770      	bx	lr

080426a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80426a4:	b580      	push	{r7, lr}
 80426a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80426a8:	4803      	ldr	r0, [pc, #12]	; (80426b8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80426aa:	f002 fa55 	bl	8044b58 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80426ae:	4803      	ldr	r0, [pc, #12]	; (80426bc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80426b0:	f002 fa52 	bl	8044b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80426b4:	bf00      	nop
 80426b6:	bd80      	pop	{r7, pc}
 80426b8:	200005a8 	.word	0x200005a8
 80426bc:	2000055c 	.word	0x2000055c

080426c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80426c0:	b480      	push	{r7}
 80426c2:	af00      	add	r7, sp, #0
	return 1;
 80426c4:	2301      	movs	r3, #1
}
 80426c6:	4618      	mov	r0, r3
 80426c8:	46bd      	mov	sp, r7
 80426ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426ce:	4770      	bx	lr

080426d0 <_kill>:

int _kill(int pid, int sig)
{
 80426d0:	b580      	push	{r7, lr}
 80426d2:	b082      	sub	sp, #8
 80426d4:	af00      	add	r7, sp, #0
 80426d6:	6078      	str	r0, [r7, #4]
 80426d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80426da:	f004 fc9f 	bl	804701c <__errno>
 80426de:	4603      	mov	r3, r0
 80426e0:	2216      	movs	r2, #22
 80426e2:	601a      	str	r2, [r3, #0]
	return -1;
 80426e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80426e8:	4618      	mov	r0, r3
 80426ea:	3708      	adds	r7, #8
 80426ec:	46bd      	mov	sp, r7
 80426ee:	bd80      	pop	{r7, pc}

080426f0 <_exit>:

void _exit (int status)
{
 80426f0:	b580      	push	{r7, lr}
 80426f2:	b082      	sub	sp, #8
 80426f4:	af00      	add	r7, sp, #0
 80426f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80426f8:	f04f 31ff 	mov.w	r1, #4294967295
 80426fc:	6878      	ldr	r0, [r7, #4]
 80426fe:	f7ff ffe7 	bl	80426d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8042702:	e7fe      	b.n	8042702 <_exit+0x12>

08042704 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8042704:	b580      	push	{r7, lr}
 8042706:	b086      	sub	sp, #24
 8042708:	af00      	add	r7, sp, #0
 804270a:	60f8      	str	r0, [r7, #12]
 804270c:	60b9      	str	r1, [r7, #8]
 804270e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8042710:	2300      	movs	r3, #0
 8042712:	617b      	str	r3, [r7, #20]
 8042714:	e00a      	b.n	804272c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8042716:	f3af 8000 	nop.w
 804271a:	4601      	mov	r1, r0
 804271c:	68bb      	ldr	r3, [r7, #8]
 804271e:	1c5a      	adds	r2, r3, #1
 8042720:	60ba      	str	r2, [r7, #8]
 8042722:	b2ca      	uxtb	r2, r1
 8042724:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8042726:	697b      	ldr	r3, [r7, #20]
 8042728:	3301      	adds	r3, #1
 804272a:	617b      	str	r3, [r7, #20]
 804272c:	697a      	ldr	r2, [r7, #20]
 804272e:	687b      	ldr	r3, [r7, #4]
 8042730:	429a      	cmp	r2, r3
 8042732:	dbf0      	blt.n	8042716 <_read+0x12>
	}

return len;
 8042734:	687b      	ldr	r3, [r7, #4]
}
 8042736:	4618      	mov	r0, r3
 8042738:	3718      	adds	r7, #24
 804273a:	46bd      	mov	sp, r7
 804273c:	bd80      	pop	{r7, pc}

0804273e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 804273e:	b580      	push	{r7, lr}
 8042740:	b086      	sub	sp, #24
 8042742:	af00      	add	r7, sp, #0
 8042744:	60f8      	str	r0, [r7, #12]
 8042746:	60b9      	str	r1, [r7, #8]
 8042748:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804274a:	2300      	movs	r3, #0
 804274c:	617b      	str	r3, [r7, #20]
 804274e:	e009      	b.n	8042764 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8042750:	68bb      	ldr	r3, [r7, #8]
 8042752:	1c5a      	adds	r2, r3, #1
 8042754:	60ba      	str	r2, [r7, #8]
 8042756:	781b      	ldrb	r3, [r3, #0]
 8042758:	4618      	mov	r0, r3
 804275a:	f7ff fad3 	bl	8041d04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804275e:	697b      	ldr	r3, [r7, #20]
 8042760:	3301      	adds	r3, #1
 8042762:	617b      	str	r3, [r7, #20]
 8042764:	697a      	ldr	r2, [r7, #20]
 8042766:	687b      	ldr	r3, [r7, #4]
 8042768:	429a      	cmp	r2, r3
 804276a:	dbf1      	blt.n	8042750 <_write+0x12>
	}
	return len;
 804276c:	687b      	ldr	r3, [r7, #4]
}
 804276e:	4618      	mov	r0, r3
 8042770:	3718      	adds	r7, #24
 8042772:	46bd      	mov	sp, r7
 8042774:	bd80      	pop	{r7, pc}

08042776 <_close>:

int _close(int file)
{
 8042776:	b480      	push	{r7}
 8042778:	b083      	sub	sp, #12
 804277a:	af00      	add	r7, sp, #0
 804277c:	6078      	str	r0, [r7, #4]
	return -1;
 804277e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8042782:	4618      	mov	r0, r3
 8042784:	370c      	adds	r7, #12
 8042786:	46bd      	mov	sp, r7
 8042788:	f85d 7b04 	ldr.w	r7, [sp], #4
 804278c:	4770      	bx	lr

0804278e <_fstat>:


int _fstat(int file, struct stat *st)
{
 804278e:	b480      	push	{r7}
 8042790:	b083      	sub	sp, #12
 8042792:	af00      	add	r7, sp, #0
 8042794:	6078      	str	r0, [r7, #4]
 8042796:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8042798:	683b      	ldr	r3, [r7, #0]
 804279a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804279e:	605a      	str	r2, [r3, #4]
	return 0;
 80427a0:	2300      	movs	r3, #0
}
 80427a2:	4618      	mov	r0, r3
 80427a4:	370c      	adds	r7, #12
 80427a6:	46bd      	mov	sp, r7
 80427a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427ac:	4770      	bx	lr

080427ae <_isatty>:

int _isatty(int file)
{
 80427ae:	b480      	push	{r7}
 80427b0:	b083      	sub	sp, #12
 80427b2:	af00      	add	r7, sp, #0
 80427b4:	6078      	str	r0, [r7, #4]
	return 1;
 80427b6:	2301      	movs	r3, #1
}
 80427b8:	4618      	mov	r0, r3
 80427ba:	370c      	adds	r7, #12
 80427bc:	46bd      	mov	sp, r7
 80427be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427c2:	4770      	bx	lr

080427c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80427c4:	b480      	push	{r7}
 80427c6:	b085      	sub	sp, #20
 80427c8:	af00      	add	r7, sp, #0
 80427ca:	60f8      	str	r0, [r7, #12]
 80427cc:	60b9      	str	r1, [r7, #8]
 80427ce:	607a      	str	r2, [r7, #4]
	return 0;
 80427d0:	2300      	movs	r3, #0
}
 80427d2:	4618      	mov	r0, r3
 80427d4:	3714      	adds	r7, #20
 80427d6:	46bd      	mov	sp, r7
 80427d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427dc:	4770      	bx	lr
	...

080427e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80427e0:	b580      	push	{r7, lr}
 80427e2:	b086      	sub	sp, #24
 80427e4:	af00      	add	r7, sp, #0
 80427e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80427e8:	4a14      	ldr	r2, [pc, #80]	; (804283c <_sbrk+0x5c>)
 80427ea:	4b15      	ldr	r3, [pc, #84]	; (8042840 <_sbrk+0x60>)
 80427ec:	1ad3      	subs	r3, r2, r3
 80427ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80427f0:	697b      	ldr	r3, [r7, #20]
 80427f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80427f4:	4b13      	ldr	r3, [pc, #76]	; (8042844 <_sbrk+0x64>)
 80427f6:	681b      	ldr	r3, [r3, #0]
 80427f8:	2b00      	cmp	r3, #0
 80427fa:	d102      	bne.n	8042802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80427fc:	4b11      	ldr	r3, [pc, #68]	; (8042844 <_sbrk+0x64>)
 80427fe:	4a12      	ldr	r2, [pc, #72]	; (8042848 <_sbrk+0x68>)
 8042800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8042802:	4b10      	ldr	r3, [pc, #64]	; (8042844 <_sbrk+0x64>)
 8042804:	681a      	ldr	r2, [r3, #0]
 8042806:	687b      	ldr	r3, [r7, #4]
 8042808:	4413      	add	r3, r2
 804280a:	693a      	ldr	r2, [r7, #16]
 804280c:	429a      	cmp	r2, r3
 804280e:	d207      	bcs.n	8042820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8042810:	f004 fc04 	bl	804701c <__errno>
 8042814:	4603      	mov	r3, r0
 8042816:	220c      	movs	r2, #12
 8042818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 804281a:	f04f 33ff 	mov.w	r3, #4294967295
 804281e:	e009      	b.n	8042834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8042820:	4b08      	ldr	r3, [pc, #32]	; (8042844 <_sbrk+0x64>)
 8042822:	681b      	ldr	r3, [r3, #0]
 8042824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8042826:	4b07      	ldr	r3, [pc, #28]	; (8042844 <_sbrk+0x64>)
 8042828:	681a      	ldr	r2, [r3, #0]
 804282a:	687b      	ldr	r3, [r7, #4]
 804282c:	4413      	add	r3, r2
 804282e:	4a05      	ldr	r2, [pc, #20]	; (8042844 <_sbrk+0x64>)
 8042830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8042832:	68fb      	ldr	r3, [r7, #12]
}
 8042834:	4618      	mov	r0, r3
 8042836:	3718      	adds	r7, #24
 8042838:	46bd      	mov	sp, r7
 804283a:	bd80      	pop	{r7, pc}
 804283c:	20018000 	.word	0x20018000
 8042840:	00000400 	.word	0x00000400
 8042844:	200005a4 	.word	0x200005a4
 8042848:	200043a0 	.word	0x200043a0

0804284c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 804284c:	b480      	push	{r7}
 804284e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8042850:	4b06      	ldr	r3, [pc, #24]	; (804286c <SystemInit+0x20>)
 8042852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042856:	4a05      	ldr	r2, [pc, #20]	; (804286c <SystemInit+0x20>)
 8042858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 804285c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8042860:	bf00      	nop
 8042862:	46bd      	mov	sp, r7
 8042864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042868:	4770      	bx	lr
 804286a:	bf00      	nop
 804286c:	e000ed00 	.word	0xe000ed00

08042870 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8042870:	b580      	push	{r7, lr}
 8042872:	b086      	sub	sp, #24
 8042874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8042876:	f107 0308 	add.w	r3, r7, #8
 804287a:	2200      	movs	r2, #0
 804287c:	601a      	str	r2, [r3, #0]
 804287e:	605a      	str	r2, [r3, #4]
 8042880:	609a      	str	r2, [r3, #8]
 8042882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8042884:	463b      	mov	r3, r7
 8042886:	2200      	movs	r2, #0
 8042888:	601a      	str	r2, [r3, #0]
 804288a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 804288c:	4b1e      	ldr	r3, [pc, #120]	; (8042908 <MX_TIM1_Init+0x98>)
 804288e:	4a1f      	ldr	r2, [pc, #124]	; (804290c <MX_TIM1_Init+0x9c>)
 8042890:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8042892:	4b1d      	ldr	r3, [pc, #116]	; (8042908 <MX_TIM1_Init+0x98>)
 8042894:	2253      	movs	r2, #83	; 0x53
 8042896:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8042898:	4b1b      	ldr	r3, [pc, #108]	; (8042908 <MX_TIM1_Init+0x98>)
 804289a:	2200      	movs	r2, #0
 804289c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 804289e:	4b1a      	ldr	r3, [pc, #104]	; (8042908 <MX_TIM1_Init+0x98>)
 80428a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80428a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80428a6:	4b18      	ldr	r3, [pc, #96]	; (8042908 <MX_TIM1_Init+0x98>)
 80428a8:	2200      	movs	r2, #0
 80428aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80428ac:	4b16      	ldr	r3, [pc, #88]	; (8042908 <MX_TIM1_Init+0x98>)
 80428ae:	2200      	movs	r2, #0
 80428b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80428b2:	4b15      	ldr	r3, [pc, #84]	; (8042908 <MX_TIM1_Init+0x98>)
 80428b4:	2200      	movs	r2, #0
 80428b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80428b8:	4813      	ldr	r0, [pc, #76]	; (8042908 <MX_TIM1_Init+0x98>)
 80428ba:	f002 f841 	bl	8044940 <HAL_TIM_Base_Init>
 80428be:	4603      	mov	r3, r0
 80428c0:	2b00      	cmp	r3, #0
 80428c2:	d001      	beq.n	80428c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80428c4:	f7ff fb6a 	bl	8041f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80428c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80428cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80428ce:	f107 0308 	add.w	r3, r7, #8
 80428d2:	4619      	mov	r1, r3
 80428d4:	480c      	ldr	r0, [pc, #48]	; (8042908 <MX_TIM1_Init+0x98>)
 80428d6:	f002 fa47 	bl	8044d68 <HAL_TIM_ConfigClockSource>
 80428da:	4603      	mov	r3, r0
 80428dc:	2b00      	cmp	r3, #0
 80428de:	d001      	beq.n	80428e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80428e0:	f7ff fb5c 	bl	8041f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80428e4:	2300      	movs	r3, #0
 80428e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80428e8:	2300      	movs	r3, #0
 80428ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80428ec:	463b      	mov	r3, r7
 80428ee:	4619      	mov	r1, r3
 80428f0:	4805      	ldr	r0, [pc, #20]	; (8042908 <MX_TIM1_Init+0x98>)
 80428f2:	f002 fc43 	bl	804517c <HAL_TIMEx_MasterConfigSynchronization>
 80428f6:	4603      	mov	r3, r0
 80428f8:	2b00      	cmp	r3, #0
 80428fa:	d001      	beq.n	8042900 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80428fc:	f7ff fb4e 	bl	8041f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8042900:	bf00      	nop
 8042902:	3718      	adds	r7, #24
 8042904:	46bd      	mov	sp, r7
 8042906:	bd80      	pop	{r7, pc}
 8042908:	200005a8 	.word	0x200005a8
 804290c:	40010000 	.word	0x40010000

08042910 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8042910:	b580      	push	{r7, lr}
 8042912:	b084      	sub	sp, #16
 8042914:	af00      	add	r7, sp, #0
 8042916:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8042918:	687b      	ldr	r3, [r7, #4]
 804291a:	681b      	ldr	r3, [r3, #0]
 804291c:	4a0e      	ldr	r2, [pc, #56]	; (8042958 <HAL_TIM_Base_MspInit+0x48>)
 804291e:	4293      	cmp	r3, r2
 8042920:	d115      	bne.n	804294e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8042922:	2300      	movs	r3, #0
 8042924:	60fb      	str	r3, [r7, #12]
 8042926:	4b0d      	ldr	r3, [pc, #52]	; (804295c <HAL_TIM_Base_MspInit+0x4c>)
 8042928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804292a:	4a0c      	ldr	r2, [pc, #48]	; (804295c <HAL_TIM_Base_MspInit+0x4c>)
 804292c:	f043 0301 	orr.w	r3, r3, #1
 8042930:	6453      	str	r3, [r2, #68]	; 0x44
 8042932:	4b0a      	ldr	r3, [pc, #40]	; (804295c <HAL_TIM_Base_MspInit+0x4c>)
 8042934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042936:	f003 0301 	and.w	r3, r3, #1
 804293a:	60fb      	str	r3, [r7, #12]
 804293c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 804293e:	2200      	movs	r2, #0
 8042940:	210f      	movs	r1, #15
 8042942:	2019      	movs	r0, #25
 8042944:	f000 f9a2 	bl	8042c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8042948:	2019      	movs	r0, #25
 804294a:	f000 f9bb 	bl	8042cc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 804294e:	bf00      	nop
 8042950:	3710      	adds	r7, #16
 8042952:	46bd      	mov	sp, r7
 8042954:	bd80      	pop	{r7, pc}
 8042956:	bf00      	nop
 8042958:	40010000 	.word	0x40010000
 804295c:	40023800 	.word	0x40023800

08042960 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8042960:	b580      	push	{r7, lr}
 8042962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8042964:	4b11      	ldr	r3, [pc, #68]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 8042966:	4a12      	ldr	r2, [pc, #72]	; (80429b0 <MX_USART2_UART_Init+0x50>)
 8042968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 804296a:	4b10      	ldr	r3, [pc, #64]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 804296c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8042970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8042972:	4b0e      	ldr	r3, [pc, #56]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 8042974:	2200      	movs	r2, #0
 8042976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8042978:	4b0c      	ldr	r3, [pc, #48]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 804297a:	2200      	movs	r2, #0
 804297c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 804297e:	4b0b      	ldr	r3, [pc, #44]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 8042980:	2200      	movs	r2, #0
 8042982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8042984:	4b09      	ldr	r3, [pc, #36]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 8042986:	220c      	movs	r2, #12
 8042988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804298a:	4b08      	ldr	r3, [pc, #32]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 804298c:	2200      	movs	r2, #0
 804298e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8042990:	4b06      	ldr	r3, [pc, #24]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 8042992:	2200      	movs	r2, #0
 8042994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8042996:	4805      	ldr	r0, [pc, #20]	; (80429ac <MX_USART2_UART_Init+0x4c>)
 8042998:	f002 fc72 	bl	8045280 <HAL_UART_Init>
 804299c:	4603      	mov	r3, r0
 804299e:	2b00      	cmp	r3, #0
 80429a0:	d001      	beq.n	80429a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80429a2:	f7ff fafb 	bl	8041f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80429a6:	bf00      	nop
 80429a8:	bd80      	pop	{r7, pc}
 80429aa:	bf00      	nop
 80429ac:	200005f0 	.word	0x200005f0
 80429b0:	40004400 	.word	0x40004400

080429b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80429b4:	b580      	push	{r7, lr}
 80429b6:	b08a      	sub	sp, #40	; 0x28
 80429b8:	af00      	add	r7, sp, #0
 80429ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80429bc:	f107 0314 	add.w	r3, r7, #20
 80429c0:	2200      	movs	r2, #0
 80429c2:	601a      	str	r2, [r3, #0]
 80429c4:	605a      	str	r2, [r3, #4]
 80429c6:	609a      	str	r2, [r3, #8]
 80429c8:	60da      	str	r2, [r3, #12]
 80429ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80429cc:	687b      	ldr	r3, [r7, #4]
 80429ce:	681b      	ldr	r3, [r3, #0]
 80429d0:	4a19      	ldr	r2, [pc, #100]	; (8042a38 <HAL_UART_MspInit+0x84>)
 80429d2:	4293      	cmp	r3, r2
 80429d4:	d12b      	bne.n	8042a2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80429d6:	2300      	movs	r3, #0
 80429d8:	613b      	str	r3, [r7, #16]
 80429da:	4b18      	ldr	r3, [pc, #96]	; (8042a3c <HAL_UART_MspInit+0x88>)
 80429dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80429de:	4a17      	ldr	r2, [pc, #92]	; (8042a3c <HAL_UART_MspInit+0x88>)
 80429e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80429e4:	6413      	str	r3, [r2, #64]	; 0x40
 80429e6:	4b15      	ldr	r3, [pc, #84]	; (8042a3c <HAL_UART_MspInit+0x88>)
 80429e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80429ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80429ee:	613b      	str	r3, [r7, #16]
 80429f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80429f2:	2300      	movs	r3, #0
 80429f4:	60fb      	str	r3, [r7, #12]
 80429f6:	4b11      	ldr	r3, [pc, #68]	; (8042a3c <HAL_UART_MspInit+0x88>)
 80429f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429fa:	4a10      	ldr	r2, [pc, #64]	; (8042a3c <HAL_UART_MspInit+0x88>)
 80429fc:	f043 0301 	orr.w	r3, r3, #1
 8042a00:	6313      	str	r3, [r2, #48]	; 0x30
 8042a02:	4b0e      	ldr	r3, [pc, #56]	; (8042a3c <HAL_UART_MspInit+0x88>)
 8042a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042a06:	f003 0301 	and.w	r3, r3, #1
 8042a0a:	60fb      	str	r3, [r7, #12]
 8042a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8042a0e:	230c      	movs	r3, #12
 8042a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8042a12:	2302      	movs	r3, #2
 8042a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042a16:	2300      	movs	r3, #0
 8042a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8042a1a:	2300      	movs	r3, #0
 8042a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8042a1e:	2307      	movs	r3, #7
 8042a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8042a22:	f107 0314 	add.w	r3, r7, #20
 8042a26:	4619      	mov	r1, r3
 8042a28:	4805      	ldr	r0, [pc, #20]	; (8042a40 <HAL_UART_MspInit+0x8c>)
 8042a2a:	f000 f959 	bl	8042ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8042a2e:	bf00      	nop
 8042a30:	3728      	adds	r7, #40	; 0x28
 8042a32:	46bd      	mov	sp, r7
 8042a34:	bd80      	pop	{r7, pc}
 8042a36:	bf00      	nop
 8042a38:	40004400 	.word	0x40004400
 8042a3c:	40023800 	.word	0x40023800
 8042a40:	40020000 	.word	0x40020000

08042a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8042a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8042a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8042a48:	480d      	ldr	r0, [pc, #52]	; (8042a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8042a4a:	490e      	ldr	r1, [pc, #56]	; (8042a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8042a4c:	4a0e      	ldr	r2, [pc, #56]	; (8042a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8042a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8042a50:	e002      	b.n	8042a58 <LoopCopyDataInit>

08042a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8042a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8042a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8042a56:	3304      	adds	r3, #4

08042a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8042a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8042a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8042a5c:	d3f9      	bcc.n	8042a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8042a5e:	4a0b      	ldr	r2, [pc, #44]	; (8042a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8042a60:	4c0b      	ldr	r4, [pc, #44]	; (8042a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8042a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8042a64:	e001      	b.n	8042a6a <LoopFillZerobss>

08042a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8042a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8042a68:	3204      	adds	r2, #4

08042a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8042a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8042a6c:	d3fb      	bcc.n	8042a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8042a6e:	f7ff feed 	bl	804284c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8042a72:	f004 fbcf 	bl	8047214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8042a76:	f7ff f957 	bl	8041d28 <main>
  bx  lr    
 8042a7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8042a7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8042a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8042a84:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8042a88:	0804a53c 	.word	0x0804a53c
  ldr r2, =_sbss
 8042a8c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8042a90:	2000439c 	.word	0x2000439c

08042a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8042a94:	e7fe      	b.n	8042a94 <ADC_IRQHandler>
	...

08042a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8042a98:	b580      	push	{r7, lr}
 8042a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8042a9c:	4b0e      	ldr	r3, [pc, #56]	; (8042ad8 <HAL_Init+0x40>)
 8042a9e:	681b      	ldr	r3, [r3, #0]
 8042aa0:	4a0d      	ldr	r2, [pc, #52]	; (8042ad8 <HAL_Init+0x40>)
 8042aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8042aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8042aa8:	4b0b      	ldr	r3, [pc, #44]	; (8042ad8 <HAL_Init+0x40>)
 8042aaa:	681b      	ldr	r3, [r3, #0]
 8042aac:	4a0a      	ldr	r2, [pc, #40]	; (8042ad8 <HAL_Init+0x40>)
 8042aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8042ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8042ab4:	4b08      	ldr	r3, [pc, #32]	; (8042ad8 <HAL_Init+0x40>)
 8042ab6:	681b      	ldr	r3, [r3, #0]
 8042ab8:	4a07      	ldr	r2, [pc, #28]	; (8042ad8 <HAL_Init+0x40>)
 8042aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8042ac0:	2003      	movs	r0, #3
 8042ac2:	f000 f8d8 	bl	8042c76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8042ac6:	200f      	movs	r0, #15
 8042ac8:	f7ff fd64 	bl	8042594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8042acc:	f7ff fd36 	bl	804253c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8042ad0:	2300      	movs	r3, #0
}
 8042ad2:	4618      	mov	r0, r3
 8042ad4:	bd80      	pop	{r7, pc}
 8042ad6:	bf00      	nop
 8042ad8:	40023c00 	.word	0x40023c00

08042adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8042adc:	b480      	push	{r7}
 8042ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8042ae0:	4b06      	ldr	r3, [pc, #24]	; (8042afc <HAL_IncTick+0x20>)
 8042ae2:	781b      	ldrb	r3, [r3, #0]
 8042ae4:	461a      	mov	r2, r3
 8042ae6:	4b06      	ldr	r3, [pc, #24]	; (8042b00 <HAL_IncTick+0x24>)
 8042ae8:	681b      	ldr	r3, [r3, #0]
 8042aea:	4413      	add	r3, r2
 8042aec:	4a04      	ldr	r2, [pc, #16]	; (8042b00 <HAL_IncTick+0x24>)
 8042aee:	6013      	str	r3, [r2, #0]
}
 8042af0:	bf00      	nop
 8042af2:	46bd      	mov	sp, r7
 8042af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042af8:	4770      	bx	lr
 8042afa:	bf00      	nop
 8042afc:	20000008 	.word	0x20000008
 8042b00:	20000634 	.word	0x20000634

08042b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8042b04:	b480      	push	{r7}
 8042b06:	af00      	add	r7, sp, #0
  return uwTick;
 8042b08:	4b03      	ldr	r3, [pc, #12]	; (8042b18 <HAL_GetTick+0x14>)
 8042b0a:	681b      	ldr	r3, [r3, #0]
}
 8042b0c:	4618      	mov	r0, r3
 8042b0e:	46bd      	mov	sp, r7
 8042b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b14:	4770      	bx	lr
 8042b16:	bf00      	nop
 8042b18:	20000634 	.word	0x20000634

08042b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042b1c:	b480      	push	{r7}
 8042b1e:	b085      	sub	sp, #20
 8042b20:	af00      	add	r7, sp, #0
 8042b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8042b24:	687b      	ldr	r3, [r7, #4]
 8042b26:	f003 0307 	and.w	r3, r3, #7
 8042b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8042b2c:	4b0c      	ldr	r3, [pc, #48]	; (8042b60 <__NVIC_SetPriorityGrouping+0x44>)
 8042b2e:	68db      	ldr	r3, [r3, #12]
 8042b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042b32:	68ba      	ldr	r2, [r7, #8]
 8042b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8042b38:	4013      	ands	r3, r2
 8042b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8042b3c:	68fb      	ldr	r3, [r7, #12]
 8042b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8042b40:	68bb      	ldr	r3, [r7, #8]
 8042b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8042b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8042b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8042b4e:	4a04      	ldr	r2, [pc, #16]	; (8042b60 <__NVIC_SetPriorityGrouping+0x44>)
 8042b50:	68bb      	ldr	r3, [r7, #8]
 8042b52:	60d3      	str	r3, [r2, #12]
}
 8042b54:	bf00      	nop
 8042b56:	3714      	adds	r7, #20
 8042b58:	46bd      	mov	sp, r7
 8042b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b5e:	4770      	bx	lr
 8042b60:	e000ed00 	.word	0xe000ed00

08042b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8042b64:	b480      	push	{r7}
 8042b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8042b68:	4b04      	ldr	r3, [pc, #16]	; (8042b7c <__NVIC_GetPriorityGrouping+0x18>)
 8042b6a:	68db      	ldr	r3, [r3, #12]
 8042b6c:	0a1b      	lsrs	r3, r3, #8
 8042b6e:	f003 0307 	and.w	r3, r3, #7
}
 8042b72:	4618      	mov	r0, r3
 8042b74:	46bd      	mov	sp, r7
 8042b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b7a:	4770      	bx	lr
 8042b7c:	e000ed00 	.word	0xe000ed00

08042b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042b80:	b480      	push	{r7}
 8042b82:	b083      	sub	sp, #12
 8042b84:	af00      	add	r7, sp, #0
 8042b86:	4603      	mov	r3, r0
 8042b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042b8e:	2b00      	cmp	r3, #0
 8042b90:	db0b      	blt.n	8042baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8042b92:	79fb      	ldrb	r3, [r7, #7]
 8042b94:	f003 021f 	and.w	r2, r3, #31
 8042b98:	4907      	ldr	r1, [pc, #28]	; (8042bb8 <__NVIC_EnableIRQ+0x38>)
 8042b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042b9e:	095b      	lsrs	r3, r3, #5
 8042ba0:	2001      	movs	r0, #1
 8042ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8042ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8042baa:	bf00      	nop
 8042bac:	370c      	adds	r7, #12
 8042bae:	46bd      	mov	sp, r7
 8042bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bb4:	4770      	bx	lr
 8042bb6:	bf00      	nop
 8042bb8:	e000e100 	.word	0xe000e100

08042bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8042bbc:	b480      	push	{r7}
 8042bbe:	b083      	sub	sp, #12
 8042bc0:	af00      	add	r7, sp, #0
 8042bc2:	4603      	mov	r3, r0
 8042bc4:	6039      	str	r1, [r7, #0]
 8042bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042bcc:	2b00      	cmp	r3, #0
 8042bce:	db0a      	blt.n	8042be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042bd0:	683b      	ldr	r3, [r7, #0]
 8042bd2:	b2da      	uxtb	r2, r3
 8042bd4:	490c      	ldr	r1, [pc, #48]	; (8042c08 <__NVIC_SetPriority+0x4c>)
 8042bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042bda:	0112      	lsls	r2, r2, #4
 8042bdc:	b2d2      	uxtb	r2, r2
 8042bde:	440b      	add	r3, r1
 8042be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8042be4:	e00a      	b.n	8042bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042be6:	683b      	ldr	r3, [r7, #0]
 8042be8:	b2da      	uxtb	r2, r3
 8042bea:	4908      	ldr	r1, [pc, #32]	; (8042c0c <__NVIC_SetPriority+0x50>)
 8042bec:	79fb      	ldrb	r3, [r7, #7]
 8042bee:	f003 030f 	and.w	r3, r3, #15
 8042bf2:	3b04      	subs	r3, #4
 8042bf4:	0112      	lsls	r2, r2, #4
 8042bf6:	b2d2      	uxtb	r2, r2
 8042bf8:	440b      	add	r3, r1
 8042bfa:	761a      	strb	r2, [r3, #24]
}
 8042bfc:	bf00      	nop
 8042bfe:	370c      	adds	r7, #12
 8042c00:	46bd      	mov	sp, r7
 8042c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c06:	4770      	bx	lr
 8042c08:	e000e100 	.word	0xe000e100
 8042c0c:	e000ed00 	.word	0xe000ed00

08042c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8042c10:	b480      	push	{r7}
 8042c12:	b089      	sub	sp, #36	; 0x24
 8042c14:	af00      	add	r7, sp, #0
 8042c16:	60f8      	str	r0, [r7, #12]
 8042c18:	60b9      	str	r1, [r7, #8]
 8042c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8042c1c:	68fb      	ldr	r3, [r7, #12]
 8042c1e:	f003 0307 	and.w	r3, r3, #7
 8042c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042c24:	69fb      	ldr	r3, [r7, #28]
 8042c26:	f1c3 0307 	rsb	r3, r3, #7
 8042c2a:	2b04      	cmp	r3, #4
 8042c2c:	bf28      	it	cs
 8042c2e:	2304      	movcs	r3, #4
 8042c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8042c32:	69fb      	ldr	r3, [r7, #28]
 8042c34:	3304      	adds	r3, #4
 8042c36:	2b06      	cmp	r3, #6
 8042c38:	d902      	bls.n	8042c40 <NVIC_EncodePriority+0x30>
 8042c3a:	69fb      	ldr	r3, [r7, #28]
 8042c3c:	3b03      	subs	r3, #3
 8042c3e:	e000      	b.n	8042c42 <NVIC_EncodePriority+0x32>
 8042c40:	2300      	movs	r3, #0
 8042c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042c44:	f04f 32ff 	mov.w	r2, #4294967295
 8042c48:	69bb      	ldr	r3, [r7, #24]
 8042c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8042c4e:	43da      	mvns	r2, r3
 8042c50:	68bb      	ldr	r3, [r7, #8]
 8042c52:	401a      	ands	r2, r3
 8042c54:	697b      	ldr	r3, [r7, #20]
 8042c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8042c58:	f04f 31ff 	mov.w	r1, #4294967295
 8042c5c:	697b      	ldr	r3, [r7, #20]
 8042c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8042c62:	43d9      	mvns	r1, r3
 8042c64:	687b      	ldr	r3, [r7, #4]
 8042c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042c68:	4313      	orrs	r3, r2
         );
}
 8042c6a:	4618      	mov	r0, r3
 8042c6c:	3724      	adds	r7, #36	; 0x24
 8042c6e:	46bd      	mov	sp, r7
 8042c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c74:	4770      	bx	lr

08042c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042c76:	b580      	push	{r7, lr}
 8042c78:	b082      	sub	sp, #8
 8042c7a:	af00      	add	r7, sp, #0
 8042c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8042c7e:	6878      	ldr	r0, [r7, #4]
 8042c80:	f7ff ff4c 	bl	8042b1c <__NVIC_SetPriorityGrouping>
}
 8042c84:	bf00      	nop
 8042c86:	3708      	adds	r7, #8
 8042c88:	46bd      	mov	sp, r7
 8042c8a:	bd80      	pop	{r7, pc}

08042c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8042c8c:	b580      	push	{r7, lr}
 8042c8e:	b086      	sub	sp, #24
 8042c90:	af00      	add	r7, sp, #0
 8042c92:	4603      	mov	r3, r0
 8042c94:	60b9      	str	r1, [r7, #8]
 8042c96:	607a      	str	r2, [r7, #4]
 8042c98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8042c9a:	2300      	movs	r3, #0
 8042c9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8042c9e:	f7ff ff61 	bl	8042b64 <__NVIC_GetPriorityGrouping>
 8042ca2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8042ca4:	687a      	ldr	r2, [r7, #4]
 8042ca6:	68b9      	ldr	r1, [r7, #8]
 8042ca8:	6978      	ldr	r0, [r7, #20]
 8042caa:	f7ff ffb1 	bl	8042c10 <NVIC_EncodePriority>
 8042cae:	4602      	mov	r2, r0
 8042cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8042cb4:	4611      	mov	r1, r2
 8042cb6:	4618      	mov	r0, r3
 8042cb8:	f7ff ff80 	bl	8042bbc <__NVIC_SetPriority>
}
 8042cbc:	bf00      	nop
 8042cbe:	3718      	adds	r7, #24
 8042cc0:	46bd      	mov	sp, r7
 8042cc2:	bd80      	pop	{r7, pc}

08042cc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042cc4:	b580      	push	{r7, lr}
 8042cc6:	b082      	sub	sp, #8
 8042cc8:	af00      	add	r7, sp, #0
 8042cca:	4603      	mov	r3, r0
 8042ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8042cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042cd2:	4618      	mov	r0, r3
 8042cd4:	f7ff ff54 	bl	8042b80 <__NVIC_EnableIRQ>
}
 8042cd8:	bf00      	nop
 8042cda:	3708      	adds	r7, #8
 8042cdc:	46bd      	mov	sp, r7
 8042cde:	bd80      	pop	{r7, pc}

08042ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8042ce0:	b480      	push	{r7}
 8042ce2:	b089      	sub	sp, #36	; 0x24
 8042ce4:	af00      	add	r7, sp, #0
 8042ce6:	6078      	str	r0, [r7, #4]
 8042ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8042cea:	2300      	movs	r3, #0
 8042cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8042cee:	2300      	movs	r3, #0
 8042cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8042cf2:	2300      	movs	r3, #0
 8042cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8042cf6:	2300      	movs	r3, #0
 8042cf8:	61fb      	str	r3, [r7, #28]
 8042cfa:	e159      	b.n	8042fb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8042cfc:	2201      	movs	r2, #1
 8042cfe:	69fb      	ldr	r3, [r7, #28]
 8042d00:	fa02 f303 	lsl.w	r3, r2, r3
 8042d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8042d06:	683b      	ldr	r3, [r7, #0]
 8042d08:	681b      	ldr	r3, [r3, #0]
 8042d0a:	697a      	ldr	r2, [r7, #20]
 8042d0c:	4013      	ands	r3, r2
 8042d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8042d10:	693a      	ldr	r2, [r7, #16]
 8042d12:	697b      	ldr	r3, [r7, #20]
 8042d14:	429a      	cmp	r2, r3
 8042d16:	f040 8148 	bne.w	8042faa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8042d1a:	683b      	ldr	r3, [r7, #0]
 8042d1c:	685b      	ldr	r3, [r3, #4]
 8042d1e:	f003 0303 	and.w	r3, r3, #3
 8042d22:	2b01      	cmp	r3, #1
 8042d24:	d005      	beq.n	8042d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8042d26:	683b      	ldr	r3, [r7, #0]
 8042d28:	685b      	ldr	r3, [r3, #4]
 8042d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8042d2e:	2b02      	cmp	r3, #2
 8042d30:	d130      	bne.n	8042d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8042d32:	687b      	ldr	r3, [r7, #4]
 8042d34:	689b      	ldr	r3, [r3, #8]
 8042d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8042d38:	69fb      	ldr	r3, [r7, #28]
 8042d3a:	005b      	lsls	r3, r3, #1
 8042d3c:	2203      	movs	r2, #3
 8042d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8042d42:	43db      	mvns	r3, r3
 8042d44:	69ba      	ldr	r2, [r7, #24]
 8042d46:	4013      	ands	r3, r2
 8042d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8042d4a:	683b      	ldr	r3, [r7, #0]
 8042d4c:	68da      	ldr	r2, [r3, #12]
 8042d4e:	69fb      	ldr	r3, [r7, #28]
 8042d50:	005b      	lsls	r3, r3, #1
 8042d52:	fa02 f303 	lsl.w	r3, r2, r3
 8042d56:	69ba      	ldr	r2, [r7, #24]
 8042d58:	4313      	orrs	r3, r2
 8042d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8042d5c:	687b      	ldr	r3, [r7, #4]
 8042d5e:	69ba      	ldr	r2, [r7, #24]
 8042d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8042d62:	687b      	ldr	r3, [r7, #4]
 8042d64:	685b      	ldr	r3, [r3, #4]
 8042d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8042d68:	2201      	movs	r2, #1
 8042d6a:	69fb      	ldr	r3, [r7, #28]
 8042d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8042d70:	43db      	mvns	r3, r3
 8042d72:	69ba      	ldr	r2, [r7, #24]
 8042d74:	4013      	ands	r3, r2
 8042d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8042d78:	683b      	ldr	r3, [r7, #0]
 8042d7a:	685b      	ldr	r3, [r3, #4]
 8042d7c:	091b      	lsrs	r3, r3, #4
 8042d7e:	f003 0201 	and.w	r2, r3, #1
 8042d82:	69fb      	ldr	r3, [r7, #28]
 8042d84:	fa02 f303 	lsl.w	r3, r2, r3
 8042d88:	69ba      	ldr	r2, [r7, #24]
 8042d8a:	4313      	orrs	r3, r2
 8042d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8042d8e:	687b      	ldr	r3, [r7, #4]
 8042d90:	69ba      	ldr	r2, [r7, #24]
 8042d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8042d94:	683b      	ldr	r3, [r7, #0]
 8042d96:	685b      	ldr	r3, [r3, #4]
 8042d98:	f003 0303 	and.w	r3, r3, #3
 8042d9c:	2b03      	cmp	r3, #3
 8042d9e:	d017      	beq.n	8042dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8042da0:	687b      	ldr	r3, [r7, #4]
 8042da2:	68db      	ldr	r3, [r3, #12]
 8042da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8042da6:	69fb      	ldr	r3, [r7, #28]
 8042da8:	005b      	lsls	r3, r3, #1
 8042daa:	2203      	movs	r2, #3
 8042dac:	fa02 f303 	lsl.w	r3, r2, r3
 8042db0:	43db      	mvns	r3, r3
 8042db2:	69ba      	ldr	r2, [r7, #24]
 8042db4:	4013      	ands	r3, r2
 8042db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8042db8:	683b      	ldr	r3, [r7, #0]
 8042dba:	689a      	ldr	r2, [r3, #8]
 8042dbc:	69fb      	ldr	r3, [r7, #28]
 8042dbe:	005b      	lsls	r3, r3, #1
 8042dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8042dc4:	69ba      	ldr	r2, [r7, #24]
 8042dc6:	4313      	orrs	r3, r2
 8042dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8042dca:	687b      	ldr	r3, [r7, #4]
 8042dcc:	69ba      	ldr	r2, [r7, #24]
 8042dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8042dd0:	683b      	ldr	r3, [r7, #0]
 8042dd2:	685b      	ldr	r3, [r3, #4]
 8042dd4:	f003 0303 	and.w	r3, r3, #3
 8042dd8:	2b02      	cmp	r3, #2
 8042dda:	d123      	bne.n	8042e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8042ddc:	69fb      	ldr	r3, [r7, #28]
 8042dde:	08da      	lsrs	r2, r3, #3
 8042de0:	687b      	ldr	r3, [r7, #4]
 8042de2:	3208      	adds	r2, #8
 8042de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8042de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8042dea:	69fb      	ldr	r3, [r7, #28]
 8042dec:	f003 0307 	and.w	r3, r3, #7
 8042df0:	009b      	lsls	r3, r3, #2
 8042df2:	220f      	movs	r2, #15
 8042df4:	fa02 f303 	lsl.w	r3, r2, r3
 8042df8:	43db      	mvns	r3, r3
 8042dfa:	69ba      	ldr	r2, [r7, #24]
 8042dfc:	4013      	ands	r3, r2
 8042dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8042e00:	683b      	ldr	r3, [r7, #0]
 8042e02:	691a      	ldr	r2, [r3, #16]
 8042e04:	69fb      	ldr	r3, [r7, #28]
 8042e06:	f003 0307 	and.w	r3, r3, #7
 8042e0a:	009b      	lsls	r3, r3, #2
 8042e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8042e10:	69ba      	ldr	r2, [r7, #24]
 8042e12:	4313      	orrs	r3, r2
 8042e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8042e16:	69fb      	ldr	r3, [r7, #28]
 8042e18:	08da      	lsrs	r2, r3, #3
 8042e1a:	687b      	ldr	r3, [r7, #4]
 8042e1c:	3208      	adds	r2, #8
 8042e1e:	69b9      	ldr	r1, [r7, #24]
 8042e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8042e24:	687b      	ldr	r3, [r7, #4]
 8042e26:	681b      	ldr	r3, [r3, #0]
 8042e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8042e2a:	69fb      	ldr	r3, [r7, #28]
 8042e2c:	005b      	lsls	r3, r3, #1
 8042e2e:	2203      	movs	r2, #3
 8042e30:	fa02 f303 	lsl.w	r3, r2, r3
 8042e34:	43db      	mvns	r3, r3
 8042e36:	69ba      	ldr	r2, [r7, #24]
 8042e38:	4013      	ands	r3, r2
 8042e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8042e3c:	683b      	ldr	r3, [r7, #0]
 8042e3e:	685b      	ldr	r3, [r3, #4]
 8042e40:	f003 0203 	and.w	r2, r3, #3
 8042e44:	69fb      	ldr	r3, [r7, #28]
 8042e46:	005b      	lsls	r3, r3, #1
 8042e48:	fa02 f303 	lsl.w	r3, r2, r3
 8042e4c:	69ba      	ldr	r2, [r7, #24]
 8042e4e:	4313      	orrs	r3, r2
 8042e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8042e52:	687b      	ldr	r3, [r7, #4]
 8042e54:	69ba      	ldr	r2, [r7, #24]
 8042e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8042e58:	683b      	ldr	r3, [r7, #0]
 8042e5a:	685b      	ldr	r3, [r3, #4]
 8042e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8042e60:	2b00      	cmp	r3, #0
 8042e62:	f000 80a2 	beq.w	8042faa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042e66:	2300      	movs	r3, #0
 8042e68:	60fb      	str	r3, [r7, #12]
 8042e6a:	4b57      	ldr	r3, [pc, #348]	; (8042fc8 <HAL_GPIO_Init+0x2e8>)
 8042e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042e6e:	4a56      	ldr	r2, [pc, #344]	; (8042fc8 <HAL_GPIO_Init+0x2e8>)
 8042e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8042e74:	6453      	str	r3, [r2, #68]	; 0x44
 8042e76:	4b54      	ldr	r3, [pc, #336]	; (8042fc8 <HAL_GPIO_Init+0x2e8>)
 8042e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042e7e:	60fb      	str	r3, [r7, #12]
 8042e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8042e82:	4a52      	ldr	r2, [pc, #328]	; (8042fcc <HAL_GPIO_Init+0x2ec>)
 8042e84:	69fb      	ldr	r3, [r7, #28]
 8042e86:	089b      	lsrs	r3, r3, #2
 8042e88:	3302      	adds	r3, #2
 8042e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8042e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8042e90:	69fb      	ldr	r3, [r7, #28]
 8042e92:	f003 0303 	and.w	r3, r3, #3
 8042e96:	009b      	lsls	r3, r3, #2
 8042e98:	220f      	movs	r2, #15
 8042e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8042e9e:	43db      	mvns	r3, r3
 8042ea0:	69ba      	ldr	r2, [r7, #24]
 8042ea2:	4013      	ands	r3, r2
 8042ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8042ea6:	687b      	ldr	r3, [r7, #4]
 8042ea8:	4a49      	ldr	r2, [pc, #292]	; (8042fd0 <HAL_GPIO_Init+0x2f0>)
 8042eaa:	4293      	cmp	r3, r2
 8042eac:	d019      	beq.n	8042ee2 <HAL_GPIO_Init+0x202>
 8042eae:	687b      	ldr	r3, [r7, #4]
 8042eb0:	4a48      	ldr	r2, [pc, #288]	; (8042fd4 <HAL_GPIO_Init+0x2f4>)
 8042eb2:	4293      	cmp	r3, r2
 8042eb4:	d013      	beq.n	8042ede <HAL_GPIO_Init+0x1fe>
 8042eb6:	687b      	ldr	r3, [r7, #4]
 8042eb8:	4a47      	ldr	r2, [pc, #284]	; (8042fd8 <HAL_GPIO_Init+0x2f8>)
 8042eba:	4293      	cmp	r3, r2
 8042ebc:	d00d      	beq.n	8042eda <HAL_GPIO_Init+0x1fa>
 8042ebe:	687b      	ldr	r3, [r7, #4]
 8042ec0:	4a46      	ldr	r2, [pc, #280]	; (8042fdc <HAL_GPIO_Init+0x2fc>)
 8042ec2:	4293      	cmp	r3, r2
 8042ec4:	d007      	beq.n	8042ed6 <HAL_GPIO_Init+0x1f6>
 8042ec6:	687b      	ldr	r3, [r7, #4]
 8042ec8:	4a45      	ldr	r2, [pc, #276]	; (8042fe0 <HAL_GPIO_Init+0x300>)
 8042eca:	4293      	cmp	r3, r2
 8042ecc:	d101      	bne.n	8042ed2 <HAL_GPIO_Init+0x1f2>
 8042ece:	2304      	movs	r3, #4
 8042ed0:	e008      	b.n	8042ee4 <HAL_GPIO_Init+0x204>
 8042ed2:	2307      	movs	r3, #7
 8042ed4:	e006      	b.n	8042ee4 <HAL_GPIO_Init+0x204>
 8042ed6:	2303      	movs	r3, #3
 8042ed8:	e004      	b.n	8042ee4 <HAL_GPIO_Init+0x204>
 8042eda:	2302      	movs	r3, #2
 8042edc:	e002      	b.n	8042ee4 <HAL_GPIO_Init+0x204>
 8042ede:	2301      	movs	r3, #1
 8042ee0:	e000      	b.n	8042ee4 <HAL_GPIO_Init+0x204>
 8042ee2:	2300      	movs	r3, #0
 8042ee4:	69fa      	ldr	r2, [r7, #28]
 8042ee6:	f002 0203 	and.w	r2, r2, #3
 8042eea:	0092      	lsls	r2, r2, #2
 8042eec:	4093      	lsls	r3, r2
 8042eee:	69ba      	ldr	r2, [r7, #24]
 8042ef0:	4313      	orrs	r3, r2
 8042ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8042ef4:	4935      	ldr	r1, [pc, #212]	; (8042fcc <HAL_GPIO_Init+0x2ec>)
 8042ef6:	69fb      	ldr	r3, [r7, #28]
 8042ef8:	089b      	lsrs	r3, r3, #2
 8042efa:	3302      	adds	r3, #2
 8042efc:	69ba      	ldr	r2, [r7, #24]
 8042efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8042f02:	4b38      	ldr	r3, [pc, #224]	; (8042fe4 <HAL_GPIO_Init+0x304>)
 8042f04:	689b      	ldr	r3, [r3, #8]
 8042f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8042f08:	693b      	ldr	r3, [r7, #16]
 8042f0a:	43db      	mvns	r3, r3
 8042f0c:	69ba      	ldr	r2, [r7, #24]
 8042f0e:	4013      	ands	r3, r2
 8042f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8042f12:	683b      	ldr	r3, [r7, #0]
 8042f14:	685b      	ldr	r3, [r3, #4]
 8042f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042f1a:	2b00      	cmp	r3, #0
 8042f1c:	d003      	beq.n	8042f26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8042f1e:	69ba      	ldr	r2, [r7, #24]
 8042f20:	693b      	ldr	r3, [r7, #16]
 8042f22:	4313      	orrs	r3, r2
 8042f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8042f26:	4a2f      	ldr	r2, [pc, #188]	; (8042fe4 <HAL_GPIO_Init+0x304>)
 8042f28:	69bb      	ldr	r3, [r7, #24]
 8042f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8042f2c:	4b2d      	ldr	r3, [pc, #180]	; (8042fe4 <HAL_GPIO_Init+0x304>)
 8042f2e:	68db      	ldr	r3, [r3, #12]
 8042f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8042f32:	693b      	ldr	r3, [r7, #16]
 8042f34:	43db      	mvns	r3, r3
 8042f36:	69ba      	ldr	r2, [r7, #24]
 8042f38:	4013      	ands	r3, r2
 8042f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8042f3c:	683b      	ldr	r3, [r7, #0]
 8042f3e:	685b      	ldr	r3, [r3, #4]
 8042f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042f44:	2b00      	cmp	r3, #0
 8042f46:	d003      	beq.n	8042f50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8042f48:	69ba      	ldr	r2, [r7, #24]
 8042f4a:	693b      	ldr	r3, [r7, #16]
 8042f4c:	4313      	orrs	r3, r2
 8042f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8042f50:	4a24      	ldr	r2, [pc, #144]	; (8042fe4 <HAL_GPIO_Init+0x304>)
 8042f52:	69bb      	ldr	r3, [r7, #24]
 8042f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8042f56:	4b23      	ldr	r3, [pc, #140]	; (8042fe4 <HAL_GPIO_Init+0x304>)
 8042f58:	685b      	ldr	r3, [r3, #4]
 8042f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8042f5c:	693b      	ldr	r3, [r7, #16]
 8042f5e:	43db      	mvns	r3, r3
 8042f60:	69ba      	ldr	r2, [r7, #24]
 8042f62:	4013      	ands	r3, r2
 8042f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8042f66:	683b      	ldr	r3, [r7, #0]
 8042f68:	685b      	ldr	r3, [r3, #4]
 8042f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042f6e:	2b00      	cmp	r3, #0
 8042f70:	d003      	beq.n	8042f7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8042f72:	69ba      	ldr	r2, [r7, #24]
 8042f74:	693b      	ldr	r3, [r7, #16]
 8042f76:	4313      	orrs	r3, r2
 8042f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8042f7a:	4a1a      	ldr	r2, [pc, #104]	; (8042fe4 <HAL_GPIO_Init+0x304>)
 8042f7c:	69bb      	ldr	r3, [r7, #24]
 8042f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8042f80:	4b18      	ldr	r3, [pc, #96]	; (8042fe4 <HAL_GPIO_Init+0x304>)
 8042f82:	681b      	ldr	r3, [r3, #0]
 8042f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8042f86:	693b      	ldr	r3, [r7, #16]
 8042f88:	43db      	mvns	r3, r3
 8042f8a:	69ba      	ldr	r2, [r7, #24]
 8042f8c:	4013      	ands	r3, r2
 8042f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8042f90:	683b      	ldr	r3, [r7, #0]
 8042f92:	685b      	ldr	r3, [r3, #4]
 8042f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042f98:	2b00      	cmp	r3, #0
 8042f9a:	d003      	beq.n	8042fa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8042f9c:	69ba      	ldr	r2, [r7, #24]
 8042f9e:	693b      	ldr	r3, [r7, #16]
 8042fa0:	4313      	orrs	r3, r2
 8042fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8042fa4:	4a0f      	ldr	r2, [pc, #60]	; (8042fe4 <HAL_GPIO_Init+0x304>)
 8042fa6:	69bb      	ldr	r3, [r7, #24]
 8042fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8042faa:	69fb      	ldr	r3, [r7, #28]
 8042fac:	3301      	adds	r3, #1
 8042fae:	61fb      	str	r3, [r7, #28]
 8042fb0:	69fb      	ldr	r3, [r7, #28]
 8042fb2:	2b0f      	cmp	r3, #15
 8042fb4:	f67f aea2 	bls.w	8042cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8042fb8:	bf00      	nop
 8042fba:	bf00      	nop
 8042fbc:	3724      	adds	r7, #36	; 0x24
 8042fbe:	46bd      	mov	sp, r7
 8042fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fc4:	4770      	bx	lr
 8042fc6:	bf00      	nop
 8042fc8:	40023800 	.word	0x40023800
 8042fcc:	40013800 	.word	0x40013800
 8042fd0:	40020000 	.word	0x40020000
 8042fd4:	40020400 	.word	0x40020400
 8042fd8:	40020800 	.word	0x40020800
 8042fdc:	40020c00 	.word	0x40020c00
 8042fe0:	40021000 	.word	0x40021000
 8042fe4:	40013c00 	.word	0x40013c00

08042fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8042fe8:	b480      	push	{r7}
 8042fea:	b085      	sub	sp, #20
 8042fec:	af00      	add	r7, sp, #0
 8042fee:	6078      	str	r0, [r7, #4]
 8042ff0:	460b      	mov	r3, r1
 8042ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8042ff4:	687b      	ldr	r3, [r7, #4]
 8042ff6:	691a      	ldr	r2, [r3, #16]
 8042ff8:	887b      	ldrh	r3, [r7, #2]
 8042ffa:	4013      	ands	r3, r2
 8042ffc:	2b00      	cmp	r3, #0
 8042ffe:	d002      	beq.n	8043006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8043000:	2301      	movs	r3, #1
 8043002:	73fb      	strb	r3, [r7, #15]
 8043004:	e001      	b.n	804300a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8043006:	2300      	movs	r3, #0
 8043008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 804300a:	7bfb      	ldrb	r3, [r7, #15]
}
 804300c:	4618      	mov	r0, r3
 804300e:	3714      	adds	r7, #20
 8043010:	46bd      	mov	sp, r7
 8043012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043016:	4770      	bx	lr

08043018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8043018:	b480      	push	{r7}
 804301a:	b083      	sub	sp, #12
 804301c:	af00      	add	r7, sp, #0
 804301e:	6078      	str	r0, [r7, #4]
 8043020:	460b      	mov	r3, r1
 8043022:	807b      	strh	r3, [r7, #2]
 8043024:	4613      	mov	r3, r2
 8043026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8043028:	787b      	ldrb	r3, [r7, #1]
 804302a:	2b00      	cmp	r3, #0
 804302c:	d003      	beq.n	8043036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804302e:	887a      	ldrh	r2, [r7, #2]
 8043030:	687b      	ldr	r3, [r7, #4]
 8043032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8043034:	e003      	b.n	804303e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8043036:	887b      	ldrh	r3, [r7, #2]
 8043038:	041a      	lsls	r2, r3, #16
 804303a:	687b      	ldr	r3, [r7, #4]
 804303c:	619a      	str	r2, [r3, #24]
}
 804303e:	bf00      	nop
 8043040:	370c      	adds	r7, #12
 8043042:	46bd      	mov	sp, r7
 8043044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043048:	4770      	bx	lr

0804304a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 804304a:	b480      	push	{r7}
 804304c:	b085      	sub	sp, #20
 804304e:	af00      	add	r7, sp, #0
 8043050:	6078      	str	r0, [r7, #4]
 8043052:	460b      	mov	r3, r1
 8043054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8043056:	687b      	ldr	r3, [r7, #4]
 8043058:	695b      	ldr	r3, [r3, #20]
 804305a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 804305c:	887a      	ldrh	r2, [r7, #2]
 804305e:	68fb      	ldr	r3, [r7, #12]
 8043060:	4013      	ands	r3, r2
 8043062:	041a      	lsls	r2, r3, #16
 8043064:	68fb      	ldr	r3, [r7, #12]
 8043066:	43d9      	mvns	r1, r3
 8043068:	887b      	ldrh	r3, [r7, #2]
 804306a:	400b      	ands	r3, r1
 804306c:	431a      	orrs	r2, r3
 804306e:	687b      	ldr	r3, [r7, #4]
 8043070:	619a      	str	r2, [r3, #24]
}
 8043072:	bf00      	nop
 8043074:	3714      	adds	r7, #20
 8043076:	46bd      	mov	sp, r7
 8043078:	f85d 7b04 	ldr.w	r7, [sp], #4
 804307c:	4770      	bx	lr
	...

08043080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8043080:	b580      	push	{r7, lr}
 8043082:	b084      	sub	sp, #16
 8043084:	af00      	add	r7, sp, #0
 8043086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8043088:	687b      	ldr	r3, [r7, #4]
 804308a:	2b00      	cmp	r3, #0
 804308c:	d101      	bne.n	8043092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 804308e:	2301      	movs	r3, #1
 8043090:	e12b      	b.n	80432ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8043092:	687b      	ldr	r3, [r7, #4]
 8043094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8043098:	b2db      	uxtb	r3, r3
 804309a:	2b00      	cmp	r3, #0
 804309c:	d106      	bne.n	80430ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 804309e:	687b      	ldr	r3, [r7, #4]
 80430a0:	2200      	movs	r2, #0
 80430a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80430a6:	6878      	ldr	r0, [r7, #4]
 80430a8:	f7fe fde4 	bl	8041c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80430ac:	687b      	ldr	r3, [r7, #4]
 80430ae:	2224      	movs	r2, #36	; 0x24
 80430b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80430b4:	687b      	ldr	r3, [r7, #4]
 80430b6:	681b      	ldr	r3, [r3, #0]
 80430b8:	681a      	ldr	r2, [r3, #0]
 80430ba:	687b      	ldr	r3, [r7, #4]
 80430bc:	681b      	ldr	r3, [r3, #0]
 80430be:	f022 0201 	bic.w	r2, r2, #1
 80430c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80430c4:	687b      	ldr	r3, [r7, #4]
 80430c6:	681b      	ldr	r3, [r3, #0]
 80430c8:	681a      	ldr	r2, [r3, #0]
 80430ca:	687b      	ldr	r3, [r7, #4]
 80430cc:	681b      	ldr	r3, [r3, #0]
 80430ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80430d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80430d4:	687b      	ldr	r3, [r7, #4]
 80430d6:	681b      	ldr	r3, [r3, #0]
 80430d8:	681a      	ldr	r2, [r3, #0]
 80430da:	687b      	ldr	r3, [r7, #4]
 80430dc:	681b      	ldr	r3, [r3, #0]
 80430de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80430e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80430e4:	f001 fbd2 	bl	804488c <HAL_RCC_GetPCLK1Freq>
 80430e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80430ea:	687b      	ldr	r3, [r7, #4]
 80430ec:	685b      	ldr	r3, [r3, #4]
 80430ee:	4a81      	ldr	r2, [pc, #516]	; (80432f4 <HAL_I2C_Init+0x274>)
 80430f0:	4293      	cmp	r3, r2
 80430f2:	d807      	bhi.n	8043104 <HAL_I2C_Init+0x84>
 80430f4:	68fb      	ldr	r3, [r7, #12]
 80430f6:	4a80      	ldr	r2, [pc, #512]	; (80432f8 <HAL_I2C_Init+0x278>)
 80430f8:	4293      	cmp	r3, r2
 80430fa:	bf94      	ite	ls
 80430fc:	2301      	movls	r3, #1
 80430fe:	2300      	movhi	r3, #0
 8043100:	b2db      	uxtb	r3, r3
 8043102:	e006      	b.n	8043112 <HAL_I2C_Init+0x92>
 8043104:	68fb      	ldr	r3, [r7, #12]
 8043106:	4a7d      	ldr	r2, [pc, #500]	; (80432fc <HAL_I2C_Init+0x27c>)
 8043108:	4293      	cmp	r3, r2
 804310a:	bf94      	ite	ls
 804310c:	2301      	movls	r3, #1
 804310e:	2300      	movhi	r3, #0
 8043110:	b2db      	uxtb	r3, r3
 8043112:	2b00      	cmp	r3, #0
 8043114:	d001      	beq.n	804311a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8043116:	2301      	movs	r3, #1
 8043118:	e0e7      	b.n	80432ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 804311a:	68fb      	ldr	r3, [r7, #12]
 804311c:	4a78      	ldr	r2, [pc, #480]	; (8043300 <HAL_I2C_Init+0x280>)
 804311e:	fba2 2303 	umull	r2, r3, r2, r3
 8043122:	0c9b      	lsrs	r3, r3, #18
 8043124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8043126:	687b      	ldr	r3, [r7, #4]
 8043128:	681b      	ldr	r3, [r3, #0]
 804312a:	685b      	ldr	r3, [r3, #4]
 804312c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8043130:	687b      	ldr	r3, [r7, #4]
 8043132:	681b      	ldr	r3, [r3, #0]
 8043134:	68ba      	ldr	r2, [r7, #8]
 8043136:	430a      	orrs	r2, r1
 8043138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 804313a:	687b      	ldr	r3, [r7, #4]
 804313c:	681b      	ldr	r3, [r3, #0]
 804313e:	6a1b      	ldr	r3, [r3, #32]
 8043140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8043144:	687b      	ldr	r3, [r7, #4]
 8043146:	685b      	ldr	r3, [r3, #4]
 8043148:	4a6a      	ldr	r2, [pc, #424]	; (80432f4 <HAL_I2C_Init+0x274>)
 804314a:	4293      	cmp	r3, r2
 804314c:	d802      	bhi.n	8043154 <HAL_I2C_Init+0xd4>
 804314e:	68bb      	ldr	r3, [r7, #8]
 8043150:	3301      	adds	r3, #1
 8043152:	e009      	b.n	8043168 <HAL_I2C_Init+0xe8>
 8043154:	68bb      	ldr	r3, [r7, #8]
 8043156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 804315a:	fb02 f303 	mul.w	r3, r2, r3
 804315e:	4a69      	ldr	r2, [pc, #420]	; (8043304 <HAL_I2C_Init+0x284>)
 8043160:	fba2 2303 	umull	r2, r3, r2, r3
 8043164:	099b      	lsrs	r3, r3, #6
 8043166:	3301      	adds	r3, #1
 8043168:	687a      	ldr	r2, [r7, #4]
 804316a:	6812      	ldr	r2, [r2, #0]
 804316c:	430b      	orrs	r3, r1
 804316e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8043170:	687b      	ldr	r3, [r7, #4]
 8043172:	681b      	ldr	r3, [r3, #0]
 8043174:	69db      	ldr	r3, [r3, #28]
 8043176:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 804317a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 804317e:	687b      	ldr	r3, [r7, #4]
 8043180:	685b      	ldr	r3, [r3, #4]
 8043182:	495c      	ldr	r1, [pc, #368]	; (80432f4 <HAL_I2C_Init+0x274>)
 8043184:	428b      	cmp	r3, r1
 8043186:	d819      	bhi.n	80431bc <HAL_I2C_Init+0x13c>
 8043188:	68fb      	ldr	r3, [r7, #12]
 804318a:	1e59      	subs	r1, r3, #1
 804318c:	687b      	ldr	r3, [r7, #4]
 804318e:	685b      	ldr	r3, [r3, #4]
 8043190:	005b      	lsls	r3, r3, #1
 8043192:	fbb1 f3f3 	udiv	r3, r1, r3
 8043196:	1c59      	adds	r1, r3, #1
 8043198:	f640 73fc 	movw	r3, #4092	; 0xffc
 804319c:	400b      	ands	r3, r1
 804319e:	2b00      	cmp	r3, #0
 80431a0:	d00a      	beq.n	80431b8 <HAL_I2C_Init+0x138>
 80431a2:	68fb      	ldr	r3, [r7, #12]
 80431a4:	1e59      	subs	r1, r3, #1
 80431a6:	687b      	ldr	r3, [r7, #4]
 80431a8:	685b      	ldr	r3, [r3, #4]
 80431aa:	005b      	lsls	r3, r3, #1
 80431ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80431b0:	3301      	adds	r3, #1
 80431b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80431b6:	e051      	b.n	804325c <HAL_I2C_Init+0x1dc>
 80431b8:	2304      	movs	r3, #4
 80431ba:	e04f      	b.n	804325c <HAL_I2C_Init+0x1dc>
 80431bc:	687b      	ldr	r3, [r7, #4]
 80431be:	689b      	ldr	r3, [r3, #8]
 80431c0:	2b00      	cmp	r3, #0
 80431c2:	d111      	bne.n	80431e8 <HAL_I2C_Init+0x168>
 80431c4:	68fb      	ldr	r3, [r7, #12]
 80431c6:	1e58      	subs	r0, r3, #1
 80431c8:	687b      	ldr	r3, [r7, #4]
 80431ca:	6859      	ldr	r1, [r3, #4]
 80431cc:	460b      	mov	r3, r1
 80431ce:	005b      	lsls	r3, r3, #1
 80431d0:	440b      	add	r3, r1
 80431d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80431d6:	3301      	adds	r3, #1
 80431d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80431dc:	2b00      	cmp	r3, #0
 80431de:	bf0c      	ite	eq
 80431e0:	2301      	moveq	r3, #1
 80431e2:	2300      	movne	r3, #0
 80431e4:	b2db      	uxtb	r3, r3
 80431e6:	e012      	b.n	804320e <HAL_I2C_Init+0x18e>
 80431e8:	68fb      	ldr	r3, [r7, #12]
 80431ea:	1e58      	subs	r0, r3, #1
 80431ec:	687b      	ldr	r3, [r7, #4]
 80431ee:	6859      	ldr	r1, [r3, #4]
 80431f0:	460b      	mov	r3, r1
 80431f2:	009b      	lsls	r3, r3, #2
 80431f4:	440b      	add	r3, r1
 80431f6:	0099      	lsls	r1, r3, #2
 80431f8:	440b      	add	r3, r1
 80431fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80431fe:	3301      	adds	r3, #1
 8043200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043204:	2b00      	cmp	r3, #0
 8043206:	bf0c      	ite	eq
 8043208:	2301      	moveq	r3, #1
 804320a:	2300      	movne	r3, #0
 804320c:	b2db      	uxtb	r3, r3
 804320e:	2b00      	cmp	r3, #0
 8043210:	d001      	beq.n	8043216 <HAL_I2C_Init+0x196>
 8043212:	2301      	movs	r3, #1
 8043214:	e022      	b.n	804325c <HAL_I2C_Init+0x1dc>
 8043216:	687b      	ldr	r3, [r7, #4]
 8043218:	689b      	ldr	r3, [r3, #8]
 804321a:	2b00      	cmp	r3, #0
 804321c:	d10e      	bne.n	804323c <HAL_I2C_Init+0x1bc>
 804321e:	68fb      	ldr	r3, [r7, #12]
 8043220:	1e58      	subs	r0, r3, #1
 8043222:	687b      	ldr	r3, [r7, #4]
 8043224:	6859      	ldr	r1, [r3, #4]
 8043226:	460b      	mov	r3, r1
 8043228:	005b      	lsls	r3, r3, #1
 804322a:	440b      	add	r3, r1
 804322c:	fbb0 f3f3 	udiv	r3, r0, r3
 8043230:	3301      	adds	r3, #1
 8043232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804323a:	e00f      	b.n	804325c <HAL_I2C_Init+0x1dc>
 804323c:	68fb      	ldr	r3, [r7, #12]
 804323e:	1e58      	subs	r0, r3, #1
 8043240:	687b      	ldr	r3, [r7, #4]
 8043242:	6859      	ldr	r1, [r3, #4]
 8043244:	460b      	mov	r3, r1
 8043246:	009b      	lsls	r3, r3, #2
 8043248:	440b      	add	r3, r1
 804324a:	0099      	lsls	r1, r3, #2
 804324c:	440b      	add	r3, r1
 804324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8043252:	3301      	adds	r3, #1
 8043254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 804325c:	6879      	ldr	r1, [r7, #4]
 804325e:	6809      	ldr	r1, [r1, #0]
 8043260:	4313      	orrs	r3, r2
 8043262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8043264:	687b      	ldr	r3, [r7, #4]
 8043266:	681b      	ldr	r3, [r3, #0]
 8043268:	681b      	ldr	r3, [r3, #0]
 804326a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 804326e:	687b      	ldr	r3, [r7, #4]
 8043270:	69da      	ldr	r2, [r3, #28]
 8043272:	687b      	ldr	r3, [r7, #4]
 8043274:	6a1b      	ldr	r3, [r3, #32]
 8043276:	431a      	orrs	r2, r3
 8043278:	687b      	ldr	r3, [r7, #4]
 804327a:	681b      	ldr	r3, [r3, #0]
 804327c:	430a      	orrs	r2, r1
 804327e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8043280:	687b      	ldr	r3, [r7, #4]
 8043282:	681b      	ldr	r3, [r3, #0]
 8043284:	689b      	ldr	r3, [r3, #8]
 8043286:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 804328a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804328e:	687a      	ldr	r2, [r7, #4]
 8043290:	6911      	ldr	r1, [r2, #16]
 8043292:	687a      	ldr	r2, [r7, #4]
 8043294:	68d2      	ldr	r2, [r2, #12]
 8043296:	4311      	orrs	r1, r2
 8043298:	687a      	ldr	r2, [r7, #4]
 804329a:	6812      	ldr	r2, [r2, #0]
 804329c:	430b      	orrs	r3, r1
 804329e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80432a0:	687b      	ldr	r3, [r7, #4]
 80432a2:	681b      	ldr	r3, [r3, #0]
 80432a4:	68db      	ldr	r3, [r3, #12]
 80432a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80432aa:	687b      	ldr	r3, [r7, #4]
 80432ac:	695a      	ldr	r2, [r3, #20]
 80432ae:	687b      	ldr	r3, [r7, #4]
 80432b0:	699b      	ldr	r3, [r3, #24]
 80432b2:	431a      	orrs	r2, r3
 80432b4:	687b      	ldr	r3, [r7, #4]
 80432b6:	681b      	ldr	r3, [r3, #0]
 80432b8:	430a      	orrs	r2, r1
 80432ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80432bc:	687b      	ldr	r3, [r7, #4]
 80432be:	681b      	ldr	r3, [r3, #0]
 80432c0:	681a      	ldr	r2, [r3, #0]
 80432c2:	687b      	ldr	r3, [r7, #4]
 80432c4:	681b      	ldr	r3, [r3, #0]
 80432c6:	f042 0201 	orr.w	r2, r2, #1
 80432ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80432cc:	687b      	ldr	r3, [r7, #4]
 80432ce:	2200      	movs	r2, #0
 80432d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80432d2:	687b      	ldr	r3, [r7, #4]
 80432d4:	2220      	movs	r2, #32
 80432d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80432da:	687b      	ldr	r3, [r7, #4]
 80432dc:	2200      	movs	r2, #0
 80432de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80432e0:	687b      	ldr	r3, [r7, #4]
 80432e2:	2200      	movs	r2, #0
 80432e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80432e8:	2300      	movs	r3, #0
}
 80432ea:	4618      	mov	r0, r3
 80432ec:	3710      	adds	r7, #16
 80432ee:	46bd      	mov	sp, r7
 80432f0:	bd80      	pop	{r7, pc}
 80432f2:	bf00      	nop
 80432f4:	000186a0 	.word	0x000186a0
 80432f8:	001e847f 	.word	0x001e847f
 80432fc:	003d08ff 	.word	0x003d08ff
 8043300:	431bde83 	.word	0x431bde83
 8043304:	10624dd3 	.word	0x10624dd3

08043308 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8043308:	b580      	push	{r7, lr}
 804330a:	b088      	sub	sp, #32
 804330c:	af02      	add	r7, sp, #8
 804330e:	60f8      	str	r0, [r7, #12]
 8043310:	607a      	str	r2, [r7, #4]
 8043312:	461a      	mov	r2, r3
 8043314:	460b      	mov	r3, r1
 8043316:	817b      	strh	r3, [r7, #10]
 8043318:	4613      	mov	r3, r2
 804331a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 804331c:	f7ff fbf2 	bl	8042b04 <HAL_GetTick>
 8043320:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8043322:	68fb      	ldr	r3, [r7, #12]
 8043324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8043328:	b2db      	uxtb	r3, r3
 804332a:	2b20      	cmp	r3, #32
 804332c:	f040 80e0 	bne.w	80434f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8043330:	697b      	ldr	r3, [r7, #20]
 8043332:	9300      	str	r3, [sp, #0]
 8043334:	2319      	movs	r3, #25
 8043336:	2201      	movs	r2, #1
 8043338:	4970      	ldr	r1, [pc, #448]	; (80434fc <HAL_I2C_Master_Transmit+0x1f4>)
 804333a:	68f8      	ldr	r0, [r7, #12]
 804333c:	f000 fc58 	bl	8043bf0 <I2C_WaitOnFlagUntilTimeout>
 8043340:	4603      	mov	r3, r0
 8043342:	2b00      	cmp	r3, #0
 8043344:	d001      	beq.n	804334a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8043346:	2302      	movs	r3, #2
 8043348:	e0d3      	b.n	80434f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 804334a:	68fb      	ldr	r3, [r7, #12]
 804334c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8043350:	2b01      	cmp	r3, #1
 8043352:	d101      	bne.n	8043358 <HAL_I2C_Master_Transmit+0x50>
 8043354:	2302      	movs	r3, #2
 8043356:	e0cc      	b.n	80434f2 <HAL_I2C_Master_Transmit+0x1ea>
 8043358:	68fb      	ldr	r3, [r7, #12]
 804335a:	2201      	movs	r2, #1
 804335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8043360:	68fb      	ldr	r3, [r7, #12]
 8043362:	681b      	ldr	r3, [r3, #0]
 8043364:	681b      	ldr	r3, [r3, #0]
 8043366:	f003 0301 	and.w	r3, r3, #1
 804336a:	2b01      	cmp	r3, #1
 804336c:	d007      	beq.n	804337e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 804336e:	68fb      	ldr	r3, [r7, #12]
 8043370:	681b      	ldr	r3, [r3, #0]
 8043372:	681a      	ldr	r2, [r3, #0]
 8043374:	68fb      	ldr	r3, [r7, #12]
 8043376:	681b      	ldr	r3, [r3, #0]
 8043378:	f042 0201 	orr.w	r2, r2, #1
 804337c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 804337e:	68fb      	ldr	r3, [r7, #12]
 8043380:	681b      	ldr	r3, [r3, #0]
 8043382:	681a      	ldr	r2, [r3, #0]
 8043384:	68fb      	ldr	r3, [r7, #12]
 8043386:	681b      	ldr	r3, [r3, #0]
 8043388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 804338c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 804338e:	68fb      	ldr	r3, [r7, #12]
 8043390:	2221      	movs	r2, #33	; 0x21
 8043392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8043396:	68fb      	ldr	r3, [r7, #12]
 8043398:	2210      	movs	r2, #16
 804339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 804339e:	68fb      	ldr	r3, [r7, #12]
 80433a0:	2200      	movs	r2, #0
 80433a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80433a4:	68fb      	ldr	r3, [r7, #12]
 80433a6:	687a      	ldr	r2, [r7, #4]
 80433a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80433aa:	68fb      	ldr	r3, [r7, #12]
 80433ac:	893a      	ldrh	r2, [r7, #8]
 80433ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80433b0:	68fb      	ldr	r3, [r7, #12]
 80433b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80433b4:	b29a      	uxth	r2, r3
 80433b6:	68fb      	ldr	r3, [r7, #12]
 80433b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80433ba:	68fb      	ldr	r3, [r7, #12]
 80433bc:	4a50      	ldr	r2, [pc, #320]	; (8043500 <HAL_I2C_Master_Transmit+0x1f8>)
 80433be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80433c0:	8979      	ldrh	r1, [r7, #10]
 80433c2:	697b      	ldr	r3, [r7, #20]
 80433c4:	6a3a      	ldr	r2, [r7, #32]
 80433c6:	68f8      	ldr	r0, [r7, #12]
 80433c8:	f000 fac2 	bl	8043950 <I2C_MasterRequestWrite>
 80433cc:	4603      	mov	r3, r0
 80433ce:	2b00      	cmp	r3, #0
 80433d0:	d001      	beq.n	80433d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80433d2:	2301      	movs	r3, #1
 80433d4:	e08d      	b.n	80434f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80433d6:	2300      	movs	r3, #0
 80433d8:	613b      	str	r3, [r7, #16]
 80433da:	68fb      	ldr	r3, [r7, #12]
 80433dc:	681b      	ldr	r3, [r3, #0]
 80433de:	695b      	ldr	r3, [r3, #20]
 80433e0:	613b      	str	r3, [r7, #16]
 80433e2:	68fb      	ldr	r3, [r7, #12]
 80433e4:	681b      	ldr	r3, [r3, #0]
 80433e6:	699b      	ldr	r3, [r3, #24]
 80433e8:	613b      	str	r3, [r7, #16]
 80433ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80433ec:	e066      	b.n	80434bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80433ee:	697a      	ldr	r2, [r7, #20]
 80433f0:	6a39      	ldr	r1, [r7, #32]
 80433f2:	68f8      	ldr	r0, [r7, #12]
 80433f4:	f000 fcd2 	bl	8043d9c <I2C_WaitOnTXEFlagUntilTimeout>
 80433f8:	4603      	mov	r3, r0
 80433fa:	2b00      	cmp	r3, #0
 80433fc:	d00d      	beq.n	804341a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80433fe:	68fb      	ldr	r3, [r7, #12]
 8043400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043402:	2b04      	cmp	r3, #4
 8043404:	d107      	bne.n	8043416 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8043406:	68fb      	ldr	r3, [r7, #12]
 8043408:	681b      	ldr	r3, [r3, #0]
 804340a:	681a      	ldr	r2, [r3, #0]
 804340c:	68fb      	ldr	r3, [r7, #12]
 804340e:	681b      	ldr	r3, [r3, #0]
 8043410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8043416:	2301      	movs	r3, #1
 8043418:	e06b      	b.n	80434f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 804341a:	68fb      	ldr	r3, [r7, #12]
 804341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804341e:	781a      	ldrb	r2, [r3, #0]
 8043420:	68fb      	ldr	r3, [r7, #12]
 8043422:	681b      	ldr	r3, [r3, #0]
 8043424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8043426:	68fb      	ldr	r3, [r7, #12]
 8043428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804342a:	1c5a      	adds	r2, r3, #1
 804342c:	68fb      	ldr	r3, [r7, #12]
 804342e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8043430:	68fb      	ldr	r3, [r7, #12]
 8043432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8043434:	b29b      	uxth	r3, r3
 8043436:	3b01      	subs	r3, #1
 8043438:	b29a      	uxth	r2, r3
 804343a:	68fb      	ldr	r3, [r7, #12]
 804343c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 804343e:	68fb      	ldr	r3, [r7, #12]
 8043440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043442:	3b01      	subs	r3, #1
 8043444:	b29a      	uxth	r2, r3
 8043446:	68fb      	ldr	r3, [r7, #12]
 8043448:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 804344a:	68fb      	ldr	r3, [r7, #12]
 804344c:	681b      	ldr	r3, [r3, #0]
 804344e:	695b      	ldr	r3, [r3, #20]
 8043450:	f003 0304 	and.w	r3, r3, #4
 8043454:	2b04      	cmp	r3, #4
 8043456:	d11b      	bne.n	8043490 <HAL_I2C_Master_Transmit+0x188>
 8043458:	68fb      	ldr	r3, [r7, #12]
 804345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804345c:	2b00      	cmp	r3, #0
 804345e:	d017      	beq.n	8043490 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8043460:	68fb      	ldr	r3, [r7, #12]
 8043462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043464:	781a      	ldrb	r2, [r3, #0]
 8043466:	68fb      	ldr	r3, [r7, #12]
 8043468:	681b      	ldr	r3, [r3, #0]
 804346a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 804346c:	68fb      	ldr	r3, [r7, #12]
 804346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043470:	1c5a      	adds	r2, r3, #1
 8043472:	68fb      	ldr	r3, [r7, #12]
 8043474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8043476:	68fb      	ldr	r3, [r7, #12]
 8043478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804347a:	b29b      	uxth	r3, r3
 804347c:	3b01      	subs	r3, #1
 804347e:	b29a      	uxth	r2, r3
 8043480:	68fb      	ldr	r3, [r7, #12]
 8043482:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8043484:	68fb      	ldr	r3, [r7, #12]
 8043486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043488:	3b01      	subs	r3, #1
 804348a:	b29a      	uxth	r2, r3
 804348c:	68fb      	ldr	r3, [r7, #12]
 804348e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8043490:	697a      	ldr	r2, [r7, #20]
 8043492:	6a39      	ldr	r1, [r7, #32]
 8043494:	68f8      	ldr	r0, [r7, #12]
 8043496:	f000 fcc2 	bl	8043e1e <I2C_WaitOnBTFFlagUntilTimeout>
 804349a:	4603      	mov	r3, r0
 804349c:	2b00      	cmp	r3, #0
 804349e:	d00d      	beq.n	80434bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80434a0:	68fb      	ldr	r3, [r7, #12]
 80434a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80434a4:	2b04      	cmp	r3, #4
 80434a6:	d107      	bne.n	80434b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80434a8:	68fb      	ldr	r3, [r7, #12]
 80434aa:	681b      	ldr	r3, [r3, #0]
 80434ac:	681a      	ldr	r2, [r3, #0]
 80434ae:	68fb      	ldr	r3, [r7, #12]
 80434b0:	681b      	ldr	r3, [r3, #0]
 80434b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80434b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80434b8:	2301      	movs	r3, #1
 80434ba:	e01a      	b.n	80434f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80434bc:	68fb      	ldr	r3, [r7, #12]
 80434be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80434c0:	2b00      	cmp	r3, #0
 80434c2:	d194      	bne.n	80433ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80434c4:	68fb      	ldr	r3, [r7, #12]
 80434c6:	681b      	ldr	r3, [r3, #0]
 80434c8:	681a      	ldr	r2, [r3, #0]
 80434ca:	68fb      	ldr	r3, [r7, #12]
 80434cc:	681b      	ldr	r3, [r3, #0]
 80434ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80434d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80434d4:	68fb      	ldr	r3, [r7, #12]
 80434d6:	2220      	movs	r2, #32
 80434d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80434dc:	68fb      	ldr	r3, [r7, #12]
 80434de:	2200      	movs	r2, #0
 80434e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80434e4:	68fb      	ldr	r3, [r7, #12]
 80434e6:	2200      	movs	r2, #0
 80434e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80434ec:	2300      	movs	r3, #0
 80434ee:	e000      	b.n	80434f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80434f0:	2302      	movs	r3, #2
  }
}
 80434f2:	4618      	mov	r0, r3
 80434f4:	3718      	adds	r7, #24
 80434f6:	46bd      	mov	sp, r7
 80434f8:	bd80      	pop	{r7, pc}
 80434fa:	bf00      	nop
 80434fc:	00100002 	.word	0x00100002
 8043500:	ffff0000 	.word	0xffff0000

08043504 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8043504:	b580      	push	{r7, lr}
 8043506:	b08c      	sub	sp, #48	; 0x30
 8043508:	af02      	add	r7, sp, #8
 804350a:	60f8      	str	r0, [r7, #12]
 804350c:	607a      	str	r2, [r7, #4]
 804350e:	461a      	mov	r2, r3
 8043510:	460b      	mov	r3, r1
 8043512:	817b      	strh	r3, [r7, #10]
 8043514:	4613      	mov	r3, r2
 8043516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8043518:	f7ff faf4 	bl	8042b04 <HAL_GetTick>
 804351c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 804351e:	68fb      	ldr	r3, [r7, #12]
 8043520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8043524:	b2db      	uxtb	r3, r3
 8043526:	2b20      	cmp	r3, #32
 8043528:	f040 820b 	bne.w	8043942 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 804352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804352e:	9300      	str	r3, [sp, #0]
 8043530:	2319      	movs	r3, #25
 8043532:	2201      	movs	r2, #1
 8043534:	497c      	ldr	r1, [pc, #496]	; (8043728 <HAL_I2C_Master_Receive+0x224>)
 8043536:	68f8      	ldr	r0, [r7, #12]
 8043538:	f000 fb5a 	bl	8043bf0 <I2C_WaitOnFlagUntilTimeout>
 804353c:	4603      	mov	r3, r0
 804353e:	2b00      	cmp	r3, #0
 8043540:	d001      	beq.n	8043546 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8043542:	2302      	movs	r3, #2
 8043544:	e1fe      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8043546:	68fb      	ldr	r3, [r7, #12]
 8043548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804354c:	2b01      	cmp	r3, #1
 804354e:	d101      	bne.n	8043554 <HAL_I2C_Master_Receive+0x50>
 8043550:	2302      	movs	r3, #2
 8043552:	e1f7      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
 8043554:	68fb      	ldr	r3, [r7, #12]
 8043556:	2201      	movs	r2, #1
 8043558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 804355c:	68fb      	ldr	r3, [r7, #12]
 804355e:	681b      	ldr	r3, [r3, #0]
 8043560:	681b      	ldr	r3, [r3, #0]
 8043562:	f003 0301 	and.w	r3, r3, #1
 8043566:	2b01      	cmp	r3, #1
 8043568:	d007      	beq.n	804357a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 804356a:	68fb      	ldr	r3, [r7, #12]
 804356c:	681b      	ldr	r3, [r3, #0]
 804356e:	681a      	ldr	r2, [r3, #0]
 8043570:	68fb      	ldr	r3, [r7, #12]
 8043572:	681b      	ldr	r3, [r3, #0]
 8043574:	f042 0201 	orr.w	r2, r2, #1
 8043578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 804357a:	68fb      	ldr	r3, [r7, #12]
 804357c:	681b      	ldr	r3, [r3, #0]
 804357e:	681a      	ldr	r2, [r3, #0]
 8043580:	68fb      	ldr	r3, [r7, #12]
 8043582:	681b      	ldr	r3, [r3, #0]
 8043584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 804358a:	68fb      	ldr	r3, [r7, #12]
 804358c:	2222      	movs	r2, #34	; 0x22
 804358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8043592:	68fb      	ldr	r3, [r7, #12]
 8043594:	2210      	movs	r2, #16
 8043596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 804359a:	68fb      	ldr	r3, [r7, #12]
 804359c:	2200      	movs	r2, #0
 804359e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80435a0:	68fb      	ldr	r3, [r7, #12]
 80435a2:	687a      	ldr	r2, [r7, #4]
 80435a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80435a6:	68fb      	ldr	r3, [r7, #12]
 80435a8:	893a      	ldrh	r2, [r7, #8]
 80435aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80435ac:	68fb      	ldr	r3, [r7, #12]
 80435ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80435b0:	b29a      	uxth	r2, r3
 80435b2:	68fb      	ldr	r3, [r7, #12]
 80435b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80435b6:	68fb      	ldr	r3, [r7, #12]
 80435b8:	4a5c      	ldr	r2, [pc, #368]	; (804372c <HAL_I2C_Master_Receive+0x228>)
 80435ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80435bc:	8979      	ldrh	r1, [r7, #10]
 80435be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80435c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80435c2:	68f8      	ldr	r0, [r7, #12]
 80435c4:	f000 fa46 	bl	8043a54 <I2C_MasterRequestRead>
 80435c8:	4603      	mov	r3, r0
 80435ca:	2b00      	cmp	r3, #0
 80435cc:	d001      	beq.n	80435d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80435ce:	2301      	movs	r3, #1
 80435d0:	e1b8      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80435d2:	68fb      	ldr	r3, [r7, #12]
 80435d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80435d6:	2b00      	cmp	r3, #0
 80435d8:	d113      	bne.n	8043602 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80435da:	2300      	movs	r3, #0
 80435dc:	623b      	str	r3, [r7, #32]
 80435de:	68fb      	ldr	r3, [r7, #12]
 80435e0:	681b      	ldr	r3, [r3, #0]
 80435e2:	695b      	ldr	r3, [r3, #20]
 80435e4:	623b      	str	r3, [r7, #32]
 80435e6:	68fb      	ldr	r3, [r7, #12]
 80435e8:	681b      	ldr	r3, [r3, #0]
 80435ea:	699b      	ldr	r3, [r3, #24]
 80435ec:	623b      	str	r3, [r7, #32]
 80435ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80435f0:	68fb      	ldr	r3, [r7, #12]
 80435f2:	681b      	ldr	r3, [r3, #0]
 80435f4:	681a      	ldr	r2, [r3, #0]
 80435f6:	68fb      	ldr	r3, [r7, #12]
 80435f8:	681b      	ldr	r3, [r3, #0]
 80435fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80435fe:	601a      	str	r2, [r3, #0]
 8043600:	e18c      	b.n	804391c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8043602:	68fb      	ldr	r3, [r7, #12]
 8043604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043606:	2b01      	cmp	r3, #1
 8043608:	d11b      	bne.n	8043642 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 804360a:	68fb      	ldr	r3, [r7, #12]
 804360c:	681b      	ldr	r3, [r3, #0]
 804360e:	681a      	ldr	r2, [r3, #0]
 8043610:	68fb      	ldr	r3, [r7, #12]
 8043612:	681b      	ldr	r3, [r3, #0]
 8043614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804361a:	2300      	movs	r3, #0
 804361c:	61fb      	str	r3, [r7, #28]
 804361e:	68fb      	ldr	r3, [r7, #12]
 8043620:	681b      	ldr	r3, [r3, #0]
 8043622:	695b      	ldr	r3, [r3, #20]
 8043624:	61fb      	str	r3, [r7, #28]
 8043626:	68fb      	ldr	r3, [r7, #12]
 8043628:	681b      	ldr	r3, [r3, #0]
 804362a:	699b      	ldr	r3, [r3, #24]
 804362c:	61fb      	str	r3, [r7, #28]
 804362e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8043630:	68fb      	ldr	r3, [r7, #12]
 8043632:	681b      	ldr	r3, [r3, #0]
 8043634:	681a      	ldr	r2, [r3, #0]
 8043636:	68fb      	ldr	r3, [r7, #12]
 8043638:	681b      	ldr	r3, [r3, #0]
 804363a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804363e:	601a      	str	r2, [r3, #0]
 8043640:	e16c      	b.n	804391c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8043642:	68fb      	ldr	r3, [r7, #12]
 8043644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043646:	2b02      	cmp	r3, #2
 8043648:	d11b      	bne.n	8043682 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 804364a:	68fb      	ldr	r3, [r7, #12]
 804364c:	681b      	ldr	r3, [r3, #0]
 804364e:	681a      	ldr	r2, [r3, #0]
 8043650:	68fb      	ldr	r3, [r7, #12]
 8043652:	681b      	ldr	r3, [r3, #0]
 8043654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043658:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 804365a:	68fb      	ldr	r3, [r7, #12]
 804365c:	681b      	ldr	r3, [r3, #0]
 804365e:	681a      	ldr	r2, [r3, #0]
 8043660:	68fb      	ldr	r3, [r7, #12]
 8043662:	681b      	ldr	r3, [r3, #0]
 8043664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8043668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804366a:	2300      	movs	r3, #0
 804366c:	61bb      	str	r3, [r7, #24]
 804366e:	68fb      	ldr	r3, [r7, #12]
 8043670:	681b      	ldr	r3, [r3, #0]
 8043672:	695b      	ldr	r3, [r3, #20]
 8043674:	61bb      	str	r3, [r7, #24]
 8043676:	68fb      	ldr	r3, [r7, #12]
 8043678:	681b      	ldr	r3, [r3, #0]
 804367a:	699b      	ldr	r3, [r3, #24]
 804367c:	61bb      	str	r3, [r7, #24]
 804367e:	69bb      	ldr	r3, [r7, #24]
 8043680:	e14c      	b.n	804391c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8043682:	68fb      	ldr	r3, [r7, #12]
 8043684:	681b      	ldr	r3, [r3, #0]
 8043686:	681a      	ldr	r2, [r3, #0]
 8043688:	68fb      	ldr	r3, [r7, #12]
 804368a:	681b      	ldr	r3, [r3, #0]
 804368c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8043690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8043692:	2300      	movs	r3, #0
 8043694:	617b      	str	r3, [r7, #20]
 8043696:	68fb      	ldr	r3, [r7, #12]
 8043698:	681b      	ldr	r3, [r3, #0]
 804369a:	695b      	ldr	r3, [r3, #20]
 804369c:	617b      	str	r3, [r7, #20]
 804369e:	68fb      	ldr	r3, [r7, #12]
 80436a0:	681b      	ldr	r3, [r3, #0]
 80436a2:	699b      	ldr	r3, [r3, #24]
 80436a4:	617b      	str	r3, [r7, #20]
 80436a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80436a8:	e138      	b.n	804391c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80436aa:	68fb      	ldr	r3, [r7, #12]
 80436ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80436ae:	2b03      	cmp	r3, #3
 80436b0:	f200 80f1 	bhi.w	8043896 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80436b4:	68fb      	ldr	r3, [r7, #12]
 80436b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80436b8:	2b01      	cmp	r3, #1
 80436ba:	d123      	bne.n	8043704 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80436bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80436be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80436c0:	68f8      	ldr	r0, [r7, #12]
 80436c2:	f000 fbed 	bl	8043ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80436c6:	4603      	mov	r3, r0
 80436c8:	2b00      	cmp	r3, #0
 80436ca:	d001      	beq.n	80436d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80436cc:	2301      	movs	r3, #1
 80436ce:	e139      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80436d0:	68fb      	ldr	r3, [r7, #12]
 80436d2:	681b      	ldr	r3, [r3, #0]
 80436d4:	691a      	ldr	r2, [r3, #16]
 80436d6:	68fb      	ldr	r3, [r7, #12]
 80436d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80436da:	b2d2      	uxtb	r2, r2
 80436dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80436de:	68fb      	ldr	r3, [r7, #12]
 80436e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80436e2:	1c5a      	adds	r2, r3, #1
 80436e4:	68fb      	ldr	r3, [r7, #12]
 80436e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80436e8:	68fb      	ldr	r3, [r7, #12]
 80436ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80436ec:	3b01      	subs	r3, #1
 80436ee:	b29a      	uxth	r2, r3
 80436f0:	68fb      	ldr	r3, [r7, #12]
 80436f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80436f4:	68fb      	ldr	r3, [r7, #12]
 80436f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80436f8:	b29b      	uxth	r3, r3
 80436fa:	3b01      	subs	r3, #1
 80436fc:	b29a      	uxth	r2, r3
 80436fe:	68fb      	ldr	r3, [r7, #12]
 8043700:	855a      	strh	r2, [r3, #42]	; 0x2a
 8043702:	e10b      	b.n	804391c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8043704:	68fb      	ldr	r3, [r7, #12]
 8043706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043708:	2b02      	cmp	r3, #2
 804370a:	d14e      	bne.n	80437aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 804370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804370e:	9300      	str	r3, [sp, #0]
 8043710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043712:	2200      	movs	r2, #0
 8043714:	4906      	ldr	r1, [pc, #24]	; (8043730 <HAL_I2C_Master_Receive+0x22c>)
 8043716:	68f8      	ldr	r0, [r7, #12]
 8043718:	f000 fa6a 	bl	8043bf0 <I2C_WaitOnFlagUntilTimeout>
 804371c:	4603      	mov	r3, r0
 804371e:	2b00      	cmp	r3, #0
 8043720:	d008      	beq.n	8043734 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8043722:	2301      	movs	r3, #1
 8043724:	e10e      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
 8043726:	bf00      	nop
 8043728:	00100002 	.word	0x00100002
 804372c:	ffff0000 	.word	0xffff0000
 8043730:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8043734:	68fb      	ldr	r3, [r7, #12]
 8043736:	681b      	ldr	r3, [r3, #0]
 8043738:	681a      	ldr	r2, [r3, #0]
 804373a:	68fb      	ldr	r3, [r7, #12]
 804373c:	681b      	ldr	r3, [r3, #0]
 804373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8043744:	68fb      	ldr	r3, [r7, #12]
 8043746:	681b      	ldr	r3, [r3, #0]
 8043748:	691a      	ldr	r2, [r3, #16]
 804374a:	68fb      	ldr	r3, [r7, #12]
 804374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804374e:	b2d2      	uxtb	r2, r2
 8043750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8043752:	68fb      	ldr	r3, [r7, #12]
 8043754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043756:	1c5a      	adds	r2, r3, #1
 8043758:	68fb      	ldr	r3, [r7, #12]
 804375a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 804375c:	68fb      	ldr	r3, [r7, #12]
 804375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043760:	3b01      	subs	r3, #1
 8043762:	b29a      	uxth	r2, r3
 8043764:	68fb      	ldr	r3, [r7, #12]
 8043766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8043768:	68fb      	ldr	r3, [r7, #12]
 804376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804376c:	b29b      	uxth	r3, r3
 804376e:	3b01      	subs	r3, #1
 8043770:	b29a      	uxth	r2, r3
 8043772:	68fb      	ldr	r3, [r7, #12]
 8043774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8043776:	68fb      	ldr	r3, [r7, #12]
 8043778:	681b      	ldr	r3, [r3, #0]
 804377a:	691a      	ldr	r2, [r3, #16]
 804377c:	68fb      	ldr	r3, [r7, #12]
 804377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043780:	b2d2      	uxtb	r2, r2
 8043782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8043784:	68fb      	ldr	r3, [r7, #12]
 8043786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043788:	1c5a      	adds	r2, r3, #1
 804378a:	68fb      	ldr	r3, [r7, #12]
 804378c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 804378e:	68fb      	ldr	r3, [r7, #12]
 8043790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043792:	3b01      	subs	r3, #1
 8043794:	b29a      	uxth	r2, r3
 8043796:	68fb      	ldr	r3, [r7, #12]
 8043798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 804379a:	68fb      	ldr	r3, [r7, #12]
 804379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804379e:	b29b      	uxth	r3, r3
 80437a0:	3b01      	subs	r3, #1
 80437a2:	b29a      	uxth	r2, r3
 80437a4:	68fb      	ldr	r3, [r7, #12]
 80437a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80437a8:	e0b8      	b.n	804391c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80437aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80437ac:	9300      	str	r3, [sp, #0]
 80437ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80437b0:	2200      	movs	r2, #0
 80437b2:	4966      	ldr	r1, [pc, #408]	; (804394c <HAL_I2C_Master_Receive+0x448>)
 80437b4:	68f8      	ldr	r0, [r7, #12]
 80437b6:	f000 fa1b 	bl	8043bf0 <I2C_WaitOnFlagUntilTimeout>
 80437ba:	4603      	mov	r3, r0
 80437bc:	2b00      	cmp	r3, #0
 80437be:	d001      	beq.n	80437c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80437c0:	2301      	movs	r3, #1
 80437c2:	e0bf      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80437c4:	68fb      	ldr	r3, [r7, #12]
 80437c6:	681b      	ldr	r3, [r3, #0]
 80437c8:	681a      	ldr	r2, [r3, #0]
 80437ca:	68fb      	ldr	r3, [r7, #12]
 80437cc:	681b      	ldr	r3, [r3, #0]
 80437ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80437d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80437d4:	68fb      	ldr	r3, [r7, #12]
 80437d6:	681b      	ldr	r3, [r3, #0]
 80437d8:	691a      	ldr	r2, [r3, #16]
 80437da:	68fb      	ldr	r3, [r7, #12]
 80437dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80437de:	b2d2      	uxtb	r2, r2
 80437e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80437e2:	68fb      	ldr	r3, [r7, #12]
 80437e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80437e6:	1c5a      	adds	r2, r3, #1
 80437e8:	68fb      	ldr	r3, [r7, #12]
 80437ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80437ec:	68fb      	ldr	r3, [r7, #12]
 80437ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80437f0:	3b01      	subs	r3, #1
 80437f2:	b29a      	uxth	r2, r3
 80437f4:	68fb      	ldr	r3, [r7, #12]
 80437f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80437f8:	68fb      	ldr	r3, [r7, #12]
 80437fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80437fc:	b29b      	uxth	r3, r3
 80437fe:	3b01      	subs	r3, #1
 8043800:	b29a      	uxth	r2, r3
 8043802:	68fb      	ldr	r3, [r7, #12]
 8043804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8043806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043808:	9300      	str	r3, [sp, #0]
 804380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804380c:	2200      	movs	r2, #0
 804380e:	494f      	ldr	r1, [pc, #316]	; (804394c <HAL_I2C_Master_Receive+0x448>)
 8043810:	68f8      	ldr	r0, [r7, #12]
 8043812:	f000 f9ed 	bl	8043bf0 <I2C_WaitOnFlagUntilTimeout>
 8043816:	4603      	mov	r3, r0
 8043818:	2b00      	cmp	r3, #0
 804381a:	d001      	beq.n	8043820 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 804381c:	2301      	movs	r3, #1
 804381e:	e091      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8043820:	68fb      	ldr	r3, [r7, #12]
 8043822:	681b      	ldr	r3, [r3, #0]
 8043824:	681a      	ldr	r2, [r3, #0]
 8043826:	68fb      	ldr	r3, [r7, #12]
 8043828:	681b      	ldr	r3, [r3, #0]
 804382a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804382e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8043830:	68fb      	ldr	r3, [r7, #12]
 8043832:	681b      	ldr	r3, [r3, #0]
 8043834:	691a      	ldr	r2, [r3, #16]
 8043836:	68fb      	ldr	r3, [r7, #12]
 8043838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804383a:	b2d2      	uxtb	r2, r2
 804383c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 804383e:	68fb      	ldr	r3, [r7, #12]
 8043840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043842:	1c5a      	adds	r2, r3, #1
 8043844:	68fb      	ldr	r3, [r7, #12]
 8043846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8043848:	68fb      	ldr	r3, [r7, #12]
 804384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804384c:	3b01      	subs	r3, #1
 804384e:	b29a      	uxth	r2, r3
 8043850:	68fb      	ldr	r3, [r7, #12]
 8043852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8043854:	68fb      	ldr	r3, [r7, #12]
 8043856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8043858:	b29b      	uxth	r3, r3
 804385a:	3b01      	subs	r3, #1
 804385c:	b29a      	uxth	r2, r3
 804385e:	68fb      	ldr	r3, [r7, #12]
 8043860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8043862:	68fb      	ldr	r3, [r7, #12]
 8043864:	681b      	ldr	r3, [r3, #0]
 8043866:	691a      	ldr	r2, [r3, #16]
 8043868:	68fb      	ldr	r3, [r7, #12]
 804386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804386c:	b2d2      	uxtb	r2, r2
 804386e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8043870:	68fb      	ldr	r3, [r7, #12]
 8043872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043874:	1c5a      	adds	r2, r3, #1
 8043876:	68fb      	ldr	r3, [r7, #12]
 8043878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 804387a:	68fb      	ldr	r3, [r7, #12]
 804387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804387e:	3b01      	subs	r3, #1
 8043880:	b29a      	uxth	r2, r3
 8043882:	68fb      	ldr	r3, [r7, #12]
 8043884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8043886:	68fb      	ldr	r3, [r7, #12]
 8043888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804388a:	b29b      	uxth	r3, r3
 804388c:	3b01      	subs	r3, #1
 804388e:	b29a      	uxth	r2, r3
 8043890:	68fb      	ldr	r3, [r7, #12]
 8043892:	855a      	strh	r2, [r3, #42]	; 0x2a
 8043894:	e042      	b.n	804391c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8043896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8043898:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804389a:	68f8      	ldr	r0, [r7, #12]
 804389c:	f000 fb00 	bl	8043ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80438a0:	4603      	mov	r3, r0
 80438a2:	2b00      	cmp	r3, #0
 80438a4:	d001      	beq.n	80438aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80438a6:	2301      	movs	r3, #1
 80438a8:	e04c      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80438aa:	68fb      	ldr	r3, [r7, #12]
 80438ac:	681b      	ldr	r3, [r3, #0]
 80438ae:	691a      	ldr	r2, [r3, #16]
 80438b0:	68fb      	ldr	r3, [r7, #12]
 80438b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80438b4:	b2d2      	uxtb	r2, r2
 80438b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80438b8:	68fb      	ldr	r3, [r7, #12]
 80438ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80438bc:	1c5a      	adds	r2, r3, #1
 80438be:	68fb      	ldr	r3, [r7, #12]
 80438c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80438c2:	68fb      	ldr	r3, [r7, #12]
 80438c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80438c6:	3b01      	subs	r3, #1
 80438c8:	b29a      	uxth	r2, r3
 80438ca:	68fb      	ldr	r3, [r7, #12]
 80438cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80438ce:	68fb      	ldr	r3, [r7, #12]
 80438d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80438d2:	b29b      	uxth	r3, r3
 80438d4:	3b01      	subs	r3, #1
 80438d6:	b29a      	uxth	r2, r3
 80438d8:	68fb      	ldr	r3, [r7, #12]
 80438da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80438dc:	68fb      	ldr	r3, [r7, #12]
 80438de:	681b      	ldr	r3, [r3, #0]
 80438e0:	695b      	ldr	r3, [r3, #20]
 80438e2:	f003 0304 	and.w	r3, r3, #4
 80438e6:	2b04      	cmp	r3, #4
 80438e8:	d118      	bne.n	804391c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80438ea:	68fb      	ldr	r3, [r7, #12]
 80438ec:	681b      	ldr	r3, [r3, #0]
 80438ee:	691a      	ldr	r2, [r3, #16]
 80438f0:	68fb      	ldr	r3, [r7, #12]
 80438f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80438f4:	b2d2      	uxtb	r2, r2
 80438f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80438f8:	68fb      	ldr	r3, [r7, #12]
 80438fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80438fc:	1c5a      	adds	r2, r3, #1
 80438fe:	68fb      	ldr	r3, [r7, #12]
 8043900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8043902:	68fb      	ldr	r3, [r7, #12]
 8043904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043906:	3b01      	subs	r3, #1
 8043908:	b29a      	uxth	r2, r3
 804390a:	68fb      	ldr	r3, [r7, #12]
 804390c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 804390e:	68fb      	ldr	r3, [r7, #12]
 8043910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8043912:	b29b      	uxth	r3, r3
 8043914:	3b01      	subs	r3, #1
 8043916:	b29a      	uxth	r2, r3
 8043918:	68fb      	ldr	r3, [r7, #12]
 804391a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 804391c:	68fb      	ldr	r3, [r7, #12]
 804391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8043920:	2b00      	cmp	r3, #0
 8043922:	f47f aec2 	bne.w	80436aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8043926:	68fb      	ldr	r3, [r7, #12]
 8043928:	2220      	movs	r2, #32
 804392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 804392e:	68fb      	ldr	r3, [r7, #12]
 8043930:	2200      	movs	r2, #0
 8043932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8043936:	68fb      	ldr	r3, [r7, #12]
 8043938:	2200      	movs	r2, #0
 804393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 804393e:	2300      	movs	r3, #0
 8043940:	e000      	b.n	8043944 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8043942:	2302      	movs	r3, #2
  }
}
 8043944:	4618      	mov	r0, r3
 8043946:	3728      	adds	r7, #40	; 0x28
 8043948:	46bd      	mov	sp, r7
 804394a:	bd80      	pop	{r7, pc}
 804394c:	00010004 	.word	0x00010004

08043950 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8043950:	b580      	push	{r7, lr}
 8043952:	b088      	sub	sp, #32
 8043954:	af02      	add	r7, sp, #8
 8043956:	60f8      	str	r0, [r7, #12]
 8043958:	607a      	str	r2, [r7, #4]
 804395a:	603b      	str	r3, [r7, #0]
 804395c:	460b      	mov	r3, r1
 804395e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8043960:	68fb      	ldr	r3, [r7, #12]
 8043962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043964:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8043966:	697b      	ldr	r3, [r7, #20]
 8043968:	2b08      	cmp	r3, #8
 804396a:	d006      	beq.n	804397a <I2C_MasterRequestWrite+0x2a>
 804396c:	697b      	ldr	r3, [r7, #20]
 804396e:	2b01      	cmp	r3, #1
 8043970:	d003      	beq.n	804397a <I2C_MasterRequestWrite+0x2a>
 8043972:	697b      	ldr	r3, [r7, #20]
 8043974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8043978:	d108      	bne.n	804398c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 804397a:	68fb      	ldr	r3, [r7, #12]
 804397c:	681b      	ldr	r3, [r3, #0]
 804397e:	681a      	ldr	r2, [r3, #0]
 8043980:	68fb      	ldr	r3, [r7, #12]
 8043982:	681b      	ldr	r3, [r3, #0]
 8043984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8043988:	601a      	str	r2, [r3, #0]
 804398a:	e00b      	b.n	80439a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 804398c:	68fb      	ldr	r3, [r7, #12]
 804398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043990:	2b12      	cmp	r3, #18
 8043992:	d107      	bne.n	80439a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8043994:	68fb      	ldr	r3, [r7, #12]
 8043996:	681b      	ldr	r3, [r3, #0]
 8043998:	681a      	ldr	r2, [r3, #0]
 804399a:	68fb      	ldr	r3, [r7, #12]
 804399c:	681b      	ldr	r3, [r3, #0]
 804399e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80439a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80439a4:	683b      	ldr	r3, [r7, #0]
 80439a6:	9300      	str	r3, [sp, #0]
 80439a8:	687b      	ldr	r3, [r7, #4]
 80439aa:	2200      	movs	r2, #0
 80439ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80439b0:	68f8      	ldr	r0, [r7, #12]
 80439b2:	f000 f91d 	bl	8043bf0 <I2C_WaitOnFlagUntilTimeout>
 80439b6:	4603      	mov	r3, r0
 80439b8:	2b00      	cmp	r3, #0
 80439ba:	d00d      	beq.n	80439d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80439bc:	68fb      	ldr	r3, [r7, #12]
 80439be:	681b      	ldr	r3, [r3, #0]
 80439c0:	681b      	ldr	r3, [r3, #0]
 80439c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80439c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80439ca:	d103      	bne.n	80439d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80439cc:	68fb      	ldr	r3, [r7, #12]
 80439ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80439d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80439d4:	2303      	movs	r3, #3
 80439d6:	e035      	b.n	8043a44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80439d8:	68fb      	ldr	r3, [r7, #12]
 80439da:	691b      	ldr	r3, [r3, #16]
 80439dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80439e0:	d108      	bne.n	80439f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80439e2:	897b      	ldrh	r3, [r7, #10]
 80439e4:	b2db      	uxtb	r3, r3
 80439e6:	461a      	mov	r2, r3
 80439e8:	68fb      	ldr	r3, [r7, #12]
 80439ea:	681b      	ldr	r3, [r3, #0]
 80439ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80439f0:	611a      	str	r2, [r3, #16]
 80439f2:	e01b      	b.n	8043a2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80439f4:	897b      	ldrh	r3, [r7, #10]
 80439f6:	11db      	asrs	r3, r3, #7
 80439f8:	b2db      	uxtb	r3, r3
 80439fa:	f003 0306 	and.w	r3, r3, #6
 80439fe:	b2db      	uxtb	r3, r3
 8043a00:	f063 030f 	orn	r3, r3, #15
 8043a04:	b2da      	uxtb	r2, r3
 8043a06:	68fb      	ldr	r3, [r7, #12]
 8043a08:	681b      	ldr	r3, [r3, #0]
 8043a0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8043a0c:	683b      	ldr	r3, [r7, #0]
 8043a0e:	687a      	ldr	r2, [r7, #4]
 8043a10:	490e      	ldr	r1, [pc, #56]	; (8043a4c <I2C_MasterRequestWrite+0xfc>)
 8043a12:	68f8      	ldr	r0, [r7, #12]
 8043a14:	f000 f943 	bl	8043c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8043a18:	4603      	mov	r3, r0
 8043a1a:	2b00      	cmp	r3, #0
 8043a1c:	d001      	beq.n	8043a22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8043a1e:	2301      	movs	r3, #1
 8043a20:	e010      	b.n	8043a44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8043a22:	897b      	ldrh	r3, [r7, #10]
 8043a24:	b2da      	uxtb	r2, r3
 8043a26:	68fb      	ldr	r3, [r7, #12]
 8043a28:	681b      	ldr	r3, [r3, #0]
 8043a2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8043a2c:	683b      	ldr	r3, [r7, #0]
 8043a2e:	687a      	ldr	r2, [r7, #4]
 8043a30:	4907      	ldr	r1, [pc, #28]	; (8043a50 <I2C_MasterRequestWrite+0x100>)
 8043a32:	68f8      	ldr	r0, [r7, #12]
 8043a34:	f000 f933 	bl	8043c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8043a38:	4603      	mov	r3, r0
 8043a3a:	2b00      	cmp	r3, #0
 8043a3c:	d001      	beq.n	8043a42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8043a3e:	2301      	movs	r3, #1
 8043a40:	e000      	b.n	8043a44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8043a42:	2300      	movs	r3, #0
}
 8043a44:	4618      	mov	r0, r3
 8043a46:	3718      	adds	r7, #24
 8043a48:	46bd      	mov	sp, r7
 8043a4a:	bd80      	pop	{r7, pc}
 8043a4c:	00010008 	.word	0x00010008
 8043a50:	00010002 	.word	0x00010002

08043a54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8043a54:	b580      	push	{r7, lr}
 8043a56:	b088      	sub	sp, #32
 8043a58:	af02      	add	r7, sp, #8
 8043a5a:	60f8      	str	r0, [r7, #12]
 8043a5c:	607a      	str	r2, [r7, #4]
 8043a5e:	603b      	str	r3, [r7, #0]
 8043a60:	460b      	mov	r3, r1
 8043a62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8043a64:	68fb      	ldr	r3, [r7, #12]
 8043a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8043a6a:	68fb      	ldr	r3, [r7, #12]
 8043a6c:	681b      	ldr	r3, [r3, #0]
 8043a6e:	681a      	ldr	r2, [r3, #0]
 8043a70:	68fb      	ldr	r3, [r7, #12]
 8043a72:	681b      	ldr	r3, [r3, #0]
 8043a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8043a78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8043a7a:	697b      	ldr	r3, [r7, #20]
 8043a7c:	2b08      	cmp	r3, #8
 8043a7e:	d006      	beq.n	8043a8e <I2C_MasterRequestRead+0x3a>
 8043a80:	697b      	ldr	r3, [r7, #20]
 8043a82:	2b01      	cmp	r3, #1
 8043a84:	d003      	beq.n	8043a8e <I2C_MasterRequestRead+0x3a>
 8043a86:	697b      	ldr	r3, [r7, #20]
 8043a88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8043a8c:	d108      	bne.n	8043aa0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8043a8e:	68fb      	ldr	r3, [r7, #12]
 8043a90:	681b      	ldr	r3, [r3, #0]
 8043a92:	681a      	ldr	r2, [r3, #0]
 8043a94:	68fb      	ldr	r3, [r7, #12]
 8043a96:	681b      	ldr	r3, [r3, #0]
 8043a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8043a9c:	601a      	str	r2, [r3, #0]
 8043a9e:	e00b      	b.n	8043ab8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8043aa0:	68fb      	ldr	r3, [r7, #12]
 8043aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043aa4:	2b11      	cmp	r3, #17
 8043aa6:	d107      	bne.n	8043ab8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8043aa8:	68fb      	ldr	r3, [r7, #12]
 8043aaa:	681b      	ldr	r3, [r3, #0]
 8043aac:	681a      	ldr	r2, [r3, #0]
 8043aae:	68fb      	ldr	r3, [r7, #12]
 8043ab0:	681b      	ldr	r3, [r3, #0]
 8043ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8043ab6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8043ab8:	683b      	ldr	r3, [r7, #0]
 8043aba:	9300      	str	r3, [sp, #0]
 8043abc:	687b      	ldr	r3, [r7, #4]
 8043abe:	2200      	movs	r2, #0
 8043ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8043ac4:	68f8      	ldr	r0, [r7, #12]
 8043ac6:	f000 f893 	bl	8043bf0 <I2C_WaitOnFlagUntilTimeout>
 8043aca:	4603      	mov	r3, r0
 8043acc:	2b00      	cmp	r3, #0
 8043ace:	d00d      	beq.n	8043aec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8043ad0:	68fb      	ldr	r3, [r7, #12]
 8043ad2:	681b      	ldr	r3, [r3, #0]
 8043ad4:	681b      	ldr	r3, [r3, #0]
 8043ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043ade:	d103      	bne.n	8043ae8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8043ae0:	68fb      	ldr	r3, [r7, #12]
 8043ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8043ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8043ae8:	2303      	movs	r3, #3
 8043aea:	e079      	b.n	8043be0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8043aec:	68fb      	ldr	r3, [r7, #12]
 8043aee:	691b      	ldr	r3, [r3, #16]
 8043af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8043af4:	d108      	bne.n	8043b08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8043af6:	897b      	ldrh	r3, [r7, #10]
 8043af8:	b2db      	uxtb	r3, r3
 8043afa:	f043 0301 	orr.w	r3, r3, #1
 8043afe:	b2da      	uxtb	r2, r3
 8043b00:	68fb      	ldr	r3, [r7, #12]
 8043b02:	681b      	ldr	r3, [r3, #0]
 8043b04:	611a      	str	r2, [r3, #16]
 8043b06:	e05f      	b.n	8043bc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8043b08:	897b      	ldrh	r3, [r7, #10]
 8043b0a:	11db      	asrs	r3, r3, #7
 8043b0c:	b2db      	uxtb	r3, r3
 8043b0e:	f003 0306 	and.w	r3, r3, #6
 8043b12:	b2db      	uxtb	r3, r3
 8043b14:	f063 030f 	orn	r3, r3, #15
 8043b18:	b2da      	uxtb	r2, r3
 8043b1a:	68fb      	ldr	r3, [r7, #12]
 8043b1c:	681b      	ldr	r3, [r3, #0]
 8043b1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8043b20:	683b      	ldr	r3, [r7, #0]
 8043b22:	687a      	ldr	r2, [r7, #4]
 8043b24:	4930      	ldr	r1, [pc, #192]	; (8043be8 <I2C_MasterRequestRead+0x194>)
 8043b26:	68f8      	ldr	r0, [r7, #12]
 8043b28:	f000 f8b9 	bl	8043c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8043b2c:	4603      	mov	r3, r0
 8043b2e:	2b00      	cmp	r3, #0
 8043b30:	d001      	beq.n	8043b36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8043b32:	2301      	movs	r3, #1
 8043b34:	e054      	b.n	8043be0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8043b36:	897b      	ldrh	r3, [r7, #10]
 8043b38:	b2da      	uxtb	r2, r3
 8043b3a:	68fb      	ldr	r3, [r7, #12]
 8043b3c:	681b      	ldr	r3, [r3, #0]
 8043b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8043b40:	683b      	ldr	r3, [r7, #0]
 8043b42:	687a      	ldr	r2, [r7, #4]
 8043b44:	4929      	ldr	r1, [pc, #164]	; (8043bec <I2C_MasterRequestRead+0x198>)
 8043b46:	68f8      	ldr	r0, [r7, #12]
 8043b48:	f000 f8a9 	bl	8043c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8043b4c:	4603      	mov	r3, r0
 8043b4e:	2b00      	cmp	r3, #0
 8043b50:	d001      	beq.n	8043b56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8043b52:	2301      	movs	r3, #1
 8043b54:	e044      	b.n	8043be0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8043b56:	2300      	movs	r3, #0
 8043b58:	613b      	str	r3, [r7, #16]
 8043b5a:	68fb      	ldr	r3, [r7, #12]
 8043b5c:	681b      	ldr	r3, [r3, #0]
 8043b5e:	695b      	ldr	r3, [r3, #20]
 8043b60:	613b      	str	r3, [r7, #16]
 8043b62:	68fb      	ldr	r3, [r7, #12]
 8043b64:	681b      	ldr	r3, [r3, #0]
 8043b66:	699b      	ldr	r3, [r3, #24]
 8043b68:	613b      	str	r3, [r7, #16]
 8043b6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8043b6c:	68fb      	ldr	r3, [r7, #12]
 8043b6e:	681b      	ldr	r3, [r3, #0]
 8043b70:	681a      	ldr	r2, [r3, #0]
 8043b72:	68fb      	ldr	r3, [r7, #12]
 8043b74:	681b      	ldr	r3, [r3, #0]
 8043b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8043b7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8043b7c:	683b      	ldr	r3, [r7, #0]
 8043b7e:	9300      	str	r3, [sp, #0]
 8043b80:	687b      	ldr	r3, [r7, #4]
 8043b82:	2200      	movs	r2, #0
 8043b84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8043b88:	68f8      	ldr	r0, [r7, #12]
 8043b8a:	f000 f831 	bl	8043bf0 <I2C_WaitOnFlagUntilTimeout>
 8043b8e:	4603      	mov	r3, r0
 8043b90:	2b00      	cmp	r3, #0
 8043b92:	d00d      	beq.n	8043bb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8043b94:	68fb      	ldr	r3, [r7, #12]
 8043b96:	681b      	ldr	r3, [r3, #0]
 8043b98:	681b      	ldr	r3, [r3, #0]
 8043b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043ba2:	d103      	bne.n	8043bac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8043ba4:	68fb      	ldr	r3, [r7, #12]
 8043ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8043baa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8043bac:	2303      	movs	r3, #3
 8043bae:	e017      	b.n	8043be0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8043bb0:	897b      	ldrh	r3, [r7, #10]
 8043bb2:	11db      	asrs	r3, r3, #7
 8043bb4:	b2db      	uxtb	r3, r3
 8043bb6:	f003 0306 	and.w	r3, r3, #6
 8043bba:	b2db      	uxtb	r3, r3
 8043bbc:	f063 030e 	orn	r3, r3, #14
 8043bc0:	b2da      	uxtb	r2, r3
 8043bc2:	68fb      	ldr	r3, [r7, #12]
 8043bc4:	681b      	ldr	r3, [r3, #0]
 8043bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8043bc8:	683b      	ldr	r3, [r7, #0]
 8043bca:	687a      	ldr	r2, [r7, #4]
 8043bcc:	4907      	ldr	r1, [pc, #28]	; (8043bec <I2C_MasterRequestRead+0x198>)
 8043bce:	68f8      	ldr	r0, [r7, #12]
 8043bd0:	f000 f865 	bl	8043c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8043bd4:	4603      	mov	r3, r0
 8043bd6:	2b00      	cmp	r3, #0
 8043bd8:	d001      	beq.n	8043bde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8043bda:	2301      	movs	r3, #1
 8043bdc:	e000      	b.n	8043be0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8043bde:	2300      	movs	r3, #0
}
 8043be0:	4618      	mov	r0, r3
 8043be2:	3718      	adds	r7, #24
 8043be4:	46bd      	mov	sp, r7
 8043be6:	bd80      	pop	{r7, pc}
 8043be8:	00010008 	.word	0x00010008
 8043bec:	00010002 	.word	0x00010002

08043bf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8043bf0:	b580      	push	{r7, lr}
 8043bf2:	b084      	sub	sp, #16
 8043bf4:	af00      	add	r7, sp, #0
 8043bf6:	60f8      	str	r0, [r7, #12]
 8043bf8:	60b9      	str	r1, [r7, #8]
 8043bfa:	603b      	str	r3, [r7, #0]
 8043bfc:	4613      	mov	r3, r2
 8043bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8043c00:	e025      	b.n	8043c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043c02:	683b      	ldr	r3, [r7, #0]
 8043c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043c08:	d021      	beq.n	8043c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043c0a:	f7fe ff7b 	bl	8042b04 <HAL_GetTick>
 8043c0e:	4602      	mov	r2, r0
 8043c10:	69bb      	ldr	r3, [r7, #24]
 8043c12:	1ad3      	subs	r3, r2, r3
 8043c14:	683a      	ldr	r2, [r7, #0]
 8043c16:	429a      	cmp	r2, r3
 8043c18:	d302      	bcc.n	8043c20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8043c1a:	683b      	ldr	r3, [r7, #0]
 8043c1c:	2b00      	cmp	r3, #0
 8043c1e:	d116      	bne.n	8043c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8043c20:	68fb      	ldr	r3, [r7, #12]
 8043c22:	2200      	movs	r2, #0
 8043c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8043c26:	68fb      	ldr	r3, [r7, #12]
 8043c28:	2220      	movs	r2, #32
 8043c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8043c2e:	68fb      	ldr	r3, [r7, #12]
 8043c30:	2200      	movs	r2, #0
 8043c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8043c36:	68fb      	ldr	r3, [r7, #12]
 8043c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043c3a:	f043 0220 	orr.w	r2, r3, #32
 8043c3e:	68fb      	ldr	r3, [r7, #12]
 8043c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8043c42:	68fb      	ldr	r3, [r7, #12]
 8043c44:	2200      	movs	r2, #0
 8043c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8043c4a:	2301      	movs	r3, #1
 8043c4c:	e023      	b.n	8043c96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8043c4e:	68bb      	ldr	r3, [r7, #8]
 8043c50:	0c1b      	lsrs	r3, r3, #16
 8043c52:	b2db      	uxtb	r3, r3
 8043c54:	2b01      	cmp	r3, #1
 8043c56:	d10d      	bne.n	8043c74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8043c58:	68fb      	ldr	r3, [r7, #12]
 8043c5a:	681b      	ldr	r3, [r3, #0]
 8043c5c:	695b      	ldr	r3, [r3, #20]
 8043c5e:	43da      	mvns	r2, r3
 8043c60:	68bb      	ldr	r3, [r7, #8]
 8043c62:	4013      	ands	r3, r2
 8043c64:	b29b      	uxth	r3, r3
 8043c66:	2b00      	cmp	r3, #0
 8043c68:	bf0c      	ite	eq
 8043c6a:	2301      	moveq	r3, #1
 8043c6c:	2300      	movne	r3, #0
 8043c6e:	b2db      	uxtb	r3, r3
 8043c70:	461a      	mov	r2, r3
 8043c72:	e00c      	b.n	8043c8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8043c74:	68fb      	ldr	r3, [r7, #12]
 8043c76:	681b      	ldr	r3, [r3, #0]
 8043c78:	699b      	ldr	r3, [r3, #24]
 8043c7a:	43da      	mvns	r2, r3
 8043c7c:	68bb      	ldr	r3, [r7, #8]
 8043c7e:	4013      	ands	r3, r2
 8043c80:	b29b      	uxth	r3, r3
 8043c82:	2b00      	cmp	r3, #0
 8043c84:	bf0c      	ite	eq
 8043c86:	2301      	moveq	r3, #1
 8043c88:	2300      	movne	r3, #0
 8043c8a:	b2db      	uxtb	r3, r3
 8043c8c:	461a      	mov	r2, r3
 8043c8e:	79fb      	ldrb	r3, [r7, #7]
 8043c90:	429a      	cmp	r2, r3
 8043c92:	d0b6      	beq.n	8043c02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8043c94:	2300      	movs	r3, #0
}
 8043c96:	4618      	mov	r0, r3
 8043c98:	3710      	adds	r7, #16
 8043c9a:	46bd      	mov	sp, r7
 8043c9c:	bd80      	pop	{r7, pc}

08043c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8043c9e:	b580      	push	{r7, lr}
 8043ca0:	b084      	sub	sp, #16
 8043ca2:	af00      	add	r7, sp, #0
 8043ca4:	60f8      	str	r0, [r7, #12]
 8043ca6:	60b9      	str	r1, [r7, #8]
 8043ca8:	607a      	str	r2, [r7, #4]
 8043caa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8043cac:	e051      	b.n	8043d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8043cae:	68fb      	ldr	r3, [r7, #12]
 8043cb0:	681b      	ldr	r3, [r3, #0]
 8043cb2:	695b      	ldr	r3, [r3, #20]
 8043cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043cbc:	d123      	bne.n	8043d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8043cbe:	68fb      	ldr	r3, [r7, #12]
 8043cc0:	681b      	ldr	r3, [r3, #0]
 8043cc2:	681a      	ldr	r2, [r3, #0]
 8043cc4:	68fb      	ldr	r3, [r7, #12]
 8043cc6:	681b      	ldr	r3, [r3, #0]
 8043cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043ccc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8043cce:	68fb      	ldr	r3, [r7, #12]
 8043cd0:	681b      	ldr	r3, [r3, #0]
 8043cd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8043cd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8043cd8:	68fb      	ldr	r3, [r7, #12]
 8043cda:	2200      	movs	r2, #0
 8043cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8043cde:	68fb      	ldr	r3, [r7, #12]
 8043ce0:	2220      	movs	r2, #32
 8043ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043ce6:	68fb      	ldr	r3, [r7, #12]
 8043ce8:	2200      	movs	r2, #0
 8043cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8043cee:	68fb      	ldr	r3, [r7, #12]
 8043cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043cf2:	f043 0204 	orr.w	r2, r3, #4
 8043cf6:	68fb      	ldr	r3, [r7, #12]
 8043cf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8043cfa:	68fb      	ldr	r3, [r7, #12]
 8043cfc:	2200      	movs	r2, #0
 8043cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8043d02:	2301      	movs	r3, #1
 8043d04:	e046      	b.n	8043d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043d06:	687b      	ldr	r3, [r7, #4]
 8043d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043d0c:	d021      	beq.n	8043d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043d0e:	f7fe fef9 	bl	8042b04 <HAL_GetTick>
 8043d12:	4602      	mov	r2, r0
 8043d14:	683b      	ldr	r3, [r7, #0]
 8043d16:	1ad3      	subs	r3, r2, r3
 8043d18:	687a      	ldr	r2, [r7, #4]
 8043d1a:	429a      	cmp	r2, r3
 8043d1c:	d302      	bcc.n	8043d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8043d1e:	687b      	ldr	r3, [r7, #4]
 8043d20:	2b00      	cmp	r3, #0
 8043d22:	d116      	bne.n	8043d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8043d24:	68fb      	ldr	r3, [r7, #12]
 8043d26:	2200      	movs	r2, #0
 8043d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8043d2a:	68fb      	ldr	r3, [r7, #12]
 8043d2c:	2220      	movs	r2, #32
 8043d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043d32:	68fb      	ldr	r3, [r7, #12]
 8043d34:	2200      	movs	r2, #0
 8043d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8043d3a:	68fb      	ldr	r3, [r7, #12]
 8043d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043d3e:	f043 0220 	orr.w	r2, r3, #32
 8043d42:	68fb      	ldr	r3, [r7, #12]
 8043d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8043d46:	68fb      	ldr	r3, [r7, #12]
 8043d48:	2200      	movs	r2, #0
 8043d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8043d4e:	2301      	movs	r3, #1
 8043d50:	e020      	b.n	8043d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8043d52:	68bb      	ldr	r3, [r7, #8]
 8043d54:	0c1b      	lsrs	r3, r3, #16
 8043d56:	b2db      	uxtb	r3, r3
 8043d58:	2b01      	cmp	r3, #1
 8043d5a:	d10c      	bne.n	8043d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8043d5c:	68fb      	ldr	r3, [r7, #12]
 8043d5e:	681b      	ldr	r3, [r3, #0]
 8043d60:	695b      	ldr	r3, [r3, #20]
 8043d62:	43da      	mvns	r2, r3
 8043d64:	68bb      	ldr	r3, [r7, #8]
 8043d66:	4013      	ands	r3, r2
 8043d68:	b29b      	uxth	r3, r3
 8043d6a:	2b00      	cmp	r3, #0
 8043d6c:	bf14      	ite	ne
 8043d6e:	2301      	movne	r3, #1
 8043d70:	2300      	moveq	r3, #0
 8043d72:	b2db      	uxtb	r3, r3
 8043d74:	e00b      	b.n	8043d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8043d76:	68fb      	ldr	r3, [r7, #12]
 8043d78:	681b      	ldr	r3, [r3, #0]
 8043d7a:	699b      	ldr	r3, [r3, #24]
 8043d7c:	43da      	mvns	r2, r3
 8043d7e:	68bb      	ldr	r3, [r7, #8]
 8043d80:	4013      	ands	r3, r2
 8043d82:	b29b      	uxth	r3, r3
 8043d84:	2b00      	cmp	r3, #0
 8043d86:	bf14      	ite	ne
 8043d88:	2301      	movne	r3, #1
 8043d8a:	2300      	moveq	r3, #0
 8043d8c:	b2db      	uxtb	r3, r3
 8043d8e:	2b00      	cmp	r3, #0
 8043d90:	d18d      	bne.n	8043cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8043d92:	2300      	movs	r3, #0
}
 8043d94:	4618      	mov	r0, r3
 8043d96:	3710      	adds	r7, #16
 8043d98:	46bd      	mov	sp, r7
 8043d9a:	bd80      	pop	{r7, pc}

08043d9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8043d9c:	b580      	push	{r7, lr}
 8043d9e:	b084      	sub	sp, #16
 8043da0:	af00      	add	r7, sp, #0
 8043da2:	60f8      	str	r0, [r7, #12]
 8043da4:	60b9      	str	r1, [r7, #8]
 8043da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8043da8:	e02d      	b.n	8043e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8043daa:	68f8      	ldr	r0, [r7, #12]
 8043dac:	f000 f8ce 	bl	8043f4c <I2C_IsAcknowledgeFailed>
 8043db0:	4603      	mov	r3, r0
 8043db2:	2b00      	cmp	r3, #0
 8043db4:	d001      	beq.n	8043dba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8043db6:	2301      	movs	r3, #1
 8043db8:	e02d      	b.n	8043e16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043dba:	68bb      	ldr	r3, [r7, #8]
 8043dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043dc0:	d021      	beq.n	8043e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043dc2:	f7fe fe9f 	bl	8042b04 <HAL_GetTick>
 8043dc6:	4602      	mov	r2, r0
 8043dc8:	687b      	ldr	r3, [r7, #4]
 8043dca:	1ad3      	subs	r3, r2, r3
 8043dcc:	68ba      	ldr	r2, [r7, #8]
 8043dce:	429a      	cmp	r2, r3
 8043dd0:	d302      	bcc.n	8043dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8043dd2:	68bb      	ldr	r3, [r7, #8]
 8043dd4:	2b00      	cmp	r3, #0
 8043dd6:	d116      	bne.n	8043e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8043dd8:	68fb      	ldr	r3, [r7, #12]
 8043dda:	2200      	movs	r2, #0
 8043ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8043dde:	68fb      	ldr	r3, [r7, #12]
 8043de0:	2220      	movs	r2, #32
 8043de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043de6:	68fb      	ldr	r3, [r7, #12]
 8043de8:	2200      	movs	r2, #0
 8043dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8043dee:	68fb      	ldr	r3, [r7, #12]
 8043df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043df2:	f043 0220 	orr.w	r2, r3, #32
 8043df6:	68fb      	ldr	r3, [r7, #12]
 8043df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8043dfa:	68fb      	ldr	r3, [r7, #12]
 8043dfc:	2200      	movs	r2, #0
 8043dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8043e02:	2301      	movs	r3, #1
 8043e04:	e007      	b.n	8043e16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8043e06:	68fb      	ldr	r3, [r7, #12]
 8043e08:	681b      	ldr	r3, [r3, #0]
 8043e0a:	695b      	ldr	r3, [r3, #20]
 8043e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043e10:	2b80      	cmp	r3, #128	; 0x80
 8043e12:	d1ca      	bne.n	8043daa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8043e14:	2300      	movs	r3, #0
}
 8043e16:	4618      	mov	r0, r3
 8043e18:	3710      	adds	r7, #16
 8043e1a:	46bd      	mov	sp, r7
 8043e1c:	bd80      	pop	{r7, pc}

08043e1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8043e1e:	b580      	push	{r7, lr}
 8043e20:	b084      	sub	sp, #16
 8043e22:	af00      	add	r7, sp, #0
 8043e24:	60f8      	str	r0, [r7, #12]
 8043e26:	60b9      	str	r1, [r7, #8]
 8043e28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8043e2a:	e02d      	b.n	8043e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8043e2c:	68f8      	ldr	r0, [r7, #12]
 8043e2e:	f000 f88d 	bl	8043f4c <I2C_IsAcknowledgeFailed>
 8043e32:	4603      	mov	r3, r0
 8043e34:	2b00      	cmp	r3, #0
 8043e36:	d001      	beq.n	8043e3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8043e38:	2301      	movs	r3, #1
 8043e3a:	e02d      	b.n	8043e98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043e3c:	68bb      	ldr	r3, [r7, #8]
 8043e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043e42:	d021      	beq.n	8043e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043e44:	f7fe fe5e 	bl	8042b04 <HAL_GetTick>
 8043e48:	4602      	mov	r2, r0
 8043e4a:	687b      	ldr	r3, [r7, #4]
 8043e4c:	1ad3      	subs	r3, r2, r3
 8043e4e:	68ba      	ldr	r2, [r7, #8]
 8043e50:	429a      	cmp	r2, r3
 8043e52:	d302      	bcc.n	8043e5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8043e54:	68bb      	ldr	r3, [r7, #8]
 8043e56:	2b00      	cmp	r3, #0
 8043e58:	d116      	bne.n	8043e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8043e5a:	68fb      	ldr	r3, [r7, #12]
 8043e5c:	2200      	movs	r2, #0
 8043e5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8043e60:	68fb      	ldr	r3, [r7, #12]
 8043e62:	2220      	movs	r2, #32
 8043e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043e68:	68fb      	ldr	r3, [r7, #12]
 8043e6a:	2200      	movs	r2, #0
 8043e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8043e70:	68fb      	ldr	r3, [r7, #12]
 8043e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043e74:	f043 0220 	orr.w	r2, r3, #32
 8043e78:	68fb      	ldr	r3, [r7, #12]
 8043e7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8043e7c:	68fb      	ldr	r3, [r7, #12]
 8043e7e:	2200      	movs	r2, #0
 8043e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8043e84:	2301      	movs	r3, #1
 8043e86:	e007      	b.n	8043e98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8043e88:	68fb      	ldr	r3, [r7, #12]
 8043e8a:	681b      	ldr	r3, [r3, #0]
 8043e8c:	695b      	ldr	r3, [r3, #20]
 8043e8e:	f003 0304 	and.w	r3, r3, #4
 8043e92:	2b04      	cmp	r3, #4
 8043e94:	d1ca      	bne.n	8043e2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8043e96:	2300      	movs	r3, #0
}
 8043e98:	4618      	mov	r0, r3
 8043e9a:	3710      	adds	r7, #16
 8043e9c:	46bd      	mov	sp, r7
 8043e9e:	bd80      	pop	{r7, pc}

08043ea0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8043ea0:	b580      	push	{r7, lr}
 8043ea2:	b084      	sub	sp, #16
 8043ea4:	af00      	add	r7, sp, #0
 8043ea6:	60f8      	str	r0, [r7, #12]
 8043ea8:	60b9      	str	r1, [r7, #8]
 8043eaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8043eac:	e042      	b.n	8043f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8043eae:	68fb      	ldr	r3, [r7, #12]
 8043eb0:	681b      	ldr	r3, [r3, #0]
 8043eb2:	695b      	ldr	r3, [r3, #20]
 8043eb4:	f003 0310 	and.w	r3, r3, #16
 8043eb8:	2b10      	cmp	r3, #16
 8043eba:	d119      	bne.n	8043ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8043ebc:	68fb      	ldr	r3, [r7, #12]
 8043ebe:	681b      	ldr	r3, [r3, #0]
 8043ec0:	f06f 0210 	mvn.w	r2, #16
 8043ec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8043ec6:	68fb      	ldr	r3, [r7, #12]
 8043ec8:	2200      	movs	r2, #0
 8043eca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8043ecc:	68fb      	ldr	r3, [r7, #12]
 8043ece:	2220      	movs	r2, #32
 8043ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043ed4:	68fb      	ldr	r3, [r7, #12]
 8043ed6:	2200      	movs	r2, #0
 8043ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8043edc:	68fb      	ldr	r3, [r7, #12]
 8043ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043ee0:	68fb      	ldr	r3, [r7, #12]
 8043ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8043ee4:	68fb      	ldr	r3, [r7, #12]
 8043ee6:	2200      	movs	r2, #0
 8043ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8043eec:	2301      	movs	r3, #1
 8043eee:	e029      	b.n	8043f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043ef0:	f7fe fe08 	bl	8042b04 <HAL_GetTick>
 8043ef4:	4602      	mov	r2, r0
 8043ef6:	687b      	ldr	r3, [r7, #4]
 8043ef8:	1ad3      	subs	r3, r2, r3
 8043efa:	68ba      	ldr	r2, [r7, #8]
 8043efc:	429a      	cmp	r2, r3
 8043efe:	d302      	bcc.n	8043f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8043f00:	68bb      	ldr	r3, [r7, #8]
 8043f02:	2b00      	cmp	r3, #0
 8043f04:	d116      	bne.n	8043f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8043f06:	68fb      	ldr	r3, [r7, #12]
 8043f08:	2200      	movs	r2, #0
 8043f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8043f0c:	68fb      	ldr	r3, [r7, #12]
 8043f0e:	2220      	movs	r2, #32
 8043f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043f14:	68fb      	ldr	r3, [r7, #12]
 8043f16:	2200      	movs	r2, #0
 8043f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8043f1c:	68fb      	ldr	r3, [r7, #12]
 8043f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f20:	f043 0220 	orr.w	r2, r3, #32
 8043f24:	68fb      	ldr	r3, [r7, #12]
 8043f26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8043f28:	68fb      	ldr	r3, [r7, #12]
 8043f2a:	2200      	movs	r2, #0
 8043f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8043f30:	2301      	movs	r3, #1
 8043f32:	e007      	b.n	8043f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8043f34:	68fb      	ldr	r3, [r7, #12]
 8043f36:	681b      	ldr	r3, [r3, #0]
 8043f38:	695b      	ldr	r3, [r3, #20]
 8043f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043f3e:	2b40      	cmp	r3, #64	; 0x40
 8043f40:	d1b5      	bne.n	8043eae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8043f42:	2300      	movs	r3, #0
}
 8043f44:	4618      	mov	r0, r3
 8043f46:	3710      	adds	r7, #16
 8043f48:	46bd      	mov	sp, r7
 8043f4a:	bd80      	pop	{r7, pc}

08043f4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8043f4c:	b480      	push	{r7}
 8043f4e:	b083      	sub	sp, #12
 8043f50:	af00      	add	r7, sp, #0
 8043f52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8043f54:	687b      	ldr	r3, [r7, #4]
 8043f56:	681b      	ldr	r3, [r3, #0]
 8043f58:	695b      	ldr	r3, [r3, #20]
 8043f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043f62:	d11b      	bne.n	8043f9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8043f64:	687b      	ldr	r3, [r7, #4]
 8043f66:	681b      	ldr	r3, [r3, #0]
 8043f68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8043f6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8043f6e:	687b      	ldr	r3, [r7, #4]
 8043f70:	2200      	movs	r2, #0
 8043f72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8043f74:	687b      	ldr	r3, [r7, #4]
 8043f76:	2220      	movs	r2, #32
 8043f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8043f7c:	687b      	ldr	r3, [r7, #4]
 8043f7e:	2200      	movs	r2, #0
 8043f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8043f84:	687b      	ldr	r3, [r7, #4]
 8043f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f88:	f043 0204 	orr.w	r2, r3, #4
 8043f8c:	687b      	ldr	r3, [r7, #4]
 8043f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8043f90:	687b      	ldr	r3, [r7, #4]
 8043f92:	2200      	movs	r2, #0
 8043f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8043f98:	2301      	movs	r3, #1
 8043f9a:	e000      	b.n	8043f9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8043f9c:	2300      	movs	r3, #0
}
 8043f9e:	4618      	mov	r0, r3
 8043fa0:	370c      	adds	r7, #12
 8043fa2:	46bd      	mov	sp, r7
 8043fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fa8:	4770      	bx	lr
	...

08043fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8043fac:	b580      	push	{r7, lr}
 8043fae:	b086      	sub	sp, #24
 8043fb0:	af00      	add	r7, sp, #0
 8043fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8043fb4:	687b      	ldr	r3, [r7, #4]
 8043fb6:	2b00      	cmp	r3, #0
 8043fb8:	d101      	bne.n	8043fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8043fba:	2301      	movs	r3, #1
 8043fbc:	e267      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8043fbe:	687b      	ldr	r3, [r7, #4]
 8043fc0:	681b      	ldr	r3, [r3, #0]
 8043fc2:	f003 0301 	and.w	r3, r3, #1
 8043fc6:	2b00      	cmp	r3, #0
 8043fc8:	d075      	beq.n	80440b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8043fca:	4b88      	ldr	r3, [pc, #544]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8043fcc:	689b      	ldr	r3, [r3, #8]
 8043fce:	f003 030c 	and.w	r3, r3, #12
 8043fd2:	2b04      	cmp	r3, #4
 8043fd4:	d00c      	beq.n	8043ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043fd6:	4b85      	ldr	r3, [pc, #532]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8043fd8:	689b      	ldr	r3, [r3, #8]
 8043fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8043fde:	2b08      	cmp	r3, #8
 8043fe0:	d112      	bne.n	8044008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043fe2:	4b82      	ldr	r3, [pc, #520]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8043fe4:	685b      	ldr	r3, [r3, #4]
 8043fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8043fee:	d10b      	bne.n	8044008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043ff0:	4b7e      	ldr	r3, [pc, #504]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8043ff2:	681b      	ldr	r3, [r3, #0]
 8043ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043ff8:	2b00      	cmp	r3, #0
 8043ffa:	d05b      	beq.n	80440b4 <HAL_RCC_OscConfig+0x108>
 8043ffc:	687b      	ldr	r3, [r7, #4]
 8043ffe:	685b      	ldr	r3, [r3, #4]
 8044000:	2b00      	cmp	r3, #0
 8044002:	d157      	bne.n	80440b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8044004:	2301      	movs	r3, #1
 8044006:	e242      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8044008:	687b      	ldr	r3, [r7, #4]
 804400a:	685b      	ldr	r3, [r3, #4]
 804400c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044010:	d106      	bne.n	8044020 <HAL_RCC_OscConfig+0x74>
 8044012:	4b76      	ldr	r3, [pc, #472]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044014:	681b      	ldr	r3, [r3, #0]
 8044016:	4a75      	ldr	r2, [pc, #468]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804401c:	6013      	str	r3, [r2, #0]
 804401e:	e01d      	b.n	804405c <HAL_RCC_OscConfig+0xb0>
 8044020:	687b      	ldr	r3, [r7, #4]
 8044022:	685b      	ldr	r3, [r3, #4]
 8044024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8044028:	d10c      	bne.n	8044044 <HAL_RCC_OscConfig+0x98>
 804402a:	4b70      	ldr	r3, [pc, #448]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 804402c:	681b      	ldr	r3, [r3, #0]
 804402e:	4a6f      	ldr	r2, [pc, #444]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8044034:	6013      	str	r3, [r2, #0]
 8044036:	4b6d      	ldr	r3, [pc, #436]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044038:	681b      	ldr	r3, [r3, #0]
 804403a:	4a6c      	ldr	r2, [pc, #432]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 804403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044040:	6013      	str	r3, [r2, #0]
 8044042:	e00b      	b.n	804405c <HAL_RCC_OscConfig+0xb0>
 8044044:	4b69      	ldr	r3, [pc, #420]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044046:	681b      	ldr	r3, [r3, #0]
 8044048:	4a68      	ldr	r2, [pc, #416]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 804404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804404e:	6013      	str	r3, [r2, #0]
 8044050:	4b66      	ldr	r3, [pc, #408]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044052:	681b      	ldr	r3, [r3, #0]
 8044054:	4a65      	ldr	r2, [pc, #404]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804405a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 804405c:	687b      	ldr	r3, [r7, #4]
 804405e:	685b      	ldr	r3, [r3, #4]
 8044060:	2b00      	cmp	r3, #0
 8044062:	d013      	beq.n	804408c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8044064:	f7fe fd4e 	bl	8042b04 <HAL_GetTick>
 8044068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804406a:	e008      	b.n	804407e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804406c:	f7fe fd4a 	bl	8042b04 <HAL_GetTick>
 8044070:	4602      	mov	r2, r0
 8044072:	693b      	ldr	r3, [r7, #16]
 8044074:	1ad3      	subs	r3, r2, r3
 8044076:	2b64      	cmp	r3, #100	; 0x64
 8044078:	d901      	bls.n	804407e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 804407a:	2303      	movs	r3, #3
 804407c:	e207      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804407e:	4b5b      	ldr	r3, [pc, #364]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044080:	681b      	ldr	r3, [r3, #0]
 8044082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044086:	2b00      	cmp	r3, #0
 8044088:	d0f0      	beq.n	804406c <HAL_RCC_OscConfig+0xc0>
 804408a:	e014      	b.n	80440b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804408c:	f7fe fd3a 	bl	8042b04 <HAL_GetTick>
 8044090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8044092:	e008      	b.n	80440a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8044094:	f7fe fd36 	bl	8042b04 <HAL_GetTick>
 8044098:	4602      	mov	r2, r0
 804409a:	693b      	ldr	r3, [r7, #16]
 804409c:	1ad3      	subs	r3, r2, r3
 804409e:	2b64      	cmp	r3, #100	; 0x64
 80440a0:	d901      	bls.n	80440a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80440a2:	2303      	movs	r3, #3
 80440a4:	e1f3      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80440a6:	4b51      	ldr	r3, [pc, #324]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 80440a8:	681b      	ldr	r3, [r3, #0]
 80440aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80440ae:	2b00      	cmp	r3, #0
 80440b0:	d1f0      	bne.n	8044094 <HAL_RCC_OscConfig+0xe8>
 80440b2:	e000      	b.n	80440b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80440b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80440b6:	687b      	ldr	r3, [r7, #4]
 80440b8:	681b      	ldr	r3, [r3, #0]
 80440ba:	f003 0302 	and.w	r3, r3, #2
 80440be:	2b00      	cmp	r3, #0
 80440c0:	d063      	beq.n	804418a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80440c2:	4b4a      	ldr	r3, [pc, #296]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 80440c4:	689b      	ldr	r3, [r3, #8]
 80440c6:	f003 030c 	and.w	r3, r3, #12
 80440ca:	2b00      	cmp	r3, #0
 80440cc:	d00b      	beq.n	80440e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80440ce:	4b47      	ldr	r3, [pc, #284]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 80440d0:	689b      	ldr	r3, [r3, #8]
 80440d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80440d6:	2b08      	cmp	r3, #8
 80440d8:	d11c      	bne.n	8044114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80440da:	4b44      	ldr	r3, [pc, #272]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 80440dc:	685b      	ldr	r3, [r3, #4]
 80440de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80440e2:	2b00      	cmp	r3, #0
 80440e4:	d116      	bne.n	8044114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80440e6:	4b41      	ldr	r3, [pc, #260]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 80440e8:	681b      	ldr	r3, [r3, #0]
 80440ea:	f003 0302 	and.w	r3, r3, #2
 80440ee:	2b00      	cmp	r3, #0
 80440f0:	d005      	beq.n	80440fe <HAL_RCC_OscConfig+0x152>
 80440f2:	687b      	ldr	r3, [r7, #4]
 80440f4:	68db      	ldr	r3, [r3, #12]
 80440f6:	2b01      	cmp	r3, #1
 80440f8:	d001      	beq.n	80440fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80440fa:	2301      	movs	r3, #1
 80440fc:	e1c7      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80440fe:	4b3b      	ldr	r3, [pc, #236]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044100:	681b      	ldr	r3, [r3, #0]
 8044102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8044106:	687b      	ldr	r3, [r7, #4]
 8044108:	691b      	ldr	r3, [r3, #16]
 804410a:	00db      	lsls	r3, r3, #3
 804410c:	4937      	ldr	r1, [pc, #220]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 804410e:	4313      	orrs	r3, r2
 8044110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8044112:	e03a      	b.n	804418a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8044114:	687b      	ldr	r3, [r7, #4]
 8044116:	68db      	ldr	r3, [r3, #12]
 8044118:	2b00      	cmp	r3, #0
 804411a:	d020      	beq.n	804415e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804411c:	4b34      	ldr	r3, [pc, #208]	; (80441f0 <HAL_RCC_OscConfig+0x244>)
 804411e:	2201      	movs	r2, #1
 8044120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044122:	f7fe fcef 	bl	8042b04 <HAL_GetTick>
 8044126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044128:	e008      	b.n	804413c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804412a:	f7fe fceb 	bl	8042b04 <HAL_GetTick>
 804412e:	4602      	mov	r2, r0
 8044130:	693b      	ldr	r3, [r7, #16]
 8044132:	1ad3      	subs	r3, r2, r3
 8044134:	2b02      	cmp	r3, #2
 8044136:	d901      	bls.n	804413c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8044138:	2303      	movs	r3, #3
 804413a:	e1a8      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804413c:	4b2b      	ldr	r3, [pc, #172]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 804413e:	681b      	ldr	r3, [r3, #0]
 8044140:	f003 0302 	and.w	r3, r3, #2
 8044144:	2b00      	cmp	r3, #0
 8044146:	d0f0      	beq.n	804412a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8044148:	4b28      	ldr	r3, [pc, #160]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 804414a:	681b      	ldr	r3, [r3, #0]
 804414c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8044150:	687b      	ldr	r3, [r7, #4]
 8044152:	691b      	ldr	r3, [r3, #16]
 8044154:	00db      	lsls	r3, r3, #3
 8044156:	4925      	ldr	r1, [pc, #148]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044158:	4313      	orrs	r3, r2
 804415a:	600b      	str	r3, [r1, #0]
 804415c:	e015      	b.n	804418a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804415e:	4b24      	ldr	r3, [pc, #144]	; (80441f0 <HAL_RCC_OscConfig+0x244>)
 8044160:	2200      	movs	r2, #0
 8044162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044164:	f7fe fcce 	bl	8042b04 <HAL_GetTick>
 8044168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804416a:	e008      	b.n	804417e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804416c:	f7fe fcca 	bl	8042b04 <HAL_GetTick>
 8044170:	4602      	mov	r2, r0
 8044172:	693b      	ldr	r3, [r7, #16]
 8044174:	1ad3      	subs	r3, r2, r3
 8044176:	2b02      	cmp	r3, #2
 8044178:	d901      	bls.n	804417e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 804417a:	2303      	movs	r3, #3
 804417c:	e187      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804417e:	4b1b      	ldr	r3, [pc, #108]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 8044180:	681b      	ldr	r3, [r3, #0]
 8044182:	f003 0302 	and.w	r3, r3, #2
 8044186:	2b00      	cmp	r3, #0
 8044188:	d1f0      	bne.n	804416c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804418a:	687b      	ldr	r3, [r7, #4]
 804418c:	681b      	ldr	r3, [r3, #0]
 804418e:	f003 0308 	and.w	r3, r3, #8
 8044192:	2b00      	cmp	r3, #0
 8044194:	d036      	beq.n	8044204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8044196:	687b      	ldr	r3, [r7, #4]
 8044198:	695b      	ldr	r3, [r3, #20]
 804419a:	2b00      	cmp	r3, #0
 804419c:	d016      	beq.n	80441cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804419e:	4b15      	ldr	r3, [pc, #84]	; (80441f4 <HAL_RCC_OscConfig+0x248>)
 80441a0:	2201      	movs	r2, #1
 80441a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80441a4:	f7fe fcae 	bl	8042b04 <HAL_GetTick>
 80441a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80441aa:	e008      	b.n	80441be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80441ac:	f7fe fcaa 	bl	8042b04 <HAL_GetTick>
 80441b0:	4602      	mov	r2, r0
 80441b2:	693b      	ldr	r3, [r7, #16]
 80441b4:	1ad3      	subs	r3, r2, r3
 80441b6:	2b02      	cmp	r3, #2
 80441b8:	d901      	bls.n	80441be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80441ba:	2303      	movs	r3, #3
 80441bc:	e167      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80441be:	4b0b      	ldr	r3, [pc, #44]	; (80441ec <HAL_RCC_OscConfig+0x240>)
 80441c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80441c2:	f003 0302 	and.w	r3, r3, #2
 80441c6:	2b00      	cmp	r3, #0
 80441c8:	d0f0      	beq.n	80441ac <HAL_RCC_OscConfig+0x200>
 80441ca:	e01b      	b.n	8044204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80441cc:	4b09      	ldr	r3, [pc, #36]	; (80441f4 <HAL_RCC_OscConfig+0x248>)
 80441ce:	2200      	movs	r2, #0
 80441d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80441d2:	f7fe fc97 	bl	8042b04 <HAL_GetTick>
 80441d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80441d8:	e00e      	b.n	80441f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80441da:	f7fe fc93 	bl	8042b04 <HAL_GetTick>
 80441de:	4602      	mov	r2, r0
 80441e0:	693b      	ldr	r3, [r7, #16]
 80441e2:	1ad3      	subs	r3, r2, r3
 80441e4:	2b02      	cmp	r3, #2
 80441e6:	d907      	bls.n	80441f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80441e8:	2303      	movs	r3, #3
 80441ea:	e150      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
 80441ec:	40023800 	.word	0x40023800
 80441f0:	42470000 	.word	0x42470000
 80441f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80441f8:	4b88      	ldr	r3, [pc, #544]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80441fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80441fc:	f003 0302 	and.w	r3, r3, #2
 8044200:	2b00      	cmp	r3, #0
 8044202:	d1ea      	bne.n	80441da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8044204:	687b      	ldr	r3, [r7, #4]
 8044206:	681b      	ldr	r3, [r3, #0]
 8044208:	f003 0304 	and.w	r3, r3, #4
 804420c:	2b00      	cmp	r3, #0
 804420e:	f000 8097 	beq.w	8044340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8044212:	2300      	movs	r3, #0
 8044214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8044216:	4b81      	ldr	r3, [pc, #516]	; (804441c <HAL_RCC_OscConfig+0x470>)
 8044218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804421e:	2b00      	cmp	r3, #0
 8044220:	d10f      	bne.n	8044242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8044222:	2300      	movs	r3, #0
 8044224:	60bb      	str	r3, [r7, #8]
 8044226:	4b7d      	ldr	r3, [pc, #500]	; (804441c <HAL_RCC_OscConfig+0x470>)
 8044228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804422a:	4a7c      	ldr	r2, [pc, #496]	; (804441c <HAL_RCC_OscConfig+0x470>)
 804422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044230:	6413      	str	r3, [r2, #64]	; 0x40
 8044232:	4b7a      	ldr	r3, [pc, #488]	; (804441c <HAL_RCC_OscConfig+0x470>)
 8044234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804423a:	60bb      	str	r3, [r7, #8]
 804423c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804423e:	2301      	movs	r3, #1
 8044240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8044242:	4b77      	ldr	r3, [pc, #476]	; (8044420 <HAL_RCC_OscConfig+0x474>)
 8044244:	681b      	ldr	r3, [r3, #0]
 8044246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804424a:	2b00      	cmp	r3, #0
 804424c:	d118      	bne.n	8044280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 804424e:	4b74      	ldr	r3, [pc, #464]	; (8044420 <HAL_RCC_OscConfig+0x474>)
 8044250:	681b      	ldr	r3, [r3, #0]
 8044252:	4a73      	ldr	r2, [pc, #460]	; (8044420 <HAL_RCC_OscConfig+0x474>)
 8044254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804425a:	f7fe fc53 	bl	8042b04 <HAL_GetTick>
 804425e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8044260:	e008      	b.n	8044274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8044262:	f7fe fc4f 	bl	8042b04 <HAL_GetTick>
 8044266:	4602      	mov	r2, r0
 8044268:	693b      	ldr	r3, [r7, #16]
 804426a:	1ad3      	subs	r3, r2, r3
 804426c:	2b02      	cmp	r3, #2
 804426e:	d901      	bls.n	8044274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8044270:	2303      	movs	r3, #3
 8044272:	e10c      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8044274:	4b6a      	ldr	r3, [pc, #424]	; (8044420 <HAL_RCC_OscConfig+0x474>)
 8044276:	681b      	ldr	r3, [r3, #0]
 8044278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804427c:	2b00      	cmp	r3, #0
 804427e:	d0f0      	beq.n	8044262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8044280:	687b      	ldr	r3, [r7, #4]
 8044282:	689b      	ldr	r3, [r3, #8]
 8044284:	2b01      	cmp	r3, #1
 8044286:	d106      	bne.n	8044296 <HAL_RCC_OscConfig+0x2ea>
 8044288:	4b64      	ldr	r3, [pc, #400]	; (804441c <HAL_RCC_OscConfig+0x470>)
 804428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804428c:	4a63      	ldr	r2, [pc, #396]	; (804441c <HAL_RCC_OscConfig+0x470>)
 804428e:	f043 0301 	orr.w	r3, r3, #1
 8044292:	6713      	str	r3, [r2, #112]	; 0x70
 8044294:	e01c      	b.n	80442d0 <HAL_RCC_OscConfig+0x324>
 8044296:	687b      	ldr	r3, [r7, #4]
 8044298:	689b      	ldr	r3, [r3, #8]
 804429a:	2b05      	cmp	r3, #5
 804429c:	d10c      	bne.n	80442b8 <HAL_RCC_OscConfig+0x30c>
 804429e:	4b5f      	ldr	r3, [pc, #380]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80442a2:	4a5e      	ldr	r2, [pc, #376]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442a4:	f043 0304 	orr.w	r3, r3, #4
 80442a8:	6713      	str	r3, [r2, #112]	; 0x70
 80442aa:	4b5c      	ldr	r3, [pc, #368]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80442ae:	4a5b      	ldr	r2, [pc, #364]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442b0:	f043 0301 	orr.w	r3, r3, #1
 80442b4:	6713      	str	r3, [r2, #112]	; 0x70
 80442b6:	e00b      	b.n	80442d0 <HAL_RCC_OscConfig+0x324>
 80442b8:	4b58      	ldr	r3, [pc, #352]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80442bc:	4a57      	ldr	r2, [pc, #348]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442be:	f023 0301 	bic.w	r3, r3, #1
 80442c2:	6713      	str	r3, [r2, #112]	; 0x70
 80442c4:	4b55      	ldr	r3, [pc, #340]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80442c8:	4a54      	ldr	r2, [pc, #336]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442ca:	f023 0304 	bic.w	r3, r3, #4
 80442ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80442d0:	687b      	ldr	r3, [r7, #4]
 80442d2:	689b      	ldr	r3, [r3, #8]
 80442d4:	2b00      	cmp	r3, #0
 80442d6:	d015      	beq.n	8044304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80442d8:	f7fe fc14 	bl	8042b04 <HAL_GetTick>
 80442dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80442de:	e00a      	b.n	80442f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80442e0:	f7fe fc10 	bl	8042b04 <HAL_GetTick>
 80442e4:	4602      	mov	r2, r0
 80442e6:	693b      	ldr	r3, [r7, #16]
 80442e8:	1ad3      	subs	r3, r2, r3
 80442ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80442ee:	4293      	cmp	r3, r2
 80442f0:	d901      	bls.n	80442f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80442f2:	2303      	movs	r3, #3
 80442f4:	e0cb      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80442f6:	4b49      	ldr	r3, [pc, #292]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80442f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80442fa:	f003 0302 	and.w	r3, r3, #2
 80442fe:	2b00      	cmp	r3, #0
 8044300:	d0ee      	beq.n	80442e0 <HAL_RCC_OscConfig+0x334>
 8044302:	e014      	b.n	804432e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8044304:	f7fe fbfe 	bl	8042b04 <HAL_GetTick>
 8044308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804430a:	e00a      	b.n	8044322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804430c:	f7fe fbfa 	bl	8042b04 <HAL_GetTick>
 8044310:	4602      	mov	r2, r0
 8044312:	693b      	ldr	r3, [r7, #16]
 8044314:	1ad3      	subs	r3, r2, r3
 8044316:	f241 3288 	movw	r2, #5000	; 0x1388
 804431a:	4293      	cmp	r3, r2
 804431c:	d901      	bls.n	8044322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 804431e:	2303      	movs	r3, #3
 8044320:	e0b5      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8044322:	4b3e      	ldr	r3, [pc, #248]	; (804441c <HAL_RCC_OscConfig+0x470>)
 8044324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044326:	f003 0302 	and.w	r3, r3, #2
 804432a:	2b00      	cmp	r3, #0
 804432c:	d1ee      	bne.n	804430c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 804432e:	7dfb      	ldrb	r3, [r7, #23]
 8044330:	2b01      	cmp	r3, #1
 8044332:	d105      	bne.n	8044340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8044334:	4b39      	ldr	r3, [pc, #228]	; (804441c <HAL_RCC_OscConfig+0x470>)
 8044336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044338:	4a38      	ldr	r2, [pc, #224]	; (804441c <HAL_RCC_OscConfig+0x470>)
 804433a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804433e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8044340:	687b      	ldr	r3, [r7, #4]
 8044342:	699b      	ldr	r3, [r3, #24]
 8044344:	2b00      	cmp	r3, #0
 8044346:	f000 80a1 	beq.w	804448c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 804434a:	4b34      	ldr	r3, [pc, #208]	; (804441c <HAL_RCC_OscConfig+0x470>)
 804434c:	689b      	ldr	r3, [r3, #8]
 804434e:	f003 030c 	and.w	r3, r3, #12
 8044352:	2b08      	cmp	r3, #8
 8044354:	d05c      	beq.n	8044410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8044356:	687b      	ldr	r3, [r7, #4]
 8044358:	699b      	ldr	r3, [r3, #24]
 804435a:	2b02      	cmp	r3, #2
 804435c:	d141      	bne.n	80443e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804435e:	4b31      	ldr	r3, [pc, #196]	; (8044424 <HAL_RCC_OscConfig+0x478>)
 8044360:	2200      	movs	r2, #0
 8044362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8044364:	f7fe fbce 	bl	8042b04 <HAL_GetTick>
 8044368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804436a:	e008      	b.n	804437e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804436c:	f7fe fbca 	bl	8042b04 <HAL_GetTick>
 8044370:	4602      	mov	r2, r0
 8044372:	693b      	ldr	r3, [r7, #16]
 8044374:	1ad3      	subs	r3, r2, r3
 8044376:	2b02      	cmp	r3, #2
 8044378:	d901      	bls.n	804437e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 804437a:	2303      	movs	r3, #3
 804437c:	e087      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804437e:	4b27      	ldr	r3, [pc, #156]	; (804441c <HAL_RCC_OscConfig+0x470>)
 8044380:	681b      	ldr	r3, [r3, #0]
 8044382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044386:	2b00      	cmp	r3, #0
 8044388:	d1f0      	bne.n	804436c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804438a:	687b      	ldr	r3, [r7, #4]
 804438c:	69da      	ldr	r2, [r3, #28]
 804438e:	687b      	ldr	r3, [r7, #4]
 8044390:	6a1b      	ldr	r3, [r3, #32]
 8044392:	431a      	orrs	r2, r3
 8044394:	687b      	ldr	r3, [r7, #4]
 8044396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044398:	019b      	lsls	r3, r3, #6
 804439a:	431a      	orrs	r2, r3
 804439c:	687b      	ldr	r3, [r7, #4]
 804439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80443a0:	085b      	lsrs	r3, r3, #1
 80443a2:	3b01      	subs	r3, #1
 80443a4:	041b      	lsls	r3, r3, #16
 80443a6:	431a      	orrs	r2, r3
 80443a8:	687b      	ldr	r3, [r7, #4]
 80443aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80443ac:	061b      	lsls	r3, r3, #24
 80443ae:	491b      	ldr	r1, [pc, #108]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80443b0:	4313      	orrs	r3, r2
 80443b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80443b4:	4b1b      	ldr	r3, [pc, #108]	; (8044424 <HAL_RCC_OscConfig+0x478>)
 80443b6:	2201      	movs	r2, #1
 80443b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80443ba:	f7fe fba3 	bl	8042b04 <HAL_GetTick>
 80443be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80443c0:	e008      	b.n	80443d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80443c2:	f7fe fb9f 	bl	8042b04 <HAL_GetTick>
 80443c6:	4602      	mov	r2, r0
 80443c8:	693b      	ldr	r3, [r7, #16]
 80443ca:	1ad3      	subs	r3, r2, r3
 80443cc:	2b02      	cmp	r3, #2
 80443ce:	d901      	bls.n	80443d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80443d0:	2303      	movs	r3, #3
 80443d2:	e05c      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80443d4:	4b11      	ldr	r3, [pc, #68]	; (804441c <HAL_RCC_OscConfig+0x470>)
 80443d6:	681b      	ldr	r3, [r3, #0]
 80443d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80443dc:	2b00      	cmp	r3, #0
 80443de:	d0f0      	beq.n	80443c2 <HAL_RCC_OscConfig+0x416>
 80443e0:	e054      	b.n	804448c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80443e2:	4b10      	ldr	r3, [pc, #64]	; (8044424 <HAL_RCC_OscConfig+0x478>)
 80443e4:	2200      	movs	r2, #0
 80443e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80443e8:	f7fe fb8c 	bl	8042b04 <HAL_GetTick>
 80443ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80443ee:	e008      	b.n	8044402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80443f0:	f7fe fb88 	bl	8042b04 <HAL_GetTick>
 80443f4:	4602      	mov	r2, r0
 80443f6:	693b      	ldr	r3, [r7, #16]
 80443f8:	1ad3      	subs	r3, r2, r3
 80443fa:	2b02      	cmp	r3, #2
 80443fc:	d901      	bls.n	8044402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80443fe:	2303      	movs	r3, #3
 8044400:	e045      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8044402:	4b06      	ldr	r3, [pc, #24]	; (804441c <HAL_RCC_OscConfig+0x470>)
 8044404:	681b      	ldr	r3, [r3, #0]
 8044406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804440a:	2b00      	cmp	r3, #0
 804440c:	d1f0      	bne.n	80443f0 <HAL_RCC_OscConfig+0x444>
 804440e:	e03d      	b.n	804448c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8044410:	687b      	ldr	r3, [r7, #4]
 8044412:	699b      	ldr	r3, [r3, #24]
 8044414:	2b01      	cmp	r3, #1
 8044416:	d107      	bne.n	8044428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8044418:	2301      	movs	r3, #1
 804441a:	e038      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
 804441c:	40023800 	.word	0x40023800
 8044420:	40007000 	.word	0x40007000
 8044424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8044428:	4b1b      	ldr	r3, [pc, #108]	; (8044498 <HAL_RCC_OscConfig+0x4ec>)
 804442a:	685b      	ldr	r3, [r3, #4]
 804442c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804442e:	687b      	ldr	r3, [r7, #4]
 8044430:	699b      	ldr	r3, [r3, #24]
 8044432:	2b01      	cmp	r3, #1
 8044434:	d028      	beq.n	8044488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8044436:	68fb      	ldr	r3, [r7, #12]
 8044438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 804443c:	687b      	ldr	r3, [r7, #4]
 804443e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8044440:	429a      	cmp	r2, r3
 8044442:	d121      	bne.n	8044488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8044444:	68fb      	ldr	r3, [r7, #12]
 8044446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804444a:	687b      	ldr	r3, [r7, #4]
 804444c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804444e:	429a      	cmp	r2, r3
 8044450:	d11a      	bne.n	8044488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8044452:	68fa      	ldr	r2, [r7, #12]
 8044454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8044458:	4013      	ands	r3, r2
 804445a:	687a      	ldr	r2, [r7, #4]
 804445c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 804445e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8044460:	4293      	cmp	r3, r2
 8044462:	d111      	bne.n	8044488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8044464:	68fb      	ldr	r3, [r7, #12]
 8044466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 804446a:	687b      	ldr	r3, [r7, #4]
 804446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804446e:	085b      	lsrs	r3, r3, #1
 8044470:	3b01      	subs	r3, #1
 8044472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8044474:	429a      	cmp	r2, r3
 8044476:	d107      	bne.n	8044488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8044478:	68fb      	ldr	r3, [r7, #12]
 804447a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 804447e:	687b      	ldr	r3, [r7, #4]
 8044480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8044484:	429a      	cmp	r2, r3
 8044486:	d001      	beq.n	804448c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8044488:	2301      	movs	r3, #1
 804448a:	e000      	b.n	804448e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 804448c:	2300      	movs	r3, #0
}
 804448e:	4618      	mov	r0, r3
 8044490:	3718      	adds	r7, #24
 8044492:	46bd      	mov	sp, r7
 8044494:	bd80      	pop	{r7, pc}
 8044496:	bf00      	nop
 8044498:	40023800 	.word	0x40023800

0804449c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804449c:	b580      	push	{r7, lr}
 804449e:	b084      	sub	sp, #16
 80444a0:	af00      	add	r7, sp, #0
 80444a2:	6078      	str	r0, [r7, #4]
 80444a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80444a6:	687b      	ldr	r3, [r7, #4]
 80444a8:	2b00      	cmp	r3, #0
 80444aa:	d101      	bne.n	80444b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80444ac:	2301      	movs	r3, #1
 80444ae:	e0cc      	b.n	804464a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80444b0:	4b68      	ldr	r3, [pc, #416]	; (8044654 <HAL_RCC_ClockConfig+0x1b8>)
 80444b2:	681b      	ldr	r3, [r3, #0]
 80444b4:	f003 0307 	and.w	r3, r3, #7
 80444b8:	683a      	ldr	r2, [r7, #0]
 80444ba:	429a      	cmp	r2, r3
 80444bc:	d90c      	bls.n	80444d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80444be:	4b65      	ldr	r3, [pc, #404]	; (8044654 <HAL_RCC_ClockConfig+0x1b8>)
 80444c0:	683a      	ldr	r2, [r7, #0]
 80444c2:	b2d2      	uxtb	r2, r2
 80444c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80444c6:	4b63      	ldr	r3, [pc, #396]	; (8044654 <HAL_RCC_ClockConfig+0x1b8>)
 80444c8:	681b      	ldr	r3, [r3, #0]
 80444ca:	f003 0307 	and.w	r3, r3, #7
 80444ce:	683a      	ldr	r2, [r7, #0]
 80444d0:	429a      	cmp	r2, r3
 80444d2:	d001      	beq.n	80444d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80444d4:	2301      	movs	r3, #1
 80444d6:	e0b8      	b.n	804464a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80444d8:	687b      	ldr	r3, [r7, #4]
 80444da:	681b      	ldr	r3, [r3, #0]
 80444dc:	f003 0302 	and.w	r3, r3, #2
 80444e0:	2b00      	cmp	r3, #0
 80444e2:	d020      	beq.n	8044526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80444e4:	687b      	ldr	r3, [r7, #4]
 80444e6:	681b      	ldr	r3, [r3, #0]
 80444e8:	f003 0304 	and.w	r3, r3, #4
 80444ec:	2b00      	cmp	r3, #0
 80444ee:	d005      	beq.n	80444fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80444f0:	4b59      	ldr	r3, [pc, #356]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 80444f2:	689b      	ldr	r3, [r3, #8]
 80444f4:	4a58      	ldr	r2, [pc, #352]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 80444f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80444fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80444fc:	687b      	ldr	r3, [r7, #4]
 80444fe:	681b      	ldr	r3, [r3, #0]
 8044500:	f003 0308 	and.w	r3, r3, #8
 8044504:	2b00      	cmp	r3, #0
 8044506:	d005      	beq.n	8044514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8044508:	4b53      	ldr	r3, [pc, #332]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 804450a:	689b      	ldr	r3, [r3, #8]
 804450c:	4a52      	ldr	r2, [pc, #328]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 804450e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8044512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8044514:	4b50      	ldr	r3, [pc, #320]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 8044516:	689b      	ldr	r3, [r3, #8]
 8044518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804451c:	687b      	ldr	r3, [r7, #4]
 804451e:	689b      	ldr	r3, [r3, #8]
 8044520:	494d      	ldr	r1, [pc, #308]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 8044522:	4313      	orrs	r3, r2
 8044524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8044526:	687b      	ldr	r3, [r7, #4]
 8044528:	681b      	ldr	r3, [r3, #0]
 804452a:	f003 0301 	and.w	r3, r3, #1
 804452e:	2b00      	cmp	r3, #0
 8044530:	d044      	beq.n	80445bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8044532:	687b      	ldr	r3, [r7, #4]
 8044534:	685b      	ldr	r3, [r3, #4]
 8044536:	2b01      	cmp	r3, #1
 8044538:	d107      	bne.n	804454a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804453a:	4b47      	ldr	r3, [pc, #284]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 804453c:	681b      	ldr	r3, [r3, #0]
 804453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044542:	2b00      	cmp	r3, #0
 8044544:	d119      	bne.n	804457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8044546:	2301      	movs	r3, #1
 8044548:	e07f      	b.n	804464a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804454a:	687b      	ldr	r3, [r7, #4]
 804454c:	685b      	ldr	r3, [r3, #4]
 804454e:	2b02      	cmp	r3, #2
 8044550:	d003      	beq.n	804455a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8044552:	687b      	ldr	r3, [r7, #4]
 8044554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8044556:	2b03      	cmp	r3, #3
 8044558:	d107      	bne.n	804456a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804455a:	4b3f      	ldr	r3, [pc, #252]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 804455c:	681b      	ldr	r3, [r3, #0]
 804455e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044562:	2b00      	cmp	r3, #0
 8044564:	d109      	bne.n	804457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8044566:	2301      	movs	r3, #1
 8044568:	e06f      	b.n	804464a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804456a:	4b3b      	ldr	r3, [pc, #236]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 804456c:	681b      	ldr	r3, [r3, #0]
 804456e:	f003 0302 	and.w	r3, r3, #2
 8044572:	2b00      	cmp	r3, #0
 8044574:	d101      	bne.n	804457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8044576:	2301      	movs	r3, #1
 8044578:	e067      	b.n	804464a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804457a:	4b37      	ldr	r3, [pc, #220]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 804457c:	689b      	ldr	r3, [r3, #8]
 804457e:	f023 0203 	bic.w	r2, r3, #3
 8044582:	687b      	ldr	r3, [r7, #4]
 8044584:	685b      	ldr	r3, [r3, #4]
 8044586:	4934      	ldr	r1, [pc, #208]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 8044588:	4313      	orrs	r3, r2
 804458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 804458c:	f7fe faba 	bl	8042b04 <HAL_GetTick>
 8044590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8044592:	e00a      	b.n	80445aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8044594:	f7fe fab6 	bl	8042b04 <HAL_GetTick>
 8044598:	4602      	mov	r2, r0
 804459a:	68fb      	ldr	r3, [r7, #12]
 804459c:	1ad3      	subs	r3, r2, r3
 804459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80445a2:	4293      	cmp	r3, r2
 80445a4:	d901      	bls.n	80445aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80445a6:	2303      	movs	r3, #3
 80445a8:	e04f      	b.n	804464a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80445aa:	4b2b      	ldr	r3, [pc, #172]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 80445ac:	689b      	ldr	r3, [r3, #8]
 80445ae:	f003 020c 	and.w	r2, r3, #12
 80445b2:	687b      	ldr	r3, [r7, #4]
 80445b4:	685b      	ldr	r3, [r3, #4]
 80445b6:	009b      	lsls	r3, r3, #2
 80445b8:	429a      	cmp	r2, r3
 80445ba:	d1eb      	bne.n	8044594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80445bc:	4b25      	ldr	r3, [pc, #148]	; (8044654 <HAL_RCC_ClockConfig+0x1b8>)
 80445be:	681b      	ldr	r3, [r3, #0]
 80445c0:	f003 0307 	and.w	r3, r3, #7
 80445c4:	683a      	ldr	r2, [r7, #0]
 80445c6:	429a      	cmp	r2, r3
 80445c8:	d20c      	bcs.n	80445e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80445ca:	4b22      	ldr	r3, [pc, #136]	; (8044654 <HAL_RCC_ClockConfig+0x1b8>)
 80445cc:	683a      	ldr	r2, [r7, #0]
 80445ce:	b2d2      	uxtb	r2, r2
 80445d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80445d2:	4b20      	ldr	r3, [pc, #128]	; (8044654 <HAL_RCC_ClockConfig+0x1b8>)
 80445d4:	681b      	ldr	r3, [r3, #0]
 80445d6:	f003 0307 	and.w	r3, r3, #7
 80445da:	683a      	ldr	r2, [r7, #0]
 80445dc:	429a      	cmp	r2, r3
 80445de:	d001      	beq.n	80445e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80445e0:	2301      	movs	r3, #1
 80445e2:	e032      	b.n	804464a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80445e4:	687b      	ldr	r3, [r7, #4]
 80445e6:	681b      	ldr	r3, [r3, #0]
 80445e8:	f003 0304 	and.w	r3, r3, #4
 80445ec:	2b00      	cmp	r3, #0
 80445ee:	d008      	beq.n	8044602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80445f0:	4b19      	ldr	r3, [pc, #100]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 80445f2:	689b      	ldr	r3, [r3, #8]
 80445f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80445f8:	687b      	ldr	r3, [r7, #4]
 80445fa:	68db      	ldr	r3, [r3, #12]
 80445fc:	4916      	ldr	r1, [pc, #88]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 80445fe:	4313      	orrs	r3, r2
 8044600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8044602:	687b      	ldr	r3, [r7, #4]
 8044604:	681b      	ldr	r3, [r3, #0]
 8044606:	f003 0308 	and.w	r3, r3, #8
 804460a:	2b00      	cmp	r3, #0
 804460c:	d009      	beq.n	8044622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 804460e:	4b12      	ldr	r3, [pc, #72]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 8044610:	689b      	ldr	r3, [r3, #8]
 8044612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8044616:	687b      	ldr	r3, [r7, #4]
 8044618:	691b      	ldr	r3, [r3, #16]
 804461a:	00db      	lsls	r3, r3, #3
 804461c:	490e      	ldr	r1, [pc, #56]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 804461e:	4313      	orrs	r3, r2
 8044620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8044622:	f000 f821 	bl	8044668 <HAL_RCC_GetSysClockFreq>
 8044626:	4602      	mov	r2, r0
 8044628:	4b0b      	ldr	r3, [pc, #44]	; (8044658 <HAL_RCC_ClockConfig+0x1bc>)
 804462a:	689b      	ldr	r3, [r3, #8]
 804462c:	091b      	lsrs	r3, r3, #4
 804462e:	f003 030f 	and.w	r3, r3, #15
 8044632:	490a      	ldr	r1, [pc, #40]	; (804465c <HAL_RCC_ClockConfig+0x1c0>)
 8044634:	5ccb      	ldrb	r3, [r1, r3]
 8044636:	fa22 f303 	lsr.w	r3, r2, r3
 804463a:	4a09      	ldr	r2, [pc, #36]	; (8044660 <HAL_RCC_ClockConfig+0x1c4>)
 804463c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 804463e:	4b09      	ldr	r3, [pc, #36]	; (8044664 <HAL_RCC_ClockConfig+0x1c8>)
 8044640:	681b      	ldr	r3, [r3, #0]
 8044642:	4618      	mov	r0, r3
 8044644:	f7fd ffa6 	bl	8042594 <HAL_InitTick>

  return HAL_OK;
 8044648:	2300      	movs	r3, #0
}
 804464a:	4618      	mov	r0, r3
 804464c:	3710      	adds	r7, #16
 804464e:	46bd      	mov	sp, r7
 8044650:	bd80      	pop	{r7, pc}
 8044652:	bf00      	nop
 8044654:	40023c00 	.word	0x40023c00
 8044658:	40023800 	.word	0x40023800
 804465c:	0804a13c 	.word	0x0804a13c
 8044660:	20000000 	.word	0x20000000
 8044664:	20000004 	.word	0x20000004

08044668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8044668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804466c:	b094      	sub	sp, #80	; 0x50
 804466e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8044670:	2300      	movs	r3, #0
 8044672:	647b      	str	r3, [r7, #68]	; 0x44
 8044674:	2300      	movs	r3, #0
 8044676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8044678:	2300      	movs	r3, #0
 804467a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 804467c:	2300      	movs	r3, #0
 804467e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8044680:	4b79      	ldr	r3, [pc, #484]	; (8044868 <HAL_RCC_GetSysClockFreq+0x200>)
 8044682:	689b      	ldr	r3, [r3, #8]
 8044684:	f003 030c 	and.w	r3, r3, #12
 8044688:	2b08      	cmp	r3, #8
 804468a:	d00d      	beq.n	80446a8 <HAL_RCC_GetSysClockFreq+0x40>
 804468c:	2b08      	cmp	r3, #8
 804468e:	f200 80e1 	bhi.w	8044854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8044692:	2b00      	cmp	r3, #0
 8044694:	d002      	beq.n	804469c <HAL_RCC_GetSysClockFreq+0x34>
 8044696:	2b04      	cmp	r3, #4
 8044698:	d003      	beq.n	80446a2 <HAL_RCC_GetSysClockFreq+0x3a>
 804469a:	e0db      	b.n	8044854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804469c:	4b73      	ldr	r3, [pc, #460]	; (804486c <HAL_RCC_GetSysClockFreq+0x204>)
 804469e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80446a0:	e0db      	b.n	804485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80446a2:	4b73      	ldr	r3, [pc, #460]	; (8044870 <HAL_RCC_GetSysClockFreq+0x208>)
 80446a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80446a6:	e0d8      	b.n	804485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80446a8:	4b6f      	ldr	r3, [pc, #444]	; (8044868 <HAL_RCC_GetSysClockFreq+0x200>)
 80446aa:	685b      	ldr	r3, [r3, #4]
 80446ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80446b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80446b2:	4b6d      	ldr	r3, [pc, #436]	; (8044868 <HAL_RCC_GetSysClockFreq+0x200>)
 80446b4:	685b      	ldr	r3, [r3, #4]
 80446b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80446ba:	2b00      	cmp	r3, #0
 80446bc:	d063      	beq.n	8044786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80446be:	4b6a      	ldr	r3, [pc, #424]	; (8044868 <HAL_RCC_GetSysClockFreq+0x200>)
 80446c0:	685b      	ldr	r3, [r3, #4]
 80446c2:	099b      	lsrs	r3, r3, #6
 80446c4:	2200      	movs	r2, #0
 80446c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80446c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80446ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80446cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80446d0:	633b      	str	r3, [r7, #48]	; 0x30
 80446d2:	2300      	movs	r3, #0
 80446d4:	637b      	str	r3, [r7, #52]	; 0x34
 80446d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80446da:	4622      	mov	r2, r4
 80446dc:	462b      	mov	r3, r5
 80446de:	f04f 0000 	mov.w	r0, #0
 80446e2:	f04f 0100 	mov.w	r1, #0
 80446e6:	0159      	lsls	r1, r3, #5
 80446e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80446ec:	0150      	lsls	r0, r2, #5
 80446ee:	4602      	mov	r2, r0
 80446f0:	460b      	mov	r3, r1
 80446f2:	4621      	mov	r1, r4
 80446f4:	1a51      	subs	r1, r2, r1
 80446f6:	6139      	str	r1, [r7, #16]
 80446f8:	4629      	mov	r1, r5
 80446fa:	eb63 0301 	sbc.w	r3, r3, r1
 80446fe:	617b      	str	r3, [r7, #20]
 8044700:	f04f 0200 	mov.w	r2, #0
 8044704:	f04f 0300 	mov.w	r3, #0
 8044708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 804470c:	4659      	mov	r1, fp
 804470e:	018b      	lsls	r3, r1, #6
 8044710:	4651      	mov	r1, sl
 8044712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8044716:	4651      	mov	r1, sl
 8044718:	018a      	lsls	r2, r1, #6
 804471a:	4651      	mov	r1, sl
 804471c:	ebb2 0801 	subs.w	r8, r2, r1
 8044720:	4659      	mov	r1, fp
 8044722:	eb63 0901 	sbc.w	r9, r3, r1
 8044726:	f04f 0200 	mov.w	r2, #0
 804472a:	f04f 0300 	mov.w	r3, #0
 804472e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8044732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8044736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804473a:	4690      	mov	r8, r2
 804473c:	4699      	mov	r9, r3
 804473e:	4623      	mov	r3, r4
 8044740:	eb18 0303 	adds.w	r3, r8, r3
 8044744:	60bb      	str	r3, [r7, #8]
 8044746:	462b      	mov	r3, r5
 8044748:	eb49 0303 	adc.w	r3, r9, r3
 804474c:	60fb      	str	r3, [r7, #12]
 804474e:	f04f 0200 	mov.w	r2, #0
 8044752:	f04f 0300 	mov.w	r3, #0
 8044756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 804475a:	4629      	mov	r1, r5
 804475c:	024b      	lsls	r3, r1, #9
 804475e:	4621      	mov	r1, r4
 8044760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8044764:	4621      	mov	r1, r4
 8044766:	024a      	lsls	r2, r1, #9
 8044768:	4610      	mov	r0, r2
 804476a:	4619      	mov	r1, r3
 804476c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804476e:	2200      	movs	r2, #0
 8044770:	62bb      	str	r3, [r7, #40]	; 0x28
 8044772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8044774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8044778:	f7fc fa1e 	bl	8040bb8 <__aeabi_uldivmod>
 804477c:	4602      	mov	r2, r0
 804477e:	460b      	mov	r3, r1
 8044780:	4613      	mov	r3, r2
 8044782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8044784:	e058      	b.n	8044838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8044786:	4b38      	ldr	r3, [pc, #224]	; (8044868 <HAL_RCC_GetSysClockFreq+0x200>)
 8044788:	685b      	ldr	r3, [r3, #4]
 804478a:	099b      	lsrs	r3, r3, #6
 804478c:	2200      	movs	r2, #0
 804478e:	4618      	mov	r0, r3
 8044790:	4611      	mov	r1, r2
 8044792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8044796:	623b      	str	r3, [r7, #32]
 8044798:	2300      	movs	r3, #0
 804479a:	627b      	str	r3, [r7, #36]	; 0x24
 804479c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80447a0:	4642      	mov	r2, r8
 80447a2:	464b      	mov	r3, r9
 80447a4:	f04f 0000 	mov.w	r0, #0
 80447a8:	f04f 0100 	mov.w	r1, #0
 80447ac:	0159      	lsls	r1, r3, #5
 80447ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80447b2:	0150      	lsls	r0, r2, #5
 80447b4:	4602      	mov	r2, r0
 80447b6:	460b      	mov	r3, r1
 80447b8:	4641      	mov	r1, r8
 80447ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80447be:	4649      	mov	r1, r9
 80447c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80447c4:	f04f 0200 	mov.w	r2, #0
 80447c8:	f04f 0300 	mov.w	r3, #0
 80447cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80447d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80447d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80447d8:	ebb2 040a 	subs.w	r4, r2, sl
 80447dc:	eb63 050b 	sbc.w	r5, r3, fp
 80447e0:	f04f 0200 	mov.w	r2, #0
 80447e4:	f04f 0300 	mov.w	r3, #0
 80447e8:	00eb      	lsls	r3, r5, #3
 80447ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80447ee:	00e2      	lsls	r2, r4, #3
 80447f0:	4614      	mov	r4, r2
 80447f2:	461d      	mov	r5, r3
 80447f4:	4643      	mov	r3, r8
 80447f6:	18e3      	adds	r3, r4, r3
 80447f8:	603b      	str	r3, [r7, #0]
 80447fa:	464b      	mov	r3, r9
 80447fc:	eb45 0303 	adc.w	r3, r5, r3
 8044800:	607b      	str	r3, [r7, #4]
 8044802:	f04f 0200 	mov.w	r2, #0
 8044806:	f04f 0300 	mov.w	r3, #0
 804480a:	e9d7 4500 	ldrd	r4, r5, [r7]
 804480e:	4629      	mov	r1, r5
 8044810:	028b      	lsls	r3, r1, #10
 8044812:	4621      	mov	r1, r4
 8044814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8044818:	4621      	mov	r1, r4
 804481a:	028a      	lsls	r2, r1, #10
 804481c:	4610      	mov	r0, r2
 804481e:	4619      	mov	r1, r3
 8044820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8044822:	2200      	movs	r2, #0
 8044824:	61bb      	str	r3, [r7, #24]
 8044826:	61fa      	str	r2, [r7, #28]
 8044828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 804482c:	f7fc f9c4 	bl	8040bb8 <__aeabi_uldivmod>
 8044830:	4602      	mov	r2, r0
 8044832:	460b      	mov	r3, r1
 8044834:	4613      	mov	r3, r2
 8044836:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8044838:	4b0b      	ldr	r3, [pc, #44]	; (8044868 <HAL_RCC_GetSysClockFreq+0x200>)
 804483a:	685b      	ldr	r3, [r3, #4]
 804483c:	0c1b      	lsrs	r3, r3, #16
 804483e:	f003 0303 	and.w	r3, r3, #3
 8044842:	3301      	adds	r3, #1
 8044844:	005b      	lsls	r3, r3, #1
 8044846:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8044848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 804484a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8044850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8044852:	e002      	b.n	804485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8044854:	4b05      	ldr	r3, [pc, #20]	; (804486c <HAL_RCC_GetSysClockFreq+0x204>)
 8044856:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8044858:	bf00      	nop
    }
  }
  return sysclockfreq;
 804485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 804485c:	4618      	mov	r0, r3
 804485e:	3750      	adds	r7, #80	; 0x50
 8044860:	46bd      	mov	sp, r7
 8044862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8044866:	bf00      	nop
 8044868:	40023800 	.word	0x40023800
 804486c:	00f42400 	.word	0x00f42400
 8044870:	007a1200 	.word	0x007a1200

08044874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8044874:	b480      	push	{r7}
 8044876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8044878:	4b03      	ldr	r3, [pc, #12]	; (8044888 <HAL_RCC_GetHCLKFreq+0x14>)
 804487a:	681b      	ldr	r3, [r3, #0]
}
 804487c:	4618      	mov	r0, r3
 804487e:	46bd      	mov	sp, r7
 8044880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044884:	4770      	bx	lr
 8044886:	bf00      	nop
 8044888:	20000000 	.word	0x20000000

0804488c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804488c:	b580      	push	{r7, lr}
 804488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8044890:	f7ff fff0 	bl	8044874 <HAL_RCC_GetHCLKFreq>
 8044894:	4602      	mov	r2, r0
 8044896:	4b05      	ldr	r3, [pc, #20]	; (80448ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8044898:	689b      	ldr	r3, [r3, #8]
 804489a:	0a9b      	lsrs	r3, r3, #10
 804489c:	f003 0307 	and.w	r3, r3, #7
 80448a0:	4903      	ldr	r1, [pc, #12]	; (80448b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80448a2:	5ccb      	ldrb	r3, [r1, r3]
 80448a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80448a8:	4618      	mov	r0, r3
 80448aa:	bd80      	pop	{r7, pc}
 80448ac:	40023800 	.word	0x40023800
 80448b0:	0804a14c 	.word	0x0804a14c

080448b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80448b4:	b580      	push	{r7, lr}
 80448b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80448b8:	f7ff ffdc 	bl	8044874 <HAL_RCC_GetHCLKFreq>
 80448bc:	4602      	mov	r2, r0
 80448be:	4b05      	ldr	r3, [pc, #20]	; (80448d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80448c0:	689b      	ldr	r3, [r3, #8]
 80448c2:	0b5b      	lsrs	r3, r3, #13
 80448c4:	f003 0307 	and.w	r3, r3, #7
 80448c8:	4903      	ldr	r1, [pc, #12]	; (80448d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80448ca:	5ccb      	ldrb	r3, [r1, r3]
 80448cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80448d0:	4618      	mov	r0, r3
 80448d2:	bd80      	pop	{r7, pc}
 80448d4:	40023800 	.word	0x40023800
 80448d8:	0804a14c 	.word	0x0804a14c

080448dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80448dc:	b480      	push	{r7}
 80448de:	b083      	sub	sp, #12
 80448e0:	af00      	add	r7, sp, #0
 80448e2:	6078      	str	r0, [r7, #4]
 80448e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80448e6:	687b      	ldr	r3, [r7, #4]
 80448e8:	220f      	movs	r2, #15
 80448ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80448ec:	4b12      	ldr	r3, [pc, #72]	; (8044938 <HAL_RCC_GetClockConfig+0x5c>)
 80448ee:	689b      	ldr	r3, [r3, #8]
 80448f0:	f003 0203 	and.w	r2, r3, #3
 80448f4:	687b      	ldr	r3, [r7, #4]
 80448f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80448f8:	4b0f      	ldr	r3, [pc, #60]	; (8044938 <HAL_RCC_GetClockConfig+0x5c>)
 80448fa:	689b      	ldr	r3, [r3, #8]
 80448fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8044900:	687b      	ldr	r3, [r7, #4]
 8044902:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8044904:	4b0c      	ldr	r3, [pc, #48]	; (8044938 <HAL_RCC_GetClockConfig+0x5c>)
 8044906:	689b      	ldr	r3, [r3, #8]
 8044908:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 804490c:	687b      	ldr	r3, [r7, #4]
 804490e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8044910:	4b09      	ldr	r3, [pc, #36]	; (8044938 <HAL_RCC_GetClockConfig+0x5c>)
 8044912:	689b      	ldr	r3, [r3, #8]
 8044914:	08db      	lsrs	r3, r3, #3
 8044916:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 804491a:	687b      	ldr	r3, [r7, #4]
 804491c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 804491e:	4b07      	ldr	r3, [pc, #28]	; (804493c <HAL_RCC_GetClockConfig+0x60>)
 8044920:	681b      	ldr	r3, [r3, #0]
 8044922:	f003 0207 	and.w	r2, r3, #7
 8044926:	683b      	ldr	r3, [r7, #0]
 8044928:	601a      	str	r2, [r3, #0]
}
 804492a:	bf00      	nop
 804492c:	370c      	adds	r7, #12
 804492e:	46bd      	mov	sp, r7
 8044930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044934:	4770      	bx	lr
 8044936:	bf00      	nop
 8044938:	40023800 	.word	0x40023800
 804493c:	40023c00 	.word	0x40023c00

08044940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8044940:	b580      	push	{r7, lr}
 8044942:	b082      	sub	sp, #8
 8044944:	af00      	add	r7, sp, #0
 8044946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8044948:	687b      	ldr	r3, [r7, #4]
 804494a:	2b00      	cmp	r3, #0
 804494c:	d101      	bne.n	8044952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 804494e:	2301      	movs	r3, #1
 8044950:	e041      	b.n	80449d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8044952:	687b      	ldr	r3, [r7, #4]
 8044954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8044958:	b2db      	uxtb	r3, r3
 804495a:	2b00      	cmp	r3, #0
 804495c:	d106      	bne.n	804496c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804495e:	687b      	ldr	r3, [r7, #4]
 8044960:	2200      	movs	r2, #0
 8044962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8044966:	6878      	ldr	r0, [r7, #4]
 8044968:	f7fd ffd2 	bl	8042910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804496c:	687b      	ldr	r3, [r7, #4]
 804496e:	2202      	movs	r2, #2
 8044970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8044974:	687b      	ldr	r3, [r7, #4]
 8044976:	681a      	ldr	r2, [r3, #0]
 8044978:	687b      	ldr	r3, [r7, #4]
 804497a:	3304      	adds	r3, #4
 804497c:	4619      	mov	r1, r3
 804497e:	4610      	mov	r0, r2
 8044980:	f000 fae2 	bl	8044f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8044984:	687b      	ldr	r3, [r7, #4]
 8044986:	2201      	movs	r2, #1
 8044988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804498c:	687b      	ldr	r3, [r7, #4]
 804498e:	2201      	movs	r2, #1
 8044990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8044994:	687b      	ldr	r3, [r7, #4]
 8044996:	2201      	movs	r2, #1
 8044998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804499c:	687b      	ldr	r3, [r7, #4]
 804499e:	2201      	movs	r2, #1
 80449a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80449a4:	687b      	ldr	r3, [r7, #4]
 80449a6:	2201      	movs	r2, #1
 80449a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80449ac:	687b      	ldr	r3, [r7, #4]
 80449ae:	2201      	movs	r2, #1
 80449b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80449b4:	687b      	ldr	r3, [r7, #4]
 80449b6:	2201      	movs	r2, #1
 80449b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80449bc:	687b      	ldr	r3, [r7, #4]
 80449be:	2201      	movs	r2, #1
 80449c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80449c4:	687b      	ldr	r3, [r7, #4]
 80449c6:	2201      	movs	r2, #1
 80449c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80449cc:	687b      	ldr	r3, [r7, #4]
 80449ce:	2201      	movs	r2, #1
 80449d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80449d4:	2300      	movs	r3, #0
}
 80449d6:	4618      	mov	r0, r3
 80449d8:	3708      	adds	r7, #8
 80449da:	46bd      	mov	sp, r7
 80449dc:	bd80      	pop	{r7, pc}
	...

080449e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80449e0:	b480      	push	{r7}
 80449e2:	b085      	sub	sp, #20
 80449e4:	af00      	add	r7, sp, #0
 80449e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80449e8:	687b      	ldr	r3, [r7, #4]
 80449ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80449ee:	b2db      	uxtb	r3, r3
 80449f0:	2b01      	cmp	r3, #1
 80449f2:	d001      	beq.n	80449f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80449f4:	2301      	movs	r3, #1
 80449f6:	e03c      	b.n	8044a72 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80449f8:	687b      	ldr	r3, [r7, #4]
 80449fa:	2202      	movs	r2, #2
 80449fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8044a00:	687b      	ldr	r3, [r7, #4]
 8044a02:	681b      	ldr	r3, [r3, #0]
 8044a04:	4a1e      	ldr	r2, [pc, #120]	; (8044a80 <HAL_TIM_Base_Start+0xa0>)
 8044a06:	4293      	cmp	r3, r2
 8044a08:	d018      	beq.n	8044a3c <HAL_TIM_Base_Start+0x5c>
 8044a0a:	687b      	ldr	r3, [r7, #4]
 8044a0c:	681b      	ldr	r3, [r3, #0]
 8044a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8044a12:	d013      	beq.n	8044a3c <HAL_TIM_Base_Start+0x5c>
 8044a14:	687b      	ldr	r3, [r7, #4]
 8044a16:	681b      	ldr	r3, [r3, #0]
 8044a18:	4a1a      	ldr	r2, [pc, #104]	; (8044a84 <HAL_TIM_Base_Start+0xa4>)
 8044a1a:	4293      	cmp	r3, r2
 8044a1c:	d00e      	beq.n	8044a3c <HAL_TIM_Base_Start+0x5c>
 8044a1e:	687b      	ldr	r3, [r7, #4]
 8044a20:	681b      	ldr	r3, [r3, #0]
 8044a22:	4a19      	ldr	r2, [pc, #100]	; (8044a88 <HAL_TIM_Base_Start+0xa8>)
 8044a24:	4293      	cmp	r3, r2
 8044a26:	d009      	beq.n	8044a3c <HAL_TIM_Base_Start+0x5c>
 8044a28:	687b      	ldr	r3, [r7, #4]
 8044a2a:	681b      	ldr	r3, [r3, #0]
 8044a2c:	4a17      	ldr	r2, [pc, #92]	; (8044a8c <HAL_TIM_Base_Start+0xac>)
 8044a2e:	4293      	cmp	r3, r2
 8044a30:	d004      	beq.n	8044a3c <HAL_TIM_Base_Start+0x5c>
 8044a32:	687b      	ldr	r3, [r7, #4]
 8044a34:	681b      	ldr	r3, [r3, #0]
 8044a36:	4a16      	ldr	r2, [pc, #88]	; (8044a90 <HAL_TIM_Base_Start+0xb0>)
 8044a38:	4293      	cmp	r3, r2
 8044a3a:	d111      	bne.n	8044a60 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8044a3c:	687b      	ldr	r3, [r7, #4]
 8044a3e:	681b      	ldr	r3, [r3, #0]
 8044a40:	689b      	ldr	r3, [r3, #8]
 8044a42:	f003 0307 	and.w	r3, r3, #7
 8044a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8044a48:	68fb      	ldr	r3, [r7, #12]
 8044a4a:	2b06      	cmp	r3, #6
 8044a4c:	d010      	beq.n	8044a70 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8044a4e:	687b      	ldr	r3, [r7, #4]
 8044a50:	681b      	ldr	r3, [r3, #0]
 8044a52:	681a      	ldr	r2, [r3, #0]
 8044a54:	687b      	ldr	r3, [r7, #4]
 8044a56:	681b      	ldr	r3, [r3, #0]
 8044a58:	f042 0201 	orr.w	r2, r2, #1
 8044a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8044a5e:	e007      	b.n	8044a70 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8044a60:	687b      	ldr	r3, [r7, #4]
 8044a62:	681b      	ldr	r3, [r3, #0]
 8044a64:	681a      	ldr	r2, [r3, #0]
 8044a66:	687b      	ldr	r3, [r7, #4]
 8044a68:	681b      	ldr	r3, [r3, #0]
 8044a6a:	f042 0201 	orr.w	r2, r2, #1
 8044a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8044a70:	2300      	movs	r3, #0
}
 8044a72:	4618      	mov	r0, r3
 8044a74:	3714      	adds	r7, #20
 8044a76:	46bd      	mov	sp, r7
 8044a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a7c:	4770      	bx	lr
 8044a7e:	bf00      	nop
 8044a80:	40010000 	.word	0x40010000
 8044a84:	40000400 	.word	0x40000400
 8044a88:	40000800 	.word	0x40000800
 8044a8c:	40000c00 	.word	0x40000c00
 8044a90:	40014000 	.word	0x40014000

08044a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8044a94:	b480      	push	{r7}
 8044a96:	b085      	sub	sp, #20
 8044a98:	af00      	add	r7, sp, #0
 8044a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8044a9c:	687b      	ldr	r3, [r7, #4]
 8044a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8044aa2:	b2db      	uxtb	r3, r3
 8044aa4:	2b01      	cmp	r3, #1
 8044aa6:	d001      	beq.n	8044aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8044aa8:	2301      	movs	r3, #1
 8044aaa:	e044      	b.n	8044b36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8044aac:	687b      	ldr	r3, [r7, #4]
 8044aae:	2202      	movs	r2, #2
 8044ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8044ab4:	687b      	ldr	r3, [r7, #4]
 8044ab6:	681b      	ldr	r3, [r3, #0]
 8044ab8:	68da      	ldr	r2, [r3, #12]
 8044aba:	687b      	ldr	r3, [r7, #4]
 8044abc:	681b      	ldr	r3, [r3, #0]
 8044abe:	f042 0201 	orr.w	r2, r2, #1
 8044ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8044ac4:	687b      	ldr	r3, [r7, #4]
 8044ac6:	681b      	ldr	r3, [r3, #0]
 8044ac8:	4a1e      	ldr	r2, [pc, #120]	; (8044b44 <HAL_TIM_Base_Start_IT+0xb0>)
 8044aca:	4293      	cmp	r3, r2
 8044acc:	d018      	beq.n	8044b00 <HAL_TIM_Base_Start_IT+0x6c>
 8044ace:	687b      	ldr	r3, [r7, #4]
 8044ad0:	681b      	ldr	r3, [r3, #0]
 8044ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8044ad6:	d013      	beq.n	8044b00 <HAL_TIM_Base_Start_IT+0x6c>
 8044ad8:	687b      	ldr	r3, [r7, #4]
 8044ada:	681b      	ldr	r3, [r3, #0]
 8044adc:	4a1a      	ldr	r2, [pc, #104]	; (8044b48 <HAL_TIM_Base_Start_IT+0xb4>)
 8044ade:	4293      	cmp	r3, r2
 8044ae0:	d00e      	beq.n	8044b00 <HAL_TIM_Base_Start_IT+0x6c>
 8044ae2:	687b      	ldr	r3, [r7, #4]
 8044ae4:	681b      	ldr	r3, [r3, #0]
 8044ae6:	4a19      	ldr	r2, [pc, #100]	; (8044b4c <HAL_TIM_Base_Start_IT+0xb8>)
 8044ae8:	4293      	cmp	r3, r2
 8044aea:	d009      	beq.n	8044b00 <HAL_TIM_Base_Start_IT+0x6c>
 8044aec:	687b      	ldr	r3, [r7, #4]
 8044aee:	681b      	ldr	r3, [r3, #0]
 8044af0:	4a17      	ldr	r2, [pc, #92]	; (8044b50 <HAL_TIM_Base_Start_IT+0xbc>)
 8044af2:	4293      	cmp	r3, r2
 8044af4:	d004      	beq.n	8044b00 <HAL_TIM_Base_Start_IT+0x6c>
 8044af6:	687b      	ldr	r3, [r7, #4]
 8044af8:	681b      	ldr	r3, [r3, #0]
 8044afa:	4a16      	ldr	r2, [pc, #88]	; (8044b54 <HAL_TIM_Base_Start_IT+0xc0>)
 8044afc:	4293      	cmp	r3, r2
 8044afe:	d111      	bne.n	8044b24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8044b00:	687b      	ldr	r3, [r7, #4]
 8044b02:	681b      	ldr	r3, [r3, #0]
 8044b04:	689b      	ldr	r3, [r3, #8]
 8044b06:	f003 0307 	and.w	r3, r3, #7
 8044b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8044b0c:	68fb      	ldr	r3, [r7, #12]
 8044b0e:	2b06      	cmp	r3, #6
 8044b10:	d010      	beq.n	8044b34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8044b12:	687b      	ldr	r3, [r7, #4]
 8044b14:	681b      	ldr	r3, [r3, #0]
 8044b16:	681a      	ldr	r2, [r3, #0]
 8044b18:	687b      	ldr	r3, [r7, #4]
 8044b1a:	681b      	ldr	r3, [r3, #0]
 8044b1c:	f042 0201 	orr.w	r2, r2, #1
 8044b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8044b22:	e007      	b.n	8044b34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8044b24:	687b      	ldr	r3, [r7, #4]
 8044b26:	681b      	ldr	r3, [r3, #0]
 8044b28:	681a      	ldr	r2, [r3, #0]
 8044b2a:	687b      	ldr	r3, [r7, #4]
 8044b2c:	681b      	ldr	r3, [r3, #0]
 8044b2e:	f042 0201 	orr.w	r2, r2, #1
 8044b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8044b34:	2300      	movs	r3, #0
}
 8044b36:	4618      	mov	r0, r3
 8044b38:	3714      	adds	r7, #20
 8044b3a:	46bd      	mov	sp, r7
 8044b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b40:	4770      	bx	lr
 8044b42:	bf00      	nop
 8044b44:	40010000 	.word	0x40010000
 8044b48:	40000400 	.word	0x40000400
 8044b4c:	40000800 	.word	0x40000800
 8044b50:	40000c00 	.word	0x40000c00
 8044b54:	40014000 	.word	0x40014000

08044b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8044b58:	b580      	push	{r7, lr}
 8044b5a:	b082      	sub	sp, #8
 8044b5c:	af00      	add	r7, sp, #0
 8044b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8044b60:	687b      	ldr	r3, [r7, #4]
 8044b62:	681b      	ldr	r3, [r3, #0]
 8044b64:	691b      	ldr	r3, [r3, #16]
 8044b66:	f003 0302 	and.w	r3, r3, #2
 8044b6a:	2b02      	cmp	r3, #2
 8044b6c:	d122      	bne.n	8044bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8044b6e:	687b      	ldr	r3, [r7, #4]
 8044b70:	681b      	ldr	r3, [r3, #0]
 8044b72:	68db      	ldr	r3, [r3, #12]
 8044b74:	f003 0302 	and.w	r3, r3, #2
 8044b78:	2b02      	cmp	r3, #2
 8044b7a:	d11b      	bne.n	8044bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8044b7c:	687b      	ldr	r3, [r7, #4]
 8044b7e:	681b      	ldr	r3, [r3, #0]
 8044b80:	f06f 0202 	mvn.w	r2, #2
 8044b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8044b86:	687b      	ldr	r3, [r7, #4]
 8044b88:	2201      	movs	r2, #1
 8044b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8044b8c:	687b      	ldr	r3, [r7, #4]
 8044b8e:	681b      	ldr	r3, [r3, #0]
 8044b90:	699b      	ldr	r3, [r3, #24]
 8044b92:	f003 0303 	and.w	r3, r3, #3
 8044b96:	2b00      	cmp	r3, #0
 8044b98:	d003      	beq.n	8044ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8044b9a:	6878      	ldr	r0, [r7, #4]
 8044b9c:	f000 f9b5 	bl	8044f0a <HAL_TIM_IC_CaptureCallback>
 8044ba0:	e005      	b.n	8044bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8044ba2:	6878      	ldr	r0, [r7, #4]
 8044ba4:	f000 f9a7 	bl	8044ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8044ba8:	6878      	ldr	r0, [r7, #4]
 8044baa:	f000 f9b8 	bl	8044f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8044bae:	687b      	ldr	r3, [r7, #4]
 8044bb0:	2200      	movs	r2, #0
 8044bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8044bb4:	687b      	ldr	r3, [r7, #4]
 8044bb6:	681b      	ldr	r3, [r3, #0]
 8044bb8:	691b      	ldr	r3, [r3, #16]
 8044bba:	f003 0304 	and.w	r3, r3, #4
 8044bbe:	2b04      	cmp	r3, #4
 8044bc0:	d122      	bne.n	8044c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8044bc2:	687b      	ldr	r3, [r7, #4]
 8044bc4:	681b      	ldr	r3, [r3, #0]
 8044bc6:	68db      	ldr	r3, [r3, #12]
 8044bc8:	f003 0304 	and.w	r3, r3, #4
 8044bcc:	2b04      	cmp	r3, #4
 8044bce:	d11b      	bne.n	8044c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8044bd0:	687b      	ldr	r3, [r7, #4]
 8044bd2:	681b      	ldr	r3, [r3, #0]
 8044bd4:	f06f 0204 	mvn.w	r2, #4
 8044bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8044bda:	687b      	ldr	r3, [r7, #4]
 8044bdc:	2202      	movs	r2, #2
 8044bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8044be0:	687b      	ldr	r3, [r7, #4]
 8044be2:	681b      	ldr	r3, [r3, #0]
 8044be4:	699b      	ldr	r3, [r3, #24]
 8044be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044bea:	2b00      	cmp	r3, #0
 8044bec:	d003      	beq.n	8044bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8044bee:	6878      	ldr	r0, [r7, #4]
 8044bf0:	f000 f98b 	bl	8044f0a <HAL_TIM_IC_CaptureCallback>
 8044bf4:	e005      	b.n	8044c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8044bf6:	6878      	ldr	r0, [r7, #4]
 8044bf8:	f000 f97d 	bl	8044ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8044bfc:	6878      	ldr	r0, [r7, #4]
 8044bfe:	f000 f98e 	bl	8044f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8044c02:	687b      	ldr	r3, [r7, #4]
 8044c04:	2200      	movs	r2, #0
 8044c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8044c08:	687b      	ldr	r3, [r7, #4]
 8044c0a:	681b      	ldr	r3, [r3, #0]
 8044c0c:	691b      	ldr	r3, [r3, #16]
 8044c0e:	f003 0308 	and.w	r3, r3, #8
 8044c12:	2b08      	cmp	r3, #8
 8044c14:	d122      	bne.n	8044c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8044c16:	687b      	ldr	r3, [r7, #4]
 8044c18:	681b      	ldr	r3, [r3, #0]
 8044c1a:	68db      	ldr	r3, [r3, #12]
 8044c1c:	f003 0308 	and.w	r3, r3, #8
 8044c20:	2b08      	cmp	r3, #8
 8044c22:	d11b      	bne.n	8044c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8044c24:	687b      	ldr	r3, [r7, #4]
 8044c26:	681b      	ldr	r3, [r3, #0]
 8044c28:	f06f 0208 	mvn.w	r2, #8
 8044c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8044c2e:	687b      	ldr	r3, [r7, #4]
 8044c30:	2204      	movs	r2, #4
 8044c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8044c34:	687b      	ldr	r3, [r7, #4]
 8044c36:	681b      	ldr	r3, [r3, #0]
 8044c38:	69db      	ldr	r3, [r3, #28]
 8044c3a:	f003 0303 	and.w	r3, r3, #3
 8044c3e:	2b00      	cmp	r3, #0
 8044c40:	d003      	beq.n	8044c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8044c42:	6878      	ldr	r0, [r7, #4]
 8044c44:	f000 f961 	bl	8044f0a <HAL_TIM_IC_CaptureCallback>
 8044c48:	e005      	b.n	8044c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8044c4a:	6878      	ldr	r0, [r7, #4]
 8044c4c:	f000 f953 	bl	8044ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8044c50:	6878      	ldr	r0, [r7, #4]
 8044c52:	f000 f964 	bl	8044f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8044c56:	687b      	ldr	r3, [r7, #4]
 8044c58:	2200      	movs	r2, #0
 8044c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8044c5c:	687b      	ldr	r3, [r7, #4]
 8044c5e:	681b      	ldr	r3, [r3, #0]
 8044c60:	691b      	ldr	r3, [r3, #16]
 8044c62:	f003 0310 	and.w	r3, r3, #16
 8044c66:	2b10      	cmp	r3, #16
 8044c68:	d122      	bne.n	8044cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8044c6a:	687b      	ldr	r3, [r7, #4]
 8044c6c:	681b      	ldr	r3, [r3, #0]
 8044c6e:	68db      	ldr	r3, [r3, #12]
 8044c70:	f003 0310 	and.w	r3, r3, #16
 8044c74:	2b10      	cmp	r3, #16
 8044c76:	d11b      	bne.n	8044cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8044c78:	687b      	ldr	r3, [r7, #4]
 8044c7a:	681b      	ldr	r3, [r3, #0]
 8044c7c:	f06f 0210 	mvn.w	r2, #16
 8044c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8044c82:	687b      	ldr	r3, [r7, #4]
 8044c84:	2208      	movs	r2, #8
 8044c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8044c88:	687b      	ldr	r3, [r7, #4]
 8044c8a:	681b      	ldr	r3, [r3, #0]
 8044c8c:	69db      	ldr	r3, [r3, #28]
 8044c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044c92:	2b00      	cmp	r3, #0
 8044c94:	d003      	beq.n	8044c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8044c96:	6878      	ldr	r0, [r7, #4]
 8044c98:	f000 f937 	bl	8044f0a <HAL_TIM_IC_CaptureCallback>
 8044c9c:	e005      	b.n	8044caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8044c9e:	6878      	ldr	r0, [r7, #4]
 8044ca0:	f000 f929 	bl	8044ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8044ca4:	6878      	ldr	r0, [r7, #4]
 8044ca6:	f000 f93a 	bl	8044f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8044caa:	687b      	ldr	r3, [r7, #4]
 8044cac:	2200      	movs	r2, #0
 8044cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8044cb0:	687b      	ldr	r3, [r7, #4]
 8044cb2:	681b      	ldr	r3, [r3, #0]
 8044cb4:	691b      	ldr	r3, [r3, #16]
 8044cb6:	f003 0301 	and.w	r3, r3, #1
 8044cba:	2b01      	cmp	r3, #1
 8044cbc:	d10e      	bne.n	8044cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8044cbe:	687b      	ldr	r3, [r7, #4]
 8044cc0:	681b      	ldr	r3, [r3, #0]
 8044cc2:	68db      	ldr	r3, [r3, #12]
 8044cc4:	f003 0301 	and.w	r3, r3, #1
 8044cc8:	2b01      	cmp	r3, #1
 8044cca:	d107      	bne.n	8044cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8044ccc:	687b      	ldr	r3, [r7, #4]
 8044cce:	681b      	ldr	r3, [r3, #0]
 8044cd0:	f06f 0201 	mvn.w	r2, #1
 8044cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8044cd6:	6878      	ldr	r0, [r7, #4]
 8044cd8:	f7fd f94e 	bl	8041f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8044cdc:	687b      	ldr	r3, [r7, #4]
 8044cde:	681b      	ldr	r3, [r3, #0]
 8044ce0:	691b      	ldr	r3, [r3, #16]
 8044ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044ce6:	2b80      	cmp	r3, #128	; 0x80
 8044ce8:	d10e      	bne.n	8044d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8044cea:	687b      	ldr	r3, [r7, #4]
 8044cec:	681b      	ldr	r3, [r3, #0]
 8044cee:	68db      	ldr	r3, [r3, #12]
 8044cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044cf4:	2b80      	cmp	r3, #128	; 0x80
 8044cf6:	d107      	bne.n	8044d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8044cf8:	687b      	ldr	r3, [r7, #4]
 8044cfa:	681b      	ldr	r3, [r3, #0]
 8044cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8044d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8044d02:	6878      	ldr	r0, [r7, #4]
 8044d04:	f000 fab2 	bl	804526c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8044d08:	687b      	ldr	r3, [r7, #4]
 8044d0a:	681b      	ldr	r3, [r3, #0]
 8044d0c:	691b      	ldr	r3, [r3, #16]
 8044d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044d12:	2b40      	cmp	r3, #64	; 0x40
 8044d14:	d10e      	bne.n	8044d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8044d16:	687b      	ldr	r3, [r7, #4]
 8044d18:	681b      	ldr	r3, [r3, #0]
 8044d1a:	68db      	ldr	r3, [r3, #12]
 8044d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044d20:	2b40      	cmp	r3, #64	; 0x40
 8044d22:	d107      	bne.n	8044d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8044d24:	687b      	ldr	r3, [r7, #4]
 8044d26:	681b      	ldr	r3, [r3, #0]
 8044d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8044d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8044d2e:	6878      	ldr	r0, [r7, #4]
 8044d30:	f000 f8ff 	bl	8044f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8044d34:	687b      	ldr	r3, [r7, #4]
 8044d36:	681b      	ldr	r3, [r3, #0]
 8044d38:	691b      	ldr	r3, [r3, #16]
 8044d3a:	f003 0320 	and.w	r3, r3, #32
 8044d3e:	2b20      	cmp	r3, #32
 8044d40:	d10e      	bne.n	8044d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8044d42:	687b      	ldr	r3, [r7, #4]
 8044d44:	681b      	ldr	r3, [r3, #0]
 8044d46:	68db      	ldr	r3, [r3, #12]
 8044d48:	f003 0320 	and.w	r3, r3, #32
 8044d4c:	2b20      	cmp	r3, #32
 8044d4e:	d107      	bne.n	8044d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8044d50:	687b      	ldr	r3, [r7, #4]
 8044d52:	681b      	ldr	r3, [r3, #0]
 8044d54:	f06f 0220 	mvn.w	r2, #32
 8044d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8044d5a:	6878      	ldr	r0, [r7, #4]
 8044d5c:	f000 fa7c 	bl	8045258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8044d60:	bf00      	nop
 8044d62:	3708      	adds	r7, #8
 8044d64:	46bd      	mov	sp, r7
 8044d66:	bd80      	pop	{r7, pc}

08044d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8044d68:	b580      	push	{r7, lr}
 8044d6a:	b084      	sub	sp, #16
 8044d6c:	af00      	add	r7, sp, #0
 8044d6e:	6078      	str	r0, [r7, #4]
 8044d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8044d72:	2300      	movs	r3, #0
 8044d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8044d76:	687b      	ldr	r3, [r7, #4]
 8044d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8044d7c:	2b01      	cmp	r3, #1
 8044d7e:	d101      	bne.n	8044d84 <HAL_TIM_ConfigClockSource+0x1c>
 8044d80:	2302      	movs	r3, #2
 8044d82:	e0b4      	b.n	8044eee <HAL_TIM_ConfigClockSource+0x186>
 8044d84:	687b      	ldr	r3, [r7, #4]
 8044d86:	2201      	movs	r2, #1
 8044d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8044d8c:	687b      	ldr	r3, [r7, #4]
 8044d8e:	2202      	movs	r2, #2
 8044d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8044d94:	687b      	ldr	r3, [r7, #4]
 8044d96:	681b      	ldr	r3, [r3, #0]
 8044d98:	689b      	ldr	r3, [r3, #8]
 8044d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8044d9c:	68bb      	ldr	r3, [r7, #8]
 8044d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8044da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8044da4:	68bb      	ldr	r3, [r7, #8]
 8044da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8044daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8044dac:	687b      	ldr	r3, [r7, #4]
 8044dae:	681b      	ldr	r3, [r3, #0]
 8044db0:	68ba      	ldr	r2, [r7, #8]
 8044db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8044db4:	683b      	ldr	r3, [r7, #0]
 8044db6:	681b      	ldr	r3, [r3, #0]
 8044db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8044dbc:	d03e      	beq.n	8044e3c <HAL_TIM_ConfigClockSource+0xd4>
 8044dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8044dc2:	f200 8087 	bhi.w	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8044dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8044dca:	f000 8086 	beq.w	8044eda <HAL_TIM_ConfigClockSource+0x172>
 8044dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8044dd2:	d87f      	bhi.n	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8044dd4:	2b70      	cmp	r3, #112	; 0x70
 8044dd6:	d01a      	beq.n	8044e0e <HAL_TIM_ConfigClockSource+0xa6>
 8044dd8:	2b70      	cmp	r3, #112	; 0x70
 8044dda:	d87b      	bhi.n	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8044ddc:	2b60      	cmp	r3, #96	; 0x60
 8044dde:	d050      	beq.n	8044e82 <HAL_TIM_ConfigClockSource+0x11a>
 8044de0:	2b60      	cmp	r3, #96	; 0x60
 8044de2:	d877      	bhi.n	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8044de4:	2b50      	cmp	r3, #80	; 0x50
 8044de6:	d03c      	beq.n	8044e62 <HAL_TIM_ConfigClockSource+0xfa>
 8044de8:	2b50      	cmp	r3, #80	; 0x50
 8044dea:	d873      	bhi.n	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8044dec:	2b40      	cmp	r3, #64	; 0x40
 8044dee:	d058      	beq.n	8044ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8044df0:	2b40      	cmp	r3, #64	; 0x40
 8044df2:	d86f      	bhi.n	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8044df4:	2b30      	cmp	r3, #48	; 0x30
 8044df6:	d064      	beq.n	8044ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8044df8:	2b30      	cmp	r3, #48	; 0x30
 8044dfa:	d86b      	bhi.n	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8044dfc:	2b20      	cmp	r3, #32
 8044dfe:	d060      	beq.n	8044ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8044e00:	2b20      	cmp	r3, #32
 8044e02:	d867      	bhi.n	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8044e04:	2b00      	cmp	r3, #0
 8044e06:	d05c      	beq.n	8044ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8044e08:	2b10      	cmp	r3, #16
 8044e0a:	d05a      	beq.n	8044ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8044e0c:	e062      	b.n	8044ed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8044e0e:	687b      	ldr	r3, [r7, #4]
 8044e10:	6818      	ldr	r0, [r3, #0]
 8044e12:	683b      	ldr	r3, [r7, #0]
 8044e14:	6899      	ldr	r1, [r3, #8]
 8044e16:	683b      	ldr	r3, [r7, #0]
 8044e18:	685a      	ldr	r2, [r3, #4]
 8044e1a:	683b      	ldr	r3, [r7, #0]
 8044e1c:	68db      	ldr	r3, [r3, #12]
 8044e1e:	f000 f98d 	bl	804513c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8044e22:	687b      	ldr	r3, [r7, #4]
 8044e24:	681b      	ldr	r3, [r3, #0]
 8044e26:	689b      	ldr	r3, [r3, #8]
 8044e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8044e2a:	68bb      	ldr	r3, [r7, #8]
 8044e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8044e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8044e32:	687b      	ldr	r3, [r7, #4]
 8044e34:	681b      	ldr	r3, [r3, #0]
 8044e36:	68ba      	ldr	r2, [r7, #8]
 8044e38:	609a      	str	r2, [r3, #8]
      break;
 8044e3a:	e04f      	b.n	8044edc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8044e3c:	687b      	ldr	r3, [r7, #4]
 8044e3e:	6818      	ldr	r0, [r3, #0]
 8044e40:	683b      	ldr	r3, [r7, #0]
 8044e42:	6899      	ldr	r1, [r3, #8]
 8044e44:	683b      	ldr	r3, [r7, #0]
 8044e46:	685a      	ldr	r2, [r3, #4]
 8044e48:	683b      	ldr	r3, [r7, #0]
 8044e4a:	68db      	ldr	r3, [r3, #12]
 8044e4c:	f000 f976 	bl	804513c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8044e50:	687b      	ldr	r3, [r7, #4]
 8044e52:	681b      	ldr	r3, [r3, #0]
 8044e54:	689a      	ldr	r2, [r3, #8]
 8044e56:	687b      	ldr	r3, [r7, #4]
 8044e58:	681b      	ldr	r3, [r3, #0]
 8044e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8044e5e:	609a      	str	r2, [r3, #8]
      break;
 8044e60:	e03c      	b.n	8044edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8044e62:	687b      	ldr	r3, [r7, #4]
 8044e64:	6818      	ldr	r0, [r3, #0]
 8044e66:	683b      	ldr	r3, [r7, #0]
 8044e68:	6859      	ldr	r1, [r3, #4]
 8044e6a:	683b      	ldr	r3, [r7, #0]
 8044e6c:	68db      	ldr	r3, [r3, #12]
 8044e6e:	461a      	mov	r2, r3
 8044e70:	f000 f8ea 	bl	8045048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8044e74:	687b      	ldr	r3, [r7, #4]
 8044e76:	681b      	ldr	r3, [r3, #0]
 8044e78:	2150      	movs	r1, #80	; 0x50
 8044e7a:	4618      	mov	r0, r3
 8044e7c:	f000 f943 	bl	8045106 <TIM_ITRx_SetConfig>
      break;
 8044e80:	e02c      	b.n	8044edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8044e82:	687b      	ldr	r3, [r7, #4]
 8044e84:	6818      	ldr	r0, [r3, #0]
 8044e86:	683b      	ldr	r3, [r7, #0]
 8044e88:	6859      	ldr	r1, [r3, #4]
 8044e8a:	683b      	ldr	r3, [r7, #0]
 8044e8c:	68db      	ldr	r3, [r3, #12]
 8044e8e:	461a      	mov	r2, r3
 8044e90:	f000 f909 	bl	80450a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8044e94:	687b      	ldr	r3, [r7, #4]
 8044e96:	681b      	ldr	r3, [r3, #0]
 8044e98:	2160      	movs	r1, #96	; 0x60
 8044e9a:	4618      	mov	r0, r3
 8044e9c:	f000 f933 	bl	8045106 <TIM_ITRx_SetConfig>
      break;
 8044ea0:	e01c      	b.n	8044edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8044ea2:	687b      	ldr	r3, [r7, #4]
 8044ea4:	6818      	ldr	r0, [r3, #0]
 8044ea6:	683b      	ldr	r3, [r7, #0]
 8044ea8:	6859      	ldr	r1, [r3, #4]
 8044eaa:	683b      	ldr	r3, [r7, #0]
 8044eac:	68db      	ldr	r3, [r3, #12]
 8044eae:	461a      	mov	r2, r3
 8044eb0:	f000 f8ca 	bl	8045048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8044eb4:	687b      	ldr	r3, [r7, #4]
 8044eb6:	681b      	ldr	r3, [r3, #0]
 8044eb8:	2140      	movs	r1, #64	; 0x40
 8044eba:	4618      	mov	r0, r3
 8044ebc:	f000 f923 	bl	8045106 <TIM_ITRx_SetConfig>
      break;
 8044ec0:	e00c      	b.n	8044edc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8044ec2:	687b      	ldr	r3, [r7, #4]
 8044ec4:	681a      	ldr	r2, [r3, #0]
 8044ec6:	683b      	ldr	r3, [r7, #0]
 8044ec8:	681b      	ldr	r3, [r3, #0]
 8044eca:	4619      	mov	r1, r3
 8044ecc:	4610      	mov	r0, r2
 8044ece:	f000 f91a 	bl	8045106 <TIM_ITRx_SetConfig>
      break;
 8044ed2:	e003      	b.n	8044edc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8044ed4:	2301      	movs	r3, #1
 8044ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8044ed8:	e000      	b.n	8044edc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8044eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8044edc:	687b      	ldr	r3, [r7, #4]
 8044ede:	2201      	movs	r2, #1
 8044ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8044ee4:	687b      	ldr	r3, [r7, #4]
 8044ee6:	2200      	movs	r2, #0
 8044ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8044eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8044eee:	4618      	mov	r0, r3
 8044ef0:	3710      	adds	r7, #16
 8044ef2:	46bd      	mov	sp, r7
 8044ef4:	bd80      	pop	{r7, pc}

08044ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8044ef6:	b480      	push	{r7}
 8044ef8:	b083      	sub	sp, #12
 8044efa:	af00      	add	r7, sp, #0
 8044efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8044efe:	bf00      	nop
 8044f00:	370c      	adds	r7, #12
 8044f02:	46bd      	mov	sp, r7
 8044f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f08:	4770      	bx	lr

08044f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8044f0a:	b480      	push	{r7}
 8044f0c:	b083      	sub	sp, #12
 8044f0e:	af00      	add	r7, sp, #0
 8044f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8044f12:	bf00      	nop
 8044f14:	370c      	adds	r7, #12
 8044f16:	46bd      	mov	sp, r7
 8044f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f1c:	4770      	bx	lr

08044f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8044f1e:	b480      	push	{r7}
 8044f20:	b083      	sub	sp, #12
 8044f22:	af00      	add	r7, sp, #0
 8044f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8044f26:	bf00      	nop
 8044f28:	370c      	adds	r7, #12
 8044f2a:	46bd      	mov	sp, r7
 8044f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f30:	4770      	bx	lr

08044f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8044f32:	b480      	push	{r7}
 8044f34:	b083      	sub	sp, #12
 8044f36:	af00      	add	r7, sp, #0
 8044f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8044f3a:	bf00      	nop
 8044f3c:	370c      	adds	r7, #12
 8044f3e:	46bd      	mov	sp, r7
 8044f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f44:	4770      	bx	lr
	...

08044f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8044f48:	b480      	push	{r7}
 8044f4a:	b085      	sub	sp, #20
 8044f4c:	af00      	add	r7, sp, #0
 8044f4e:	6078      	str	r0, [r7, #4]
 8044f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8044f52:	687b      	ldr	r3, [r7, #4]
 8044f54:	681b      	ldr	r3, [r3, #0]
 8044f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8044f58:	687b      	ldr	r3, [r7, #4]
 8044f5a:	4a34      	ldr	r2, [pc, #208]	; (804502c <TIM_Base_SetConfig+0xe4>)
 8044f5c:	4293      	cmp	r3, r2
 8044f5e:	d00f      	beq.n	8044f80 <TIM_Base_SetConfig+0x38>
 8044f60:	687b      	ldr	r3, [r7, #4]
 8044f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8044f66:	d00b      	beq.n	8044f80 <TIM_Base_SetConfig+0x38>
 8044f68:	687b      	ldr	r3, [r7, #4]
 8044f6a:	4a31      	ldr	r2, [pc, #196]	; (8045030 <TIM_Base_SetConfig+0xe8>)
 8044f6c:	4293      	cmp	r3, r2
 8044f6e:	d007      	beq.n	8044f80 <TIM_Base_SetConfig+0x38>
 8044f70:	687b      	ldr	r3, [r7, #4]
 8044f72:	4a30      	ldr	r2, [pc, #192]	; (8045034 <TIM_Base_SetConfig+0xec>)
 8044f74:	4293      	cmp	r3, r2
 8044f76:	d003      	beq.n	8044f80 <TIM_Base_SetConfig+0x38>
 8044f78:	687b      	ldr	r3, [r7, #4]
 8044f7a:	4a2f      	ldr	r2, [pc, #188]	; (8045038 <TIM_Base_SetConfig+0xf0>)
 8044f7c:	4293      	cmp	r3, r2
 8044f7e:	d108      	bne.n	8044f92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8044f80:	68fb      	ldr	r3, [r7, #12]
 8044f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8044f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8044f88:	683b      	ldr	r3, [r7, #0]
 8044f8a:	685b      	ldr	r3, [r3, #4]
 8044f8c:	68fa      	ldr	r2, [r7, #12]
 8044f8e:	4313      	orrs	r3, r2
 8044f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8044f92:	687b      	ldr	r3, [r7, #4]
 8044f94:	4a25      	ldr	r2, [pc, #148]	; (804502c <TIM_Base_SetConfig+0xe4>)
 8044f96:	4293      	cmp	r3, r2
 8044f98:	d01b      	beq.n	8044fd2 <TIM_Base_SetConfig+0x8a>
 8044f9a:	687b      	ldr	r3, [r7, #4]
 8044f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8044fa0:	d017      	beq.n	8044fd2 <TIM_Base_SetConfig+0x8a>
 8044fa2:	687b      	ldr	r3, [r7, #4]
 8044fa4:	4a22      	ldr	r2, [pc, #136]	; (8045030 <TIM_Base_SetConfig+0xe8>)
 8044fa6:	4293      	cmp	r3, r2
 8044fa8:	d013      	beq.n	8044fd2 <TIM_Base_SetConfig+0x8a>
 8044faa:	687b      	ldr	r3, [r7, #4]
 8044fac:	4a21      	ldr	r2, [pc, #132]	; (8045034 <TIM_Base_SetConfig+0xec>)
 8044fae:	4293      	cmp	r3, r2
 8044fb0:	d00f      	beq.n	8044fd2 <TIM_Base_SetConfig+0x8a>
 8044fb2:	687b      	ldr	r3, [r7, #4]
 8044fb4:	4a20      	ldr	r2, [pc, #128]	; (8045038 <TIM_Base_SetConfig+0xf0>)
 8044fb6:	4293      	cmp	r3, r2
 8044fb8:	d00b      	beq.n	8044fd2 <TIM_Base_SetConfig+0x8a>
 8044fba:	687b      	ldr	r3, [r7, #4]
 8044fbc:	4a1f      	ldr	r2, [pc, #124]	; (804503c <TIM_Base_SetConfig+0xf4>)
 8044fbe:	4293      	cmp	r3, r2
 8044fc0:	d007      	beq.n	8044fd2 <TIM_Base_SetConfig+0x8a>
 8044fc2:	687b      	ldr	r3, [r7, #4]
 8044fc4:	4a1e      	ldr	r2, [pc, #120]	; (8045040 <TIM_Base_SetConfig+0xf8>)
 8044fc6:	4293      	cmp	r3, r2
 8044fc8:	d003      	beq.n	8044fd2 <TIM_Base_SetConfig+0x8a>
 8044fca:	687b      	ldr	r3, [r7, #4]
 8044fcc:	4a1d      	ldr	r2, [pc, #116]	; (8045044 <TIM_Base_SetConfig+0xfc>)
 8044fce:	4293      	cmp	r3, r2
 8044fd0:	d108      	bne.n	8044fe4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8044fd2:	68fb      	ldr	r3, [r7, #12]
 8044fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8044fda:	683b      	ldr	r3, [r7, #0]
 8044fdc:	68db      	ldr	r3, [r3, #12]
 8044fde:	68fa      	ldr	r2, [r7, #12]
 8044fe0:	4313      	orrs	r3, r2
 8044fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8044fe4:	68fb      	ldr	r3, [r7, #12]
 8044fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8044fea:	683b      	ldr	r3, [r7, #0]
 8044fec:	695b      	ldr	r3, [r3, #20]
 8044fee:	4313      	orrs	r3, r2
 8044ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8044ff2:	687b      	ldr	r3, [r7, #4]
 8044ff4:	68fa      	ldr	r2, [r7, #12]
 8044ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8044ff8:	683b      	ldr	r3, [r7, #0]
 8044ffa:	689a      	ldr	r2, [r3, #8]
 8044ffc:	687b      	ldr	r3, [r7, #4]
 8044ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8045000:	683b      	ldr	r3, [r7, #0]
 8045002:	681a      	ldr	r2, [r3, #0]
 8045004:	687b      	ldr	r3, [r7, #4]
 8045006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8045008:	687b      	ldr	r3, [r7, #4]
 804500a:	4a08      	ldr	r2, [pc, #32]	; (804502c <TIM_Base_SetConfig+0xe4>)
 804500c:	4293      	cmp	r3, r2
 804500e:	d103      	bne.n	8045018 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8045010:	683b      	ldr	r3, [r7, #0]
 8045012:	691a      	ldr	r2, [r3, #16]
 8045014:	687b      	ldr	r3, [r7, #4]
 8045016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8045018:	687b      	ldr	r3, [r7, #4]
 804501a:	2201      	movs	r2, #1
 804501c:	615a      	str	r2, [r3, #20]
}
 804501e:	bf00      	nop
 8045020:	3714      	adds	r7, #20
 8045022:	46bd      	mov	sp, r7
 8045024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045028:	4770      	bx	lr
 804502a:	bf00      	nop
 804502c:	40010000 	.word	0x40010000
 8045030:	40000400 	.word	0x40000400
 8045034:	40000800 	.word	0x40000800
 8045038:	40000c00 	.word	0x40000c00
 804503c:	40014000 	.word	0x40014000
 8045040:	40014400 	.word	0x40014400
 8045044:	40014800 	.word	0x40014800

08045048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8045048:	b480      	push	{r7}
 804504a:	b087      	sub	sp, #28
 804504c:	af00      	add	r7, sp, #0
 804504e:	60f8      	str	r0, [r7, #12]
 8045050:	60b9      	str	r1, [r7, #8]
 8045052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8045054:	68fb      	ldr	r3, [r7, #12]
 8045056:	6a1b      	ldr	r3, [r3, #32]
 8045058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 804505a:	68fb      	ldr	r3, [r7, #12]
 804505c:	6a1b      	ldr	r3, [r3, #32]
 804505e:	f023 0201 	bic.w	r2, r3, #1
 8045062:	68fb      	ldr	r3, [r7, #12]
 8045064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8045066:	68fb      	ldr	r3, [r7, #12]
 8045068:	699b      	ldr	r3, [r3, #24]
 804506a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 804506c:	693b      	ldr	r3, [r7, #16]
 804506e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8045072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8045074:	687b      	ldr	r3, [r7, #4]
 8045076:	011b      	lsls	r3, r3, #4
 8045078:	693a      	ldr	r2, [r7, #16]
 804507a:	4313      	orrs	r3, r2
 804507c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 804507e:	697b      	ldr	r3, [r7, #20]
 8045080:	f023 030a 	bic.w	r3, r3, #10
 8045084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8045086:	697a      	ldr	r2, [r7, #20]
 8045088:	68bb      	ldr	r3, [r7, #8]
 804508a:	4313      	orrs	r3, r2
 804508c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 804508e:	68fb      	ldr	r3, [r7, #12]
 8045090:	693a      	ldr	r2, [r7, #16]
 8045092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8045094:	68fb      	ldr	r3, [r7, #12]
 8045096:	697a      	ldr	r2, [r7, #20]
 8045098:	621a      	str	r2, [r3, #32]
}
 804509a:	bf00      	nop
 804509c:	371c      	adds	r7, #28
 804509e:	46bd      	mov	sp, r7
 80450a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450a4:	4770      	bx	lr

080450a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80450a6:	b480      	push	{r7}
 80450a8:	b087      	sub	sp, #28
 80450aa:	af00      	add	r7, sp, #0
 80450ac:	60f8      	str	r0, [r7, #12]
 80450ae:	60b9      	str	r1, [r7, #8]
 80450b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80450b2:	68fb      	ldr	r3, [r7, #12]
 80450b4:	6a1b      	ldr	r3, [r3, #32]
 80450b6:	f023 0210 	bic.w	r2, r3, #16
 80450ba:	68fb      	ldr	r3, [r7, #12]
 80450bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80450be:	68fb      	ldr	r3, [r7, #12]
 80450c0:	699b      	ldr	r3, [r3, #24]
 80450c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80450c4:	68fb      	ldr	r3, [r7, #12]
 80450c6:	6a1b      	ldr	r3, [r3, #32]
 80450c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80450ca:	697b      	ldr	r3, [r7, #20]
 80450cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80450d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80450d2:	687b      	ldr	r3, [r7, #4]
 80450d4:	031b      	lsls	r3, r3, #12
 80450d6:	697a      	ldr	r2, [r7, #20]
 80450d8:	4313      	orrs	r3, r2
 80450da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80450dc:	693b      	ldr	r3, [r7, #16]
 80450de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80450e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80450e4:	68bb      	ldr	r3, [r7, #8]
 80450e6:	011b      	lsls	r3, r3, #4
 80450e8:	693a      	ldr	r2, [r7, #16]
 80450ea:	4313      	orrs	r3, r2
 80450ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80450ee:	68fb      	ldr	r3, [r7, #12]
 80450f0:	697a      	ldr	r2, [r7, #20]
 80450f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80450f4:	68fb      	ldr	r3, [r7, #12]
 80450f6:	693a      	ldr	r2, [r7, #16]
 80450f8:	621a      	str	r2, [r3, #32]
}
 80450fa:	bf00      	nop
 80450fc:	371c      	adds	r7, #28
 80450fe:	46bd      	mov	sp, r7
 8045100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045104:	4770      	bx	lr

08045106 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8045106:	b480      	push	{r7}
 8045108:	b085      	sub	sp, #20
 804510a:	af00      	add	r7, sp, #0
 804510c:	6078      	str	r0, [r7, #4]
 804510e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8045110:	687b      	ldr	r3, [r7, #4]
 8045112:	689b      	ldr	r3, [r3, #8]
 8045114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8045116:	68fb      	ldr	r3, [r7, #12]
 8045118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804511c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804511e:	683a      	ldr	r2, [r7, #0]
 8045120:	68fb      	ldr	r3, [r7, #12]
 8045122:	4313      	orrs	r3, r2
 8045124:	f043 0307 	orr.w	r3, r3, #7
 8045128:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804512a:	687b      	ldr	r3, [r7, #4]
 804512c:	68fa      	ldr	r2, [r7, #12]
 804512e:	609a      	str	r2, [r3, #8]
}
 8045130:	bf00      	nop
 8045132:	3714      	adds	r7, #20
 8045134:	46bd      	mov	sp, r7
 8045136:	f85d 7b04 	ldr.w	r7, [sp], #4
 804513a:	4770      	bx	lr

0804513c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 804513c:	b480      	push	{r7}
 804513e:	b087      	sub	sp, #28
 8045140:	af00      	add	r7, sp, #0
 8045142:	60f8      	str	r0, [r7, #12]
 8045144:	60b9      	str	r1, [r7, #8]
 8045146:	607a      	str	r2, [r7, #4]
 8045148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 804514a:	68fb      	ldr	r3, [r7, #12]
 804514c:	689b      	ldr	r3, [r3, #8]
 804514e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8045150:	697b      	ldr	r3, [r7, #20]
 8045152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8045156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8045158:	683b      	ldr	r3, [r7, #0]
 804515a:	021a      	lsls	r2, r3, #8
 804515c:	687b      	ldr	r3, [r7, #4]
 804515e:	431a      	orrs	r2, r3
 8045160:	68bb      	ldr	r3, [r7, #8]
 8045162:	4313      	orrs	r3, r2
 8045164:	697a      	ldr	r2, [r7, #20]
 8045166:	4313      	orrs	r3, r2
 8045168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804516a:	68fb      	ldr	r3, [r7, #12]
 804516c:	697a      	ldr	r2, [r7, #20]
 804516e:	609a      	str	r2, [r3, #8]
}
 8045170:	bf00      	nop
 8045172:	371c      	adds	r7, #28
 8045174:	46bd      	mov	sp, r7
 8045176:	f85d 7b04 	ldr.w	r7, [sp], #4
 804517a:	4770      	bx	lr

0804517c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 804517c:	b480      	push	{r7}
 804517e:	b085      	sub	sp, #20
 8045180:	af00      	add	r7, sp, #0
 8045182:	6078      	str	r0, [r7, #4]
 8045184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8045186:	687b      	ldr	r3, [r7, #4]
 8045188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804518c:	2b01      	cmp	r3, #1
 804518e:	d101      	bne.n	8045194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8045190:	2302      	movs	r3, #2
 8045192:	e050      	b.n	8045236 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8045194:	687b      	ldr	r3, [r7, #4]
 8045196:	2201      	movs	r2, #1
 8045198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 804519c:	687b      	ldr	r3, [r7, #4]
 804519e:	2202      	movs	r2, #2
 80451a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80451a4:	687b      	ldr	r3, [r7, #4]
 80451a6:	681b      	ldr	r3, [r3, #0]
 80451a8:	685b      	ldr	r3, [r3, #4]
 80451aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80451ac:	687b      	ldr	r3, [r7, #4]
 80451ae:	681b      	ldr	r3, [r3, #0]
 80451b0:	689b      	ldr	r3, [r3, #8]
 80451b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80451b4:	68fb      	ldr	r3, [r7, #12]
 80451b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80451ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80451bc:	683b      	ldr	r3, [r7, #0]
 80451be:	681b      	ldr	r3, [r3, #0]
 80451c0:	68fa      	ldr	r2, [r7, #12]
 80451c2:	4313      	orrs	r3, r2
 80451c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80451c6:	687b      	ldr	r3, [r7, #4]
 80451c8:	681b      	ldr	r3, [r3, #0]
 80451ca:	68fa      	ldr	r2, [r7, #12]
 80451cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80451ce:	687b      	ldr	r3, [r7, #4]
 80451d0:	681b      	ldr	r3, [r3, #0]
 80451d2:	4a1c      	ldr	r2, [pc, #112]	; (8045244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80451d4:	4293      	cmp	r3, r2
 80451d6:	d018      	beq.n	804520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80451d8:	687b      	ldr	r3, [r7, #4]
 80451da:	681b      	ldr	r3, [r3, #0]
 80451dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80451e0:	d013      	beq.n	804520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80451e2:	687b      	ldr	r3, [r7, #4]
 80451e4:	681b      	ldr	r3, [r3, #0]
 80451e6:	4a18      	ldr	r2, [pc, #96]	; (8045248 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80451e8:	4293      	cmp	r3, r2
 80451ea:	d00e      	beq.n	804520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80451ec:	687b      	ldr	r3, [r7, #4]
 80451ee:	681b      	ldr	r3, [r3, #0]
 80451f0:	4a16      	ldr	r2, [pc, #88]	; (804524c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80451f2:	4293      	cmp	r3, r2
 80451f4:	d009      	beq.n	804520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80451f6:	687b      	ldr	r3, [r7, #4]
 80451f8:	681b      	ldr	r3, [r3, #0]
 80451fa:	4a15      	ldr	r2, [pc, #84]	; (8045250 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80451fc:	4293      	cmp	r3, r2
 80451fe:	d004      	beq.n	804520a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8045200:	687b      	ldr	r3, [r7, #4]
 8045202:	681b      	ldr	r3, [r3, #0]
 8045204:	4a13      	ldr	r2, [pc, #76]	; (8045254 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8045206:	4293      	cmp	r3, r2
 8045208:	d10c      	bne.n	8045224 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 804520a:	68bb      	ldr	r3, [r7, #8]
 804520c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8045210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8045212:	683b      	ldr	r3, [r7, #0]
 8045214:	685b      	ldr	r3, [r3, #4]
 8045216:	68ba      	ldr	r2, [r7, #8]
 8045218:	4313      	orrs	r3, r2
 804521a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 804521c:	687b      	ldr	r3, [r7, #4]
 804521e:	681b      	ldr	r3, [r3, #0]
 8045220:	68ba      	ldr	r2, [r7, #8]
 8045222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8045224:	687b      	ldr	r3, [r7, #4]
 8045226:	2201      	movs	r2, #1
 8045228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804522c:	687b      	ldr	r3, [r7, #4]
 804522e:	2200      	movs	r2, #0
 8045230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8045234:	2300      	movs	r3, #0
}
 8045236:	4618      	mov	r0, r3
 8045238:	3714      	adds	r7, #20
 804523a:	46bd      	mov	sp, r7
 804523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045240:	4770      	bx	lr
 8045242:	bf00      	nop
 8045244:	40010000 	.word	0x40010000
 8045248:	40000400 	.word	0x40000400
 804524c:	40000800 	.word	0x40000800
 8045250:	40000c00 	.word	0x40000c00
 8045254:	40014000 	.word	0x40014000

08045258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8045258:	b480      	push	{r7}
 804525a:	b083      	sub	sp, #12
 804525c:	af00      	add	r7, sp, #0
 804525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8045260:	bf00      	nop
 8045262:	370c      	adds	r7, #12
 8045264:	46bd      	mov	sp, r7
 8045266:	f85d 7b04 	ldr.w	r7, [sp], #4
 804526a:	4770      	bx	lr

0804526c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 804526c:	b480      	push	{r7}
 804526e:	b083      	sub	sp, #12
 8045270:	af00      	add	r7, sp, #0
 8045272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8045274:	bf00      	nop
 8045276:	370c      	adds	r7, #12
 8045278:	46bd      	mov	sp, r7
 804527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804527e:	4770      	bx	lr

08045280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8045280:	b580      	push	{r7, lr}
 8045282:	b082      	sub	sp, #8
 8045284:	af00      	add	r7, sp, #0
 8045286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8045288:	687b      	ldr	r3, [r7, #4]
 804528a:	2b00      	cmp	r3, #0
 804528c:	d101      	bne.n	8045292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804528e:	2301      	movs	r3, #1
 8045290:	e03f      	b.n	8045312 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8045292:	687b      	ldr	r3, [r7, #4]
 8045294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045298:	b2db      	uxtb	r3, r3
 804529a:	2b00      	cmp	r3, #0
 804529c:	d106      	bne.n	80452ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 804529e:	687b      	ldr	r3, [r7, #4]
 80452a0:	2200      	movs	r2, #0
 80452a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80452a6:	6878      	ldr	r0, [r7, #4]
 80452a8:	f7fd fb84 	bl	80429b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80452ac:	687b      	ldr	r3, [r7, #4]
 80452ae:	2224      	movs	r2, #36	; 0x24
 80452b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80452b4:	687b      	ldr	r3, [r7, #4]
 80452b6:	681b      	ldr	r3, [r3, #0]
 80452b8:	68da      	ldr	r2, [r3, #12]
 80452ba:	687b      	ldr	r3, [r7, #4]
 80452bc:	681b      	ldr	r3, [r3, #0]
 80452be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80452c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80452c4:	6878      	ldr	r0, [r7, #4]
 80452c6:	f000 f929 	bl	804551c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80452ca:	687b      	ldr	r3, [r7, #4]
 80452cc:	681b      	ldr	r3, [r3, #0]
 80452ce:	691a      	ldr	r2, [r3, #16]
 80452d0:	687b      	ldr	r3, [r7, #4]
 80452d2:	681b      	ldr	r3, [r3, #0]
 80452d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80452d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80452da:	687b      	ldr	r3, [r7, #4]
 80452dc:	681b      	ldr	r3, [r3, #0]
 80452de:	695a      	ldr	r2, [r3, #20]
 80452e0:	687b      	ldr	r3, [r7, #4]
 80452e2:	681b      	ldr	r3, [r3, #0]
 80452e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80452e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80452ea:	687b      	ldr	r3, [r7, #4]
 80452ec:	681b      	ldr	r3, [r3, #0]
 80452ee:	68da      	ldr	r2, [r3, #12]
 80452f0:	687b      	ldr	r3, [r7, #4]
 80452f2:	681b      	ldr	r3, [r3, #0]
 80452f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80452f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80452fa:	687b      	ldr	r3, [r7, #4]
 80452fc:	2200      	movs	r2, #0
 80452fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8045300:	687b      	ldr	r3, [r7, #4]
 8045302:	2220      	movs	r2, #32
 8045304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8045308:	687b      	ldr	r3, [r7, #4]
 804530a:	2220      	movs	r2, #32
 804530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8045310:	2300      	movs	r3, #0
}
 8045312:	4618      	mov	r0, r3
 8045314:	3708      	adds	r7, #8
 8045316:	46bd      	mov	sp, r7
 8045318:	bd80      	pop	{r7, pc}

0804531a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804531a:	b580      	push	{r7, lr}
 804531c:	b08a      	sub	sp, #40	; 0x28
 804531e:	af02      	add	r7, sp, #8
 8045320:	60f8      	str	r0, [r7, #12]
 8045322:	60b9      	str	r1, [r7, #8]
 8045324:	603b      	str	r3, [r7, #0]
 8045326:	4613      	mov	r3, r2
 8045328:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 804532a:	2300      	movs	r3, #0
 804532c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 804532e:	68fb      	ldr	r3, [r7, #12]
 8045330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045334:	b2db      	uxtb	r3, r3
 8045336:	2b20      	cmp	r3, #32
 8045338:	d17c      	bne.n	8045434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 804533a:	68bb      	ldr	r3, [r7, #8]
 804533c:	2b00      	cmp	r3, #0
 804533e:	d002      	beq.n	8045346 <HAL_UART_Transmit+0x2c>
 8045340:	88fb      	ldrh	r3, [r7, #6]
 8045342:	2b00      	cmp	r3, #0
 8045344:	d101      	bne.n	804534a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8045346:	2301      	movs	r3, #1
 8045348:	e075      	b.n	8045436 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 804534a:	68fb      	ldr	r3, [r7, #12]
 804534c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8045350:	2b01      	cmp	r3, #1
 8045352:	d101      	bne.n	8045358 <HAL_UART_Transmit+0x3e>
 8045354:	2302      	movs	r3, #2
 8045356:	e06e      	b.n	8045436 <HAL_UART_Transmit+0x11c>
 8045358:	68fb      	ldr	r3, [r7, #12]
 804535a:	2201      	movs	r2, #1
 804535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045360:	68fb      	ldr	r3, [r7, #12]
 8045362:	2200      	movs	r2, #0
 8045364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8045366:	68fb      	ldr	r3, [r7, #12]
 8045368:	2221      	movs	r2, #33	; 0x21
 804536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 804536e:	f7fd fbc9 	bl	8042b04 <HAL_GetTick>
 8045372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8045374:	68fb      	ldr	r3, [r7, #12]
 8045376:	88fa      	ldrh	r2, [r7, #6]
 8045378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 804537a:	68fb      	ldr	r3, [r7, #12]
 804537c:	88fa      	ldrh	r2, [r7, #6]
 804537e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8045380:	68fb      	ldr	r3, [r7, #12]
 8045382:	689b      	ldr	r3, [r3, #8]
 8045384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8045388:	d108      	bne.n	804539c <HAL_UART_Transmit+0x82>
 804538a:	68fb      	ldr	r3, [r7, #12]
 804538c:	691b      	ldr	r3, [r3, #16]
 804538e:	2b00      	cmp	r3, #0
 8045390:	d104      	bne.n	804539c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8045392:	2300      	movs	r3, #0
 8045394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8045396:	68bb      	ldr	r3, [r7, #8]
 8045398:	61bb      	str	r3, [r7, #24]
 804539a:	e003      	b.n	80453a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 804539c:	68bb      	ldr	r3, [r7, #8]
 804539e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80453a0:	2300      	movs	r3, #0
 80453a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80453a4:	68fb      	ldr	r3, [r7, #12]
 80453a6:	2200      	movs	r2, #0
 80453a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80453ac:	e02a      	b.n	8045404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80453ae:	683b      	ldr	r3, [r7, #0]
 80453b0:	9300      	str	r3, [sp, #0]
 80453b2:	697b      	ldr	r3, [r7, #20]
 80453b4:	2200      	movs	r2, #0
 80453b6:	2180      	movs	r1, #128	; 0x80
 80453b8:	68f8      	ldr	r0, [r7, #12]
 80453ba:	f000 f840 	bl	804543e <UART_WaitOnFlagUntilTimeout>
 80453be:	4603      	mov	r3, r0
 80453c0:	2b00      	cmp	r3, #0
 80453c2:	d001      	beq.n	80453c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80453c4:	2303      	movs	r3, #3
 80453c6:	e036      	b.n	8045436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80453c8:	69fb      	ldr	r3, [r7, #28]
 80453ca:	2b00      	cmp	r3, #0
 80453cc:	d10b      	bne.n	80453e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80453ce:	69bb      	ldr	r3, [r7, #24]
 80453d0:	881b      	ldrh	r3, [r3, #0]
 80453d2:	461a      	mov	r2, r3
 80453d4:	68fb      	ldr	r3, [r7, #12]
 80453d6:	681b      	ldr	r3, [r3, #0]
 80453d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80453dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80453de:	69bb      	ldr	r3, [r7, #24]
 80453e0:	3302      	adds	r3, #2
 80453e2:	61bb      	str	r3, [r7, #24]
 80453e4:	e007      	b.n	80453f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80453e6:	69fb      	ldr	r3, [r7, #28]
 80453e8:	781a      	ldrb	r2, [r3, #0]
 80453ea:	68fb      	ldr	r3, [r7, #12]
 80453ec:	681b      	ldr	r3, [r3, #0]
 80453ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80453f0:	69fb      	ldr	r3, [r7, #28]
 80453f2:	3301      	adds	r3, #1
 80453f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80453f6:	68fb      	ldr	r3, [r7, #12]
 80453f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80453fa:	b29b      	uxth	r3, r3
 80453fc:	3b01      	subs	r3, #1
 80453fe:	b29a      	uxth	r2, r3
 8045400:	68fb      	ldr	r3, [r7, #12]
 8045402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8045404:	68fb      	ldr	r3, [r7, #12]
 8045406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8045408:	b29b      	uxth	r3, r3
 804540a:	2b00      	cmp	r3, #0
 804540c:	d1cf      	bne.n	80453ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 804540e:	683b      	ldr	r3, [r7, #0]
 8045410:	9300      	str	r3, [sp, #0]
 8045412:	697b      	ldr	r3, [r7, #20]
 8045414:	2200      	movs	r2, #0
 8045416:	2140      	movs	r1, #64	; 0x40
 8045418:	68f8      	ldr	r0, [r7, #12]
 804541a:	f000 f810 	bl	804543e <UART_WaitOnFlagUntilTimeout>
 804541e:	4603      	mov	r3, r0
 8045420:	2b00      	cmp	r3, #0
 8045422:	d001      	beq.n	8045428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8045424:	2303      	movs	r3, #3
 8045426:	e006      	b.n	8045436 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8045428:	68fb      	ldr	r3, [r7, #12]
 804542a:	2220      	movs	r2, #32
 804542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8045430:	2300      	movs	r3, #0
 8045432:	e000      	b.n	8045436 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8045434:	2302      	movs	r3, #2
  }
}
 8045436:	4618      	mov	r0, r3
 8045438:	3720      	adds	r7, #32
 804543a:	46bd      	mov	sp, r7
 804543c:	bd80      	pop	{r7, pc}

0804543e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 804543e:	b580      	push	{r7, lr}
 8045440:	b090      	sub	sp, #64	; 0x40
 8045442:	af00      	add	r7, sp, #0
 8045444:	60f8      	str	r0, [r7, #12]
 8045446:	60b9      	str	r1, [r7, #8]
 8045448:	603b      	str	r3, [r7, #0]
 804544a:	4613      	mov	r3, r2
 804544c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804544e:	e050      	b.n	80454f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8045450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8045452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045456:	d04c      	beq.n	80454f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8045458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804545a:	2b00      	cmp	r3, #0
 804545c:	d007      	beq.n	804546e <UART_WaitOnFlagUntilTimeout+0x30>
 804545e:	f7fd fb51 	bl	8042b04 <HAL_GetTick>
 8045462:	4602      	mov	r2, r0
 8045464:	683b      	ldr	r3, [r7, #0]
 8045466:	1ad3      	subs	r3, r2, r3
 8045468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 804546a:	429a      	cmp	r2, r3
 804546c:	d241      	bcs.n	80454f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 804546e:	68fb      	ldr	r3, [r7, #12]
 8045470:	681b      	ldr	r3, [r3, #0]
 8045472:	330c      	adds	r3, #12
 8045474:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045478:	e853 3f00 	ldrex	r3, [r3]
 804547c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 804547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8045484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8045486:	68fb      	ldr	r3, [r7, #12]
 8045488:	681b      	ldr	r3, [r3, #0]
 804548a:	330c      	adds	r3, #12
 804548c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 804548e:	637a      	str	r2, [r7, #52]	; 0x34
 8045490:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8045494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8045496:	e841 2300 	strex	r3, r2, [r1]
 804549a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 804549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804549e:	2b00      	cmp	r3, #0
 80454a0:	d1e5      	bne.n	804546e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80454a2:	68fb      	ldr	r3, [r7, #12]
 80454a4:	681b      	ldr	r3, [r3, #0]
 80454a6:	3314      	adds	r3, #20
 80454a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80454aa:	697b      	ldr	r3, [r7, #20]
 80454ac:	e853 3f00 	ldrex	r3, [r3]
 80454b0:	613b      	str	r3, [r7, #16]
   return(result);
 80454b2:	693b      	ldr	r3, [r7, #16]
 80454b4:	f023 0301 	bic.w	r3, r3, #1
 80454b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80454ba:	68fb      	ldr	r3, [r7, #12]
 80454bc:	681b      	ldr	r3, [r3, #0]
 80454be:	3314      	adds	r3, #20
 80454c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80454c2:	623a      	str	r2, [r7, #32]
 80454c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80454c6:	69f9      	ldr	r1, [r7, #28]
 80454c8:	6a3a      	ldr	r2, [r7, #32]
 80454ca:	e841 2300 	strex	r3, r2, [r1]
 80454ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80454d0:	69bb      	ldr	r3, [r7, #24]
 80454d2:	2b00      	cmp	r3, #0
 80454d4:	d1e5      	bne.n	80454a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80454d6:	68fb      	ldr	r3, [r7, #12]
 80454d8:	2220      	movs	r2, #32
 80454da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80454de:	68fb      	ldr	r3, [r7, #12]
 80454e0:	2220      	movs	r2, #32
 80454e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80454e6:	68fb      	ldr	r3, [r7, #12]
 80454e8:	2200      	movs	r2, #0
 80454ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80454ee:	2303      	movs	r3, #3
 80454f0:	e00f      	b.n	8045512 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80454f2:	68fb      	ldr	r3, [r7, #12]
 80454f4:	681b      	ldr	r3, [r3, #0]
 80454f6:	681a      	ldr	r2, [r3, #0]
 80454f8:	68bb      	ldr	r3, [r7, #8]
 80454fa:	4013      	ands	r3, r2
 80454fc:	68ba      	ldr	r2, [r7, #8]
 80454fe:	429a      	cmp	r2, r3
 8045500:	bf0c      	ite	eq
 8045502:	2301      	moveq	r3, #1
 8045504:	2300      	movne	r3, #0
 8045506:	b2db      	uxtb	r3, r3
 8045508:	461a      	mov	r2, r3
 804550a:	79fb      	ldrb	r3, [r7, #7]
 804550c:	429a      	cmp	r2, r3
 804550e:	d09f      	beq.n	8045450 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8045510:	2300      	movs	r3, #0
}
 8045512:	4618      	mov	r0, r3
 8045514:	3740      	adds	r7, #64	; 0x40
 8045516:	46bd      	mov	sp, r7
 8045518:	bd80      	pop	{r7, pc}
	...

0804551c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 804551c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8045520:	b0c0      	sub	sp, #256	; 0x100
 8045522:	af00      	add	r7, sp, #0
 8045524:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804552c:	681b      	ldr	r3, [r3, #0]
 804552e:	691b      	ldr	r3, [r3, #16]
 8045530:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8045534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045538:	68d9      	ldr	r1, [r3, #12]
 804553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804553e:	681a      	ldr	r2, [r3, #0]
 8045540:	ea40 0301 	orr.w	r3, r0, r1
 8045544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804554a:	689a      	ldr	r2, [r3, #8]
 804554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045550:	691b      	ldr	r3, [r3, #16]
 8045552:	431a      	orrs	r2, r3
 8045554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045558:	695b      	ldr	r3, [r3, #20]
 804555a:	431a      	orrs	r2, r3
 804555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045560:	69db      	ldr	r3, [r3, #28]
 8045562:	4313      	orrs	r3, r2
 8045564:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8045568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804556c:	681b      	ldr	r3, [r3, #0]
 804556e:	68db      	ldr	r3, [r3, #12]
 8045570:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8045574:	f021 010c 	bic.w	r1, r1, #12
 8045578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804557c:	681a      	ldr	r2, [r3, #0]
 804557e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8045582:	430b      	orrs	r3, r1
 8045584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8045586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804558a:	681b      	ldr	r3, [r3, #0]
 804558c:	695b      	ldr	r3, [r3, #20]
 804558e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8045592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045596:	6999      	ldr	r1, [r3, #24]
 8045598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804559c:	681a      	ldr	r2, [r3, #0]
 804559e:	ea40 0301 	orr.w	r3, r0, r1
 80455a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80455a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80455a8:	681a      	ldr	r2, [r3, #0]
 80455aa:	4b8f      	ldr	r3, [pc, #572]	; (80457e8 <UART_SetConfig+0x2cc>)
 80455ac:	429a      	cmp	r2, r3
 80455ae:	d005      	beq.n	80455bc <UART_SetConfig+0xa0>
 80455b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80455b4:	681a      	ldr	r2, [r3, #0]
 80455b6:	4b8d      	ldr	r3, [pc, #564]	; (80457ec <UART_SetConfig+0x2d0>)
 80455b8:	429a      	cmp	r2, r3
 80455ba:	d104      	bne.n	80455c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80455bc:	f7ff f97a 	bl	80448b4 <HAL_RCC_GetPCLK2Freq>
 80455c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80455c4:	e003      	b.n	80455ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80455c6:	f7ff f961 	bl	804488c <HAL_RCC_GetPCLK1Freq>
 80455ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80455ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80455d2:	69db      	ldr	r3, [r3, #28]
 80455d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80455d8:	f040 810c 	bne.w	80457f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80455dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80455e0:	2200      	movs	r2, #0
 80455e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80455e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80455ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80455ee:	4622      	mov	r2, r4
 80455f0:	462b      	mov	r3, r5
 80455f2:	1891      	adds	r1, r2, r2
 80455f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80455f6:	415b      	adcs	r3, r3
 80455f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80455fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80455fe:	4621      	mov	r1, r4
 8045600:	eb12 0801 	adds.w	r8, r2, r1
 8045604:	4629      	mov	r1, r5
 8045606:	eb43 0901 	adc.w	r9, r3, r1
 804560a:	f04f 0200 	mov.w	r2, #0
 804560e:	f04f 0300 	mov.w	r3, #0
 8045612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8045616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 804561a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804561e:	4690      	mov	r8, r2
 8045620:	4699      	mov	r9, r3
 8045622:	4623      	mov	r3, r4
 8045624:	eb18 0303 	adds.w	r3, r8, r3
 8045628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 804562c:	462b      	mov	r3, r5
 804562e:	eb49 0303 	adc.w	r3, r9, r3
 8045632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8045636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804563a:	685b      	ldr	r3, [r3, #4]
 804563c:	2200      	movs	r2, #0
 804563e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8045642:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8045646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 804564a:	460b      	mov	r3, r1
 804564c:	18db      	adds	r3, r3, r3
 804564e:	653b      	str	r3, [r7, #80]	; 0x50
 8045650:	4613      	mov	r3, r2
 8045652:	eb42 0303 	adc.w	r3, r2, r3
 8045656:	657b      	str	r3, [r7, #84]	; 0x54
 8045658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 804565c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8045660:	f7fb faaa 	bl	8040bb8 <__aeabi_uldivmod>
 8045664:	4602      	mov	r2, r0
 8045666:	460b      	mov	r3, r1
 8045668:	4b61      	ldr	r3, [pc, #388]	; (80457f0 <UART_SetConfig+0x2d4>)
 804566a:	fba3 2302 	umull	r2, r3, r3, r2
 804566e:	095b      	lsrs	r3, r3, #5
 8045670:	011c      	lsls	r4, r3, #4
 8045672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8045676:	2200      	movs	r2, #0
 8045678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 804567c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8045680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8045684:	4642      	mov	r2, r8
 8045686:	464b      	mov	r3, r9
 8045688:	1891      	adds	r1, r2, r2
 804568a:	64b9      	str	r1, [r7, #72]	; 0x48
 804568c:	415b      	adcs	r3, r3
 804568e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8045690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8045694:	4641      	mov	r1, r8
 8045696:	eb12 0a01 	adds.w	sl, r2, r1
 804569a:	4649      	mov	r1, r9
 804569c:	eb43 0b01 	adc.w	fp, r3, r1
 80456a0:	f04f 0200 	mov.w	r2, #0
 80456a4:	f04f 0300 	mov.w	r3, #0
 80456a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80456ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80456b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80456b4:	4692      	mov	sl, r2
 80456b6:	469b      	mov	fp, r3
 80456b8:	4643      	mov	r3, r8
 80456ba:	eb1a 0303 	adds.w	r3, sl, r3
 80456be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80456c2:	464b      	mov	r3, r9
 80456c4:	eb4b 0303 	adc.w	r3, fp, r3
 80456c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80456cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80456d0:	685b      	ldr	r3, [r3, #4]
 80456d2:	2200      	movs	r2, #0
 80456d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80456d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80456dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80456e0:	460b      	mov	r3, r1
 80456e2:	18db      	adds	r3, r3, r3
 80456e4:	643b      	str	r3, [r7, #64]	; 0x40
 80456e6:	4613      	mov	r3, r2
 80456e8:	eb42 0303 	adc.w	r3, r2, r3
 80456ec:	647b      	str	r3, [r7, #68]	; 0x44
 80456ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80456f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80456f6:	f7fb fa5f 	bl	8040bb8 <__aeabi_uldivmod>
 80456fa:	4602      	mov	r2, r0
 80456fc:	460b      	mov	r3, r1
 80456fe:	4611      	mov	r1, r2
 8045700:	4b3b      	ldr	r3, [pc, #236]	; (80457f0 <UART_SetConfig+0x2d4>)
 8045702:	fba3 2301 	umull	r2, r3, r3, r1
 8045706:	095b      	lsrs	r3, r3, #5
 8045708:	2264      	movs	r2, #100	; 0x64
 804570a:	fb02 f303 	mul.w	r3, r2, r3
 804570e:	1acb      	subs	r3, r1, r3
 8045710:	00db      	lsls	r3, r3, #3
 8045712:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8045716:	4b36      	ldr	r3, [pc, #216]	; (80457f0 <UART_SetConfig+0x2d4>)
 8045718:	fba3 2302 	umull	r2, r3, r3, r2
 804571c:	095b      	lsrs	r3, r3, #5
 804571e:	005b      	lsls	r3, r3, #1
 8045720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8045724:	441c      	add	r4, r3
 8045726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804572a:	2200      	movs	r2, #0
 804572c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8045730:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8045734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8045738:	4642      	mov	r2, r8
 804573a:	464b      	mov	r3, r9
 804573c:	1891      	adds	r1, r2, r2
 804573e:	63b9      	str	r1, [r7, #56]	; 0x38
 8045740:	415b      	adcs	r3, r3
 8045742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8045744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8045748:	4641      	mov	r1, r8
 804574a:	1851      	adds	r1, r2, r1
 804574c:	6339      	str	r1, [r7, #48]	; 0x30
 804574e:	4649      	mov	r1, r9
 8045750:	414b      	adcs	r3, r1
 8045752:	637b      	str	r3, [r7, #52]	; 0x34
 8045754:	f04f 0200 	mov.w	r2, #0
 8045758:	f04f 0300 	mov.w	r3, #0
 804575c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8045760:	4659      	mov	r1, fp
 8045762:	00cb      	lsls	r3, r1, #3
 8045764:	4651      	mov	r1, sl
 8045766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 804576a:	4651      	mov	r1, sl
 804576c:	00ca      	lsls	r2, r1, #3
 804576e:	4610      	mov	r0, r2
 8045770:	4619      	mov	r1, r3
 8045772:	4603      	mov	r3, r0
 8045774:	4642      	mov	r2, r8
 8045776:	189b      	adds	r3, r3, r2
 8045778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 804577c:	464b      	mov	r3, r9
 804577e:	460a      	mov	r2, r1
 8045780:	eb42 0303 	adc.w	r3, r2, r3
 8045784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8045788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804578c:	685b      	ldr	r3, [r3, #4]
 804578e:	2200      	movs	r2, #0
 8045790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8045794:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8045798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 804579c:	460b      	mov	r3, r1
 804579e:	18db      	adds	r3, r3, r3
 80457a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80457a2:	4613      	mov	r3, r2
 80457a4:	eb42 0303 	adc.w	r3, r2, r3
 80457a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80457aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80457ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80457b2:	f7fb fa01 	bl	8040bb8 <__aeabi_uldivmod>
 80457b6:	4602      	mov	r2, r0
 80457b8:	460b      	mov	r3, r1
 80457ba:	4b0d      	ldr	r3, [pc, #52]	; (80457f0 <UART_SetConfig+0x2d4>)
 80457bc:	fba3 1302 	umull	r1, r3, r3, r2
 80457c0:	095b      	lsrs	r3, r3, #5
 80457c2:	2164      	movs	r1, #100	; 0x64
 80457c4:	fb01 f303 	mul.w	r3, r1, r3
 80457c8:	1ad3      	subs	r3, r2, r3
 80457ca:	00db      	lsls	r3, r3, #3
 80457cc:	3332      	adds	r3, #50	; 0x32
 80457ce:	4a08      	ldr	r2, [pc, #32]	; (80457f0 <UART_SetConfig+0x2d4>)
 80457d0:	fba2 2303 	umull	r2, r3, r2, r3
 80457d4:	095b      	lsrs	r3, r3, #5
 80457d6:	f003 0207 	and.w	r2, r3, #7
 80457da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80457de:	681b      	ldr	r3, [r3, #0]
 80457e0:	4422      	add	r2, r4
 80457e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80457e4:	e105      	b.n	80459f2 <UART_SetConfig+0x4d6>
 80457e6:	bf00      	nop
 80457e8:	40011000 	.word	0x40011000
 80457ec:	40011400 	.word	0x40011400
 80457f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80457f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80457f8:	2200      	movs	r2, #0
 80457fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80457fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8045802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8045806:	4642      	mov	r2, r8
 8045808:	464b      	mov	r3, r9
 804580a:	1891      	adds	r1, r2, r2
 804580c:	6239      	str	r1, [r7, #32]
 804580e:	415b      	adcs	r3, r3
 8045810:	627b      	str	r3, [r7, #36]	; 0x24
 8045812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8045816:	4641      	mov	r1, r8
 8045818:	1854      	adds	r4, r2, r1
 804581a:	4649      	mov	r1, r9
 804581c:	eb43 0501 	adc.w	r5, r3, r1
 8045820:	f04f 0200 	mov.w	r2, #0
 8045824:	f04f 0300 	mov.w	r3, #0
 8045828:	00eb      	lsls	r3, r5, #3
 804582a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 804582e:	00e2      	lsls	r2, r4, #3
 8045830:	4614      	mov	r4, r2
 8045832:	461d      	mov	r5, r3
 8045834:	4643      	mov	r3, r8
 8045836:	18e3      	adds	r3, r4, r3
 8045838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 804583c:	464b      	mov	r3, r9
 804583e:	eb45 0303 	adc.w	r3, r5, r3
 8045842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8045846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804584a:	685b      	ldr	r3, [r3, #4]
 804584c:	2200      	movs	r2, #0
 804584e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8045852:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8045856:	f04f 0200 	mov.w	r2, #0
 804585a:	f04f 0300 	mov.w	r3, #0
 804585e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8045862:	4629      	mov	r1, r5
 8045864:	008b      	lsls	r3, r1, #2
 8045866:	4621      	mov	r1, r4
 8045868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 804586c:	4621      	mov	r1, r4
 804586e:	008a      	lsls	r2, r1, #2
 8045870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8045874:	f7fb f9a0 	bl	8040bb8 <__aeabi_uldivmod>
 8045878:	4602      	mov	r2, r0
 804587a:	460b      	mov	r3, r1
 804587c:	4b60      	ldr	r3, [pc, #384]	; (8045a00 <UART_SetConfig+0x4e4>)
 804587e:	fba3 2302 	umull	r2, r3, r3, r2
 8045882:	095b      	lsrs	r3, r3, #5
 8045884:	011c      	lsls	r4, r3, #4
 8045886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804588a:	2200      	movs	r2, #0
 804588c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8045890:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8045894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8045898:	4642      	mov	r2, r8
 804589a:	464b      	mov	r3, r9
 804589c:	1891      	adds	r1, r2, r2
 804589e:	61b9      	str	r1, [r7, #24]
 80458a0:	415b      	adcs	r3, r3
 80458a2:	61fb      	str	r3, [r7, #28]
 80458a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80458a8:	4641      	mov	r1, r8
 80458aa:	1851      	adds	r1, r2, r1
 80458ac:	6139      	str	r1, [r7, #16]
 80458ae:	4649      	mov	r1, r9
 80458b0:	414b      	adcs	r3, r1
 80458b2:	617b      	str	r3, [r7, #20]
 80458b4:	f04f 0200 	mov.w	r2, #0
 80458b8:	f04f 0300 	mov.w	r3, #0
 80458bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80458c0:	4659      	mov	r1, fp
 80458c2:	00cb      	lsls	r3, r1, #3
 80458c4:	4651      	mov	r1, sl
 80458c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80458ca:	4651      	mov	r1, sl
 80458cc:	00ca      	lsls	r2, r1, #3
 80458ce:	4610      	mov	r0, r2
 80458d0:	4619      	mov	r1, r3
 80458d2:	4603      	mov	r3, r0
 80458d4:	4642      	mov	r2, r8
 80458d6:	189b      	adds	r3, r3, r2
 80458d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80458dc:	464b      	mov	r3, r9
 80458de:	460a      	mov	r2, r1
 80458e0:	eb42 0303 	adc.w	r3, r2, r3
 80458e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80458e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80458ec:	685b      	ldr	r3, [r3, #4]
 80458ee:	2200      	movs	r2, #0
 80458f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80458f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80458f4:	f04f 0200 	mov.w	r2, #0
 80458f8:	f04f 0300 	mov.w	r3, #0
 80458fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8045900:	4649      	mov	r1, r9
 8045902:	008b      	lsls	r3, r1, #2
 8045904:	4641      	mov	r1, r8
 8045906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 804590a:	4641      	mov	r1, r8
 804590c:	008a      	lsls	r2, r1, #2
 804590e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8045912:	f7fb f951 	bl	8040bb8 <__aeabi_uldivmod>
 8045916:	4602      	mov	r2, r0
 8045918:	460b      	mov	r3, r1
 804591a:	4b39      	ldr	r3, [pc, #228]	; (8045a00 <UART_SetConfig+0x4e4>)
 804591c:	fba3 1302 	umull	r1, r3, r3, r2
 8045920:	095b      	lsrs	r3, r3, #5
 8045922:	2164      	movs	r1, #100	; 0x64
 8045924:	fb01 f303 	mul.w	r3, r1, r3
 8045928:	1ad3      	subs	r3, r2, r3
 804592a:	011b      	lsls	r3, r3, #4
 804592c:	3332      	adds	r3, #50	; 0x32
 804592e:	4a34      	ldr	r2, [pc, #208]	; (8045a00 <UART_SetConfig+0x4e4>)
 8045930:	fba2 2303 	umull	r2, r3, r2, r3
 8045934:	095b      	lsrs	r3, r3, #5
 8045936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804593a:	441c      	add	r4, r3
 804593c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8045940:	2200      	movs	r2, #0
 8045942:	673b      	str	r3, [r7, #112]	; 0x70
 8045944:	677a      	str	r2, [r7, #116]	; 0x74
 8045946:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 804594a:	4642      	mov	r2, r8
 804594c:	464b      	mov	r3, r9
 804594e:	1891      	adds	r1, r2, r2
 8045950:	60b9      	str	r1, [r7, #8]
 8045952:	415b      	adcs	r3, r3
 8045954:	60fb      	str	r3, [r7, #12]
 8045956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 804595a:	4641      	mov	r1, r8
 804595c:	1851      	adds	r1, r2, r1
 804595e:	6039      	str	r1, [r7, #0]
 8045960:	4649      	mov	r1, r9
 8045962:	414b      	adcs	r3, r1
 8045964:	607b      	str	r3, [r7, #4]
 8045966:	f04f 0200 	mov.w	r2, #0
 804596a:	f04f 0300 	mov.w	r3, #0
 804596e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8045972:	4659      	mov	r1, fp
 8045974:	00cb      	lsls	r3, r1, #3
 8045976:	4651      	mov	r1, sl
 8045978:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 804597c:	4651      	mov	r1, sl
 804597e:	00ca      	lsls	r2, r1, #3
 8045980:	4610      	mov	r0, r2
 8045982:	4619      	mov	r1, r3
 8045984:	4603      	mov	r3, r0
 8045986:	4642      	mov	r2, r8
 8045988:	189b      	adds	r3, r3, r2
 804598a:	66bb      	str	r3, [r7, #104]	; 0x68
 804598c:	464b      	mov	r3, r9
 804598e:	460a      	mov	r2, r1
 8045990:	eb42 0303 	adc.w	r3, r2, r3
 8045994:	66fb      	str	r3, [r7, #108]	; 0x6c
 8045996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804599a:	685b      	ldr	r3, [r3, #4]
 804599c:	2200      	movs	r2, #0
 804599e:	663b      	str	r3, [r7, #96]	; 0x60
 80459a0:	667a      	str	r2, [r7, #100]	; 0x64
 80459a2:	f04f 0200 	mov.w	r2, #0
 80459a6:	f04f 0300 	mov.w	r3, #0
 80459aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80459ae:	4649      	mov	r1, r9
 80459b0:	008b      	lsls	r3, r1, #2
 80459b2:	4641      	mov	r1, r8
 80459b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80459b8:	4641      	mov	r1, r8
 80459ba:	008a      	lsls	r2, r1, #2
 80459bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80459c0:	f7fb f8fa 	bl	8040bb8 <__aeabi_uldivmod>
 80459c4:	4602      	mov	r2, r0
 80459c6:	460b      	mov	r3, r1
 80459c8:	4b0d      	ldr	r3, [pc, #52]	; (8045a00 <UART_SetConfig+0x4e4>)
 80459ca:	fba3 1302 	umull	r1, r3, r3, r2
 80459ce:	095b      	lsrs	r3, r3, #5
 80459d0:	2164      	movs	r1, #100	; 0x64
 80459d2:	fb01 f303 	mul.w	r3, r1, r3
 80459d6:	1ad3      	subs	r3, r2, r3
 80459d8:	011b      	lsls	r3, r3, #4
 80459da:	3332      	adds	r3, #50	; 0x32
 80459dc:	4a08      	ldr	r2, [pc, #32]	; (8045a00 <UART_SetConfig+0x4e4>)
 80459de:	fba2 2303 	umull	r2, r3, r2, r3
 80459e2:	095b      	lsrs	r3, r3, #5
 80459e4:	f003 020f 	and.w	r2, r3, #15
 80459e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80459ec:	681b      	ldr	r3, [r3, #0]
 80459ee:	4422      	add	r2, r4
 80459f0:	609a      	str	r2, [r3, #8]
}
 80459f2:	bf00      	nop
 80459f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80459f8:	46bd      	mov	sp, r7
 80459fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80459fe:	bf00      	nop
 8045a00:	51eb851f 	.word	0x51eb851f

08045a04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8045a04:	b480      	push	{r7}
 8045a06:	b085      	sub	sp, #20
 8045a08:	af00      	add	r7, sp, #0
 8045a0a:	4603      	mov	r3, r0
 8045a0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8045a0e:	2300      	movs	r3, #0
 8045a10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8045a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8045a16:	2b84      	cmp	r3, #132	; 0x84
 8045a18:	d005      	beq.n	8045a26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8045a1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8045a1e:	68fb      	ldr	r3, [r7, #12]
 8045a20:	4413      	add	r3, r2
 8045a22:	3303      	adds	r3, #3
 8045a24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8045a26:	68fb      	ldr	r3, [r7, #12]
}
 8045a28:	4618      	mov	r0, r3
 8045a2a:	3714      	adds	r7, #20
 8045a2c:	46bd      	mov	sp, r7
 8045a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045a32:	4770      	bx	lr

08045a34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8045a34:	b580      	push	{r7, lr}
 8045a36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8045a38:	f000 fb86 	bl	8046148 <vTaskStartScheduler>
  
  return osOK;
 8045a3c:	2300      	movs	r3, #0
}
 8045a3e:	4618      	mov	r0, r3
 8045a40:	bd80      	pop	{r7, pc}

08045a42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8045a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8045a44:	b089      	sub	sp, #36	; 0x24
 8045a46:	af04      	add	r7, sp, #16
 8045a48:	6078      	str	r0, [r7, #4]
 8045a4a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8045a4c:	687b      	ldr	r3, [r7, #4]
 8045a4e:	695b      	ldr	r3, [r3, #20]
 8045a50:	2b00      	cmp	r3, #0
 8045a52:	d020      	beq.n	8045a96 <osThreadCreate+0x54>
 8045a54:	687b      	ldr	r3, [r7, #4]
 8045a56:	699b      	ldr	r3, [r3, #24]
 8045a58:	2b00      	cmp	r3, #0
 8045a5a:	d01c      	beq.n	8045a96 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8045a5c:	687b      	ldr	r3, [r7, #4]
 8045a5e:	685c      	ldr	r4, [r3, #4]
 8045a60:	687b      	ldr	r3, [r7, #4]
 8045a62:	681d      	ldr	r5, [r3, #0]
 8045a64:	687b      	ldr	r3, [r7, #4]
 8045a66:	691e      	ldr	r6, [r3, #16]
 8045a68:	687b      	ldr	r3, [r7, #4]
 8045a6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8045a6e:	4618      	mov	r0, r3
 8045a70:	f7ff ffc8 	bl	8045a04 <makeFreeRtosPriority>
 8045a74:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8045a76:	687b      	ldr	r3, [r7, #4]
 8045a78:	695b      	ldr	r3, [r3, #20]
 8045a7a:	687a      	ldr	r2, [r7, #4]
 8045a7c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8045a7e:	9202      	str	r2, [sp, #8]
 8045a80:	9301      	str	r3, [sp, #4]
 8045a82:	9100      	str	r1, [sp, #0]
 8045a84:	683b      	ldr	r3, [r7, #0]
 8045a86:	4632      	mov	r2, r6
 8045a88:	4629      	mov	r1, r5
 8045a8a:	4620      	mov	r0, r4
 8045a8c:	f000 f8ed 	bl	8045c6a <xTaskCreateStatic>
 8045a90:	4603      	mov	r3, r0
 8045a92:	60fb      	str	r3, [r7, #12]
 8045a94:	e01c      	b.n	8045ad0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8045a96:	687b      	ldr	r3, [r7, #4]
 8045a98:	685c      	ldr	r4, [r3, #4]
 8045a9a:	687b      	ldr	r3, [r7, #4]
 8045a9c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8045a9e:	687b      	ldr	r3, [r7, #4]
 8045aa0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8045aa2:	b29e      	uxth	r6, r3
 8045aa4:	687b      	ldr	r3, [r7, #4]
 8045aa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8045aaa:	4618      	mov	r0, r3
 8045aac:	f7ff ffaa 	bl	8045a04 <makeFreeRtosPriority>
 8045ab0:	4602      	mov	r2, r0
 8045ab2:	f107 030c 	add.w	r3, r7, #12
 8045ab6:	9301      	str	r3, [sp, #4]
 8045ab8:	9200      	str	r2, [sp, #0]
 8045aba:	683b      	ldr	r3, [r7, #0]
 8045abc:	4632      	mov	r2, r6
 8045abe:	4629      	mov	r1, r5
 8045ac0:	4620      	mov	r0, r4
 8045ac2:	f000 f92f 	bl	8045d24 <xTaskCreate>
 8045ac6:	4603      	mov	r3, r0
 8045ac8:	2b01      	cmp	r3, #1
 8045aca:	d001      	beq.n	8045ad0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8045acc:	2300      	movs	r3, #0
 8045ace:	e000      	b.n	8045ad2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8045ad0:	68fb      	ldr	r3, [r7, #12]
}
 8045ad2:	4618      	mov	r0, r3
 8045ad4:	3714      	adds	r7, #20
 8045ad6:	46bd      	mov	sp, r7
 8045ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08045ada <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8045ada:	b580      	push	{r7, lr}
 8045adc:	b084      	sub	sp, #16
 8045ade:	af00      	add	r7, sp, #0
 8045ae0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8045ae2:	687b      	ldr	r3, [r7, #4]
 8045ae4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8045ae6:	68fb      	ldr	r3, [r7, #12]
 8045ae8:	2b00      	cmp	r3, #0
 8045aea:	d001      	beq.n	8045af0 <osDelay+0x16>
 8045aec:	68fb      	ldr	r3, [r7, #12]
 8045aee:	e000      	b.n	8045af2 <osDelay+0x18>
 8045af0:	2301      	movs	r3, #1
 8045af2:	4618      	mov	r0, r3
 8045af4:	f000 faf4 	bl	80460e0 <vTaskDelay>
  
  return osOK;
 8045af8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8045afa:	4618      	mov	r0, r3
 8045afc:	3710      	adds	r7, #16
 8045afe:	46bd      	mov	sp, r7
 8045b00:	bd80      	pop	{r7, pc}

08045b02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8045b02:	b480      	push	{r7}
 8045b04:	b083      	sub	sp, #12
 8045b06:	af00      	add	r7, sp, #0
 8045b08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8045b0a:	687b      	ldr	r3, [r7, #4]
 8045b0c:	f103 0208 	add.w	r2, r3, #8
 8045b10:	687b      	ldr	r3, [r7, #4]
 8045b12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8045b14:	687b      	ldr	r3, [r7, #4]
 8045b16:	f04f 32ff 	mov.w	r2, #4294967295
 8045b1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8045b1c:	687b      	ldr	r3, [r7, #4]
 8045b1e:	f103 0208 	add.w	r2, r3, #8
 8045b22:	687b      	ldr	r3, [r7, #4]
 8045b24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8045b26:	687b      	ldr	r3, [r7, #4]
 8045b28:	f103 0208 	add.w	r2, r3, #8
 8045b2c:	687b      	ldr	r3, [r7, #4]
 8045b2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8045b30:	687b      	ldr	r3, [r7, #4]
 8045b32:	2200      	movs	r2, #0
 8045b34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8045b36:	bf00      	nop
 8045b38:	370c      	adds	r7, #12
 8045b3a:	46bd      	mov	sp, r7
 8045b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045b40:	4770      	bx	lr

08045b42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8045b42:	b480      	push	{r7}
 8045b44:	b083      	sub	sp, #12
 8045b46:	af00      	add	r7, sp, #0
 8045b48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8045b4a:	687b      	ldr	r3, [r7, #4]
 8045b4c:	2200      	movs	r2, #0
 8045b4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8045b50:	bf00      	nop
 8045b52:	370c      	adds	r7, #12
 8045b54:	46bd      	mov	sp, r7
 8045b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045b5a:	4770      	bx	lr

08045b5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8045b5c:	b480      	push	{r7}
 8045b5e:	b085      	sub	sp, #20
 8045b60:	af00      	add	r7, sp, #0
 8045b62:	6078      	str	r0, [r7, #4]
 8045b64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8045b66:	687b      	ldr	r3, [r7, #4]
 8045b68:	685b      	ldr	r3, [r3, #4]
 8045b6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8045b6c:	683b      	ldr	r3, [r7, #0]
 8045b6e:	68fa      	ldr	r2, [r7, #12]
 8045b70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8045b72:	68fb      	ldr	r3, [r7, #12]
 8045b74:	689a      	ldr	r2, [r3, #8]
 8045b76:	683b      	ldr	r3, [r7, #0]
 8045b78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8045b7a:	68fb      	ldr	r3, [r7, #12]
 8045b7c:	689b      	ldr	r3, [r3, #8]
 8045b7e:	683a      	ldr	r2, [r7, #0]
 8045b80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8045b82:	68fb      	ldr	r3, [r7, #12]
 8045b84:	683a      	ldr	r2, [r7, #0]
 8045b86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8045b88:	683b      	ldr	r3, [r7, #0]
 8045b8a:	687a      	ldr	r2, [r7, #4]
 8045b8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8045b8e:	687b      	ldr	r3, [r7, #4]
 8045b90:	681b      	ldr	r3, [r3, #0]
 8045b92:	1c5a      	adds	r2, r3, #1
 8045b94:	687b      	ldr	r3, [r7, #4]
 8045b96:	601a      	str	r2, [r3, #0]
}
 8045b98:	bf00      	nop
 8045b9a:	3714      	adds	r7, #20
 8045b9c:	46bd      	mov	sp, r7
 8045b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045ba2:	4770      	bx	lr

08045ba4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8045ba4:	b480      	push	{r7}
 8045ba6:	b085      	sub	sp, #20
 8045ba8:	af00      	add	r7, sp, #0
 8045baa:	6078      	str	r0, [r7, #4]
 8045bac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8045bae:	683b      	ldr	r3, [r7, #0]
 8045bb0:	681b      	ldr	r3, [r3, #0]
 8045bb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8045bb4:	68bb      	ldr	r3, [r7, #8]
 8045bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045bba:	d103      	bne.n	8045bc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8045bbc:	687b      	ldr	r3, [r7, #4]
 8045bbe:	691b      	ldr	r3, [r3, #16]
 8045bc0:	60fb      	str	r3, [r7, #12]
 8045bc2:	e00c      	b.n	8045bde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8045bc4:	687b      	ldr	r3, [r7, #4]
 8045bc6:	3308      	adds	r3, #8
 8045bc8:	60fb      	str	r3, [r7, #12]
 8045bca:	e002      	b.n	8045bd2 <vListInsert+0x2e>
 8045bcc:	68fb      	ldr	r3, [r7, #12]
 8045bce:	685b      	ldr	r3, [r3, #4]
 8045bd0:	60fb      	str	r3, [r7, #12]
 8045bd2:	68fb      	ldr	r3, [r7, #12]
 8045bd4:	685b      	ldr	r3, [r3, #4]
 8045bd6:	681b      	ldr	r3, [r3, #0]
 8045bd8:	68ba      	ldr	r2, [r7, #8]
 8045bda:	429a      	cmp	r2, r3
 8045bdc:	d2f6      	bcs.n	8045bcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8045bde:	68fb      	ldr	r3, [r7, #12]
 8045be0:	685a      	ldr	r2, [r3, #4]
 8045be2:	683b      	ldr	r3, [r7, #0]
 8045be4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8045be6:	683b      	ldr	r3, [r7, #0]
 8045be8:	685b      	ldr	r3, [r3, #4]
 8045bea:	683a      	ldr	r2, [r7, #0]
 8045bec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8045bee:	683b      	ldr	r3, [r7, #0]
 8045bf0:	68fa      	ldr	r2, [r7, #12]
 8045bf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8045bf4:	68fb      	ldr	r3, [r7, #12]
 8045bf6:	683a      	ldr	r2, [r7, #0]
 8045bf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8045bfa:	683b      	ldr	r3, [r7, #0]
 8045bfc:	687a      	ldr	r2, [r7, #4]
 8045bfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8045c00:	687b      	ldr	r3, [r7, #4]
 8045c02:	681b      	ldr	r3, [r3, #0]
 8045c04:	1c5a      	adds	r2, r3, #1
 8045c06:	687b      	ldr	r3, [r7, #4]
 8045c08:	601a      	str	r2, [r3, #0]
}
 8045c0a:	bf00      	nop
 8045c0c:	3714      	adds	r7, #20
 8045c0e:	46bd      	mov	sp, r7
 8045c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c14:	4770      	bx	lr

08045c16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8045c16:	b480      	push	{r7}
 8045c18:	b085      	sub	sp, #20
 8045c1a:	af00      	add	r7, sp, #0
 8045c1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8045c1e:	687b      	ldr	r3, [r7, #4]
 8045c20:	691b      	ldr	r3, [r3, #16]
 8045c22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8045c24:	687b      	ldr	r3, [r7, #4]
 8045c26:	685b      	ldr	r3, [r3, #4]
 8045c28:	687a      	ldr	r2, [r7, #4]
 8045c2a:	6892      	ldr	r2, [r2, #8]
 8045c2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8045c2e:	687b      	ldr	r3, [r7, #4]
 8045c30:	689b      	ldr	r3, [r3, #8]
 8045c32:	687a      	ldr	r2, [r7, #4]
 8045c34:	6852      	ldr	r2, [r2, #4]
 8045c36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8045c38:	68fb      	ldr	r3, [r7, #12]
 8045c3a:	685b      	ldr	r3, [r3, #4]
 8045c3c:	687a      	ldr	r2, [r7, #4]
 8045c3e:	429a      	cmp	r2, r3
 8045c40:	d103      	bne.n	8045c4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8045c42:	687b      	ldr	r3, [r7, #4]
 8045c44:	689a      	ldr	r2, [r3, #8]
 8045c46:	68fb      	ldr	r3, [r7, #12]
 8045c48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8045c4a:	687b      	ldr	r3, [r7, #4]
 8045c4c:	2200      	movs	r2, #0
 8045c4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8045c50:	68fb      	ldr	r3, [r7, #12]
 8045c52:	681b      	ldr	r3, [r3, #0]
 8045c54:	1e5a      	subs	r2, r3, #1
 8045c56:	68fb      	ldr	r3, [r7, #12]
 8045c58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8045c5a:	68fb      	ldr	r3, [r7, #12]
 8045c5c:	681b      	ldr	r3, [r3, #0]
}
 8045c5e:	4618      	mov	r0, r3
 8045c60:	3714      	adds	r7, #20
 8045c62:	46bd      	mov	sp, r7
 8045c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c68:	4770      	bx	lr

08045c6a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8045c6a:	b580      	push	{r7, lr}
 8045c6c:	b08e      	sub	sp, #56	; 0x38
 8045c6e:	af04      	add	r7, sp, #16
 8045c70:	60f8      	str	r0, [r7, #12]
 8045c72:	60b9      	str	r1, [r7, #8]
 8045c74:	607a      	str	r2, [r7, #4]
 8045c76:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8045c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8045c7a:	2b00      	cmp	r3, #0
 8045c7c:	d10a      	bne.n	8045c94 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8045c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045c82:	f383 8811 	msr	BASEPRI, r3
 8045c86:	f3bf 8f6f 	isb	sy
 8045c8a:	f3bf 8f4f 	dsb	sy
 8045c8e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8045c90:	bf00      	nop
 8045c92:	e7fe      	b.n	8045c92 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8045c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045c96:	2b00      	cmp	r3, #0
 8045c98:	d10a      	bne.n	8045cb0 <xTaskCreateStatic+0x46>
	__asm volatile
 8045c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045c9e:	f383 8811 	msr	BASEPRI, r3
 8045ca2:	f3bf 8f6f 	isb	sy
 8045ca6:	f3bf 8f4f 	dsb	sy
 8045caa:	61fb      	str	r3, [r7, #28]
}
 8045cac:	bf00      	nop
 8045cae:	e7fe      	b.n	8045cae <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8045cb0:	23b4      	movs	r3, #180	; 0xb4
 8045cb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8045cb4:	693b      	ldr	r3, [r7, #16]
 8045cb6:	2bb4      	cmp	r3, #180	; 0xb4
 8045cb8:	d00a      	beq.n	8045cd0 <xTaskCreateStatic+0x66>
	__asm volatile
 8045cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045cbe:	f383 8811 	msr	BASEPRI, r3
 8045cc2:	f3bf 8f6f 	isb	sy
 8045cc6:	f3bf 8f4f 	dsb	sy
 8045cca:	61bb      	str	r3, [r7, #24]
}
 8045ccc:	bf00      	nop
 8045cce:	e7fe      	b.n	8045cce <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8045cd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8045cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045cd4:	2b00      	cmp	r3, #0
 8045cd6:	d01e      	beq.n	8045d16 <xTaskCreateStatic+0xac>
 8045cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8045cda:	2b00      	cmp	r3, #0
 8045cdc:	d01b      	beq.n	8045d16 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8045cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045ce0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8045ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8045ce6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8045ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045cea:	2202      	movs	r2, #2
 8045cec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8045cf0:	2300      	movs	r3, #0
 8045cf2:	9303      	str	r3, [sp, #12]
 8045cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045cf6:	9302      	str	r3, [sp, #8]
 8045cf8:	f107 0314 	add.w	r3, r7, #20
 8045cfc:	9301      	str	r3, [sp, #4]
 8045cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045d00:	9300      	str	r3, [sp, #0]
 8045d02:	683b      	ldr	r3, [r7, #0]
 8045d04:	687a      	ldr	r2, [r7, #4]
 8045d06:	68b9      	ldr	r1, [r7, #8]
 8045d08:	68f8      	ldr	r0, [r7, #12]
 8045d0a:	f000 f851 	bl	8045db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8045d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8045d10:	f000 f8ec 	bl	8045eec <prvAddNewTaskToReadyList>
 8045d14:	e001      	b.n	8045d1a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8045d16:	2300      	movs	r3, #0
 8045d18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8045d1a:	697b      	ldr	r3, [r7, #20]
	}
 8045d1c:	4618      	mov	r0, r3
 8045d1e:	3728      	adds	r7, #40	; 0x28
 8045d20:	46bd      	mov	sp, r7
 8045d22:	bd80      	pop	{r7, pc}

08045d24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8045d24:	b580      	push	{r7, lr}
 8045d26:	b08c      	sub	sp, #48	; 0x30
 8045d28:	af04      	add	r7, sp, #16
 8045d2a:	60f8      	str	r0, [r7, #12]
 8045d2c:	60b9      	str	r1, [r7, #8]
 8045d2e:	603b      	str	r3, [r7, #0]
 8045d30:	4613      	mov	r3, r2
 8045d32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8045d34:	88fb      	ldrh	r3, [r7, #6]
 8045d36:	009b      	lsls	r3, r3, #2
 8045d38:	4618      	mov	r0, r3
 8045d3a:	f000 ff85 	bl	8046c48 <pvPortMalloc>
 8045d3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8045d40:	697b      	ldr	r3, [r7, #20]
 8045d42:	2b00      	cmp	r3, #0
 8045d44:	d00e      	beq.n	8045d64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8045d46:	20b4      	movs	r0, #180	; 0xb4
 8045d48:	f000 ff7e 	bl	8046c48 <pvPortMalloc>
 8045d4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8045d4e:	69fb      	ldr	r3, [r7, #28]
 8045d50:	2b00      	cmp	r3, #0
 8045d52:	d003      	beq.n	8045d5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8045d54:	69fb      	ldr	r3, [r7, #28]
 8045d56:	697a      	ldr	r2, [r7, #20]
 8045d58:	631a      	str	r2, [r3, #48]	; 0x30
 8045d5a:	e005      	b.n	8045d68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8045d5c:	6978      	ldr	r0, [r7, #20]
 8045d5e:	f001 f83f 	bl	8046de0 <vPortFree>
 8045d62:	e001      	b.n	8045d68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8045d64:	2300      	movs	r3, #0
 8045d66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8045d68:	69fb      	ldr	r3, [r7, #28]
 8045d6a:	2b00      	cmp	r3, #0
 8045d6c:	d017      	beq.n	8045d9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8045d6e:	69fb      	ldr	r3, [r7, #28]
 8045d70:	2200      	movs	r2, #0
 8045d72:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8045d76:	88fa      	ldrh	r2, [r7, #6]
 8045d78:	2300      	movs	r3, #0
 8045d7a:	9303      	str	r3, [sp, #12]
 8045d7c:	69fb      	ldr	r3, [r7, #28]
 8045d7e:	9302      	str	r3, [sp, #8]
 8045d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045d82:	9301      	str	r3, [sp, #4]
 8045d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045d86:	9300      	str	r3, [sp, #0]
 8045d88:	683b      	ldr	r3, [r7, #0]
 8045d8a:	68b9      	ldr	r1, [r7, #8]
 8045d8c:	68f8      	ldr	r0, [r7, #12]
 8045d8e:	f000 f80f 	bl	8045db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8045d92:	69f8      	ldr	r0, [r7, #28]
 8045d94:	f000 f8aa 	bl	8045eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8045d98:	2301      	movs	r3, #1
 8045d9a:	61bb      	str	r3, [r7, #24]
 8045d9c:	e002      	b.n	8045da4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8045d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8045da2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8045da4:	69bb      	ldr	r3, [r7, #24]
	}
 8045da6:	4618      	mov	r0, r3
 8045da8:	3720      	adds	r7, #32
 8045daa:	46bd      	mov	sp, r7
 8045dac:	bd80      	pop	{r7, pc}
	...

08045db0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8045db0:	b580      	push	{r7, lr}
 8045db2:	b088      	sub	sp, #32
 8045db4:	af00      	add	r7, sp, #0
 8045db6:	60f8      	str	r0, [r7, #12]
 8045db8:	60b9      	str	r1, [r7, #8]
 8045dba:	607a      	str	r2, [r7, #4]
 8045dbc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8045dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8045dc2:	687b      	ldr	r3, [r7, #4]
 8045dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8045dc8:	3b01      	subs	r3, #1
 8045dca:	009b      	lsls	r3, r3, #2
 8045dcc:	4413      	add	r3, r2
 8045dce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8045dd0:	69bb      	ldr	r3, [r7, #24]
 8045dd2:	f023 0307 	bic.w	r3, r3, #7
 8045dd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8045dd8:	69bb      	ldr	r3, [r7, #24]
 8045dda:	f003 0307 	and.w	r3, r3, #7
 8045dde:	2b00      	cmp	r3, #0
 8045de0:	d00a      	beq.n	8045df8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8045de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045de6:	f383 8811 	msr	BASEPRI, r3
 8045dea:	f3bf 8f6f 	isb	sy
 8045dee:	f3bf 8f4f 	dsb	sy
 8045df2:	617b      	str	r3, [r7, #20]
}
 8045df4:	bf00      	nop
 8045df6:	e7fe      	b.n	8045df6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8045df8:	68bb      	ldr	r3, [r7, #8]
 8045dfa:	2b00      	cmp	r3, #0
 8045dfc:	d01f      	beq.n	8045e3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8045dfe:	2300      	movs	r3, #0
 8045e00:	61fb      	str	r3, [r7, #28]
 8045e02:	e012      	b.n	8045e2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8045e04:	68ba      	ldr	r2, [r7, #8]
 8045e06:	69fb      	ldr	r3, [r7, #28]
 8045e08:	4413      	add	r3, r2
 8045e0a:	7819      	ldrb	r1, [r3, #0]
 8045e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8045e0e:	69fb      	ldr	r3, [r7, #28]
 8045e10:	4413      	add	r3, r2
 8045e12:	3334      	adds	r3, #52	; 0x34
 8045e14:	460a      	mov	r2, r1
 8045e16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8045e18:	68ba      	ldr	r2, [r7, #8]
 8045e1a:	69fb      	ldr	r3, [r7, #28]
 8045e1c:	4413      	add	r3, r2
 8045e1e:	781b      	ldrb	r3, [r3, #0]
 8045e20:	2b00      	cmp	r3, #0
 8045e22:	d006      	beq.n	8045e32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8045e24:	69fb      	ldr	r3, [r7, #28]
 8045e26:	3301      	adds	r3, #1
 8045e28:	61fb      	str	r3, [r7, #28]
 8045e2a:	69fb      	ldr	r3, [r7, #28]
 8045e2c:	2b0f      	cmp	r3, #15
 8045e2e:	d9e9      	bls.n	8045e04 <prvInitialiseNewTask+0x54>
 8045e30:	e000      	b.n	8045e34 <prvInitialiseNewTask+0x84>
			{
				break;
 8045e32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8045e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e36:	2200      	movs	r2, #0
 8045e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8045e3c:	e003      	b.n	8045e46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8045e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e40:	2200      	movs	r2, #0
 8045e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8045e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045e48:	2b06      	cmp	r3, #6
 8045e4a:	d901      	bls.n	8045e50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8045e4c:	2306      	movs	r3, #6
 8045e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8045e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8045e54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8045e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8045e5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8045e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e5e:	2200      	movs	r2, #0
 8045e60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8045e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e64:	3304      	adds	r3, #4
 8045e66:	4618      	mov	r0, r3
 8045e68:	f7ff fe6b 	bl	8045b42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8045e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e6e:	3318      	adds	r3, #24
 8045e70:	4618      	mov	r0, r3
 8045e72:	f7ff fe66 	bl	8045b42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8045e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8045e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8045e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045e7e:	f1c3 0207 	rsb	r2, r3, #7
 8045e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8045e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8045e8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8045e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e8e:	2200      	movs	r2, #0
 8045e90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8045e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e96:	2200      	movs	r2, #0
 8045e98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8045e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045e9e:	334c      	adds	r3, #76	; 0x4c
 8045ea0:	2260      	movs	r2, #96	; 0x60
 8045ea2:	2100      	movs	r1, #0
 8045ea4:	4618      	mov	r0, r3
 8045ea6:	f001 f9ea 	bl	804727e <memset>
 8045eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045eac:	4a0c      	ldr	r2, [pc, #48]	; (8045ee0 <prvInitialiseNewTask+0x130>)
 8045eae:	651a      	str	r2, [r3, #80]	; 0x50
 8045eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045eb2:	4a0c      	ldr	r2, [pc, #48]	; (8045ee4 <prvInitialiseNewTask+0x134>)
 8045eb4:	655a      	str	r2, [r3, #84]	; 0x54
 8045eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045eb8:	4a0b      	ldr	r2, [pc, #44]	; (8045ee8 <prvInitialiseNewTask+0x138>)
 8045eba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8045ebc:	683a      	ldr	r2, [r7, #0]
 8045ebe:	68f9      	ldr	r1, [r7, #12]
 8045ec0:	69b8      	ldr	r0, [r7, #24]
 8045ec2:	f000 fcaf 	bl	8046824 <pxPortInitialiseStack>
 8045ec6:	4602      	mov	r2, r0
 8045ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045eca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8045ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045ece:	2b00      	cmp	r3, #0
 8045ed0:	d002      	beq.n	8045ed8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8045ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8045ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8045ed8:	bf00      	nop
 8045eda:	3720      	adds	r7, #32
 8045edc:	46bd      	mov	sp, r7
 8045ede:	bd80      	pop	{r7, pc}
 8045ee0:	0804a174 	.word	0x0804a174
 8045ee4:	0804a194 	.word	0x0804a194
 8045ee8:	0804a154 	.word	0x0804a154

08045eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8045eec:	b580      	push	{r7, lr}
 8045eee:	b082      	sub	sp, #8
 8045ef0:	af00      	add	r7, sp, #0
 8045ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8045ef4:	f000 fdc6 	bl	8046a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8045ef8:	4b2a      	ldr	r3, [pc, #168]	; (8045fa4 <prvAddNewTaskToReadyList+0xb8>)
 8045efa:	681b      	ldr	r3, [r3, #0]
 8045efc:	3301      	adds	r3, #1
 8045efe:	4a29      	ldr	r2, [pc, #164]	; (8045fa4 <prvAddNewTaskToReadyList+0xb8>)
 8045f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8045f02:	4b29      	ldr	r3, [pc, #164]	; (8045fa8 <prvAddNewTaskToReadyList+0xbc>)
 8045f04:	681b      	ldr	r3, [r3, #0]
 8045f06:	2b00      	cmp	r3, #0
 8045f08:	d109      	bne.n	8045f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8045f0a:	4a27      	ldr	r2, [pc, #156]	; (8045fa8 <prvAddNewTaskToReadyList+0xbc>)
 8045f0c:	687b      	ldr	r3, [r7, #4]
 8045f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8045f10:	4b24      	ldr	r3, [pc, #144]	; (8045fa4 <prvAddNewTaskToReadyList+0xb8>)
 8045f12:	681b      	ldr	r3, [r3, #0]
 8045f14:	2b01      	cmp	r3, #1
 8045f16:	d110      	bne.n	8045f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8045f18:	f000 fb5c 	bl	80465d4 <prvInitialiseTaskLists>
 8045f1c:	e00d      	b.n	8045f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8045f1e:	4b23      	ldr	r3, [pc, #140]	; (8045fac <prvAddNewTaskToReadyList+0xc0>)
 8045f20:	681b      	ldr	r3, [r3, #0]
 8045f22:	2b00      	cmp	r3, #0
 8045f24:	d109      	bne.n	8045f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8045f26:	4b20      	ldr	r3, [pc, #128]	; (8045fa8 <prvAddNewTaskToReadyList+0xbc>)
 8045f28:	681b      	ldr	r3, [r3, #0]
 8045f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045f2c:	687b      	ldr	r3, [r7, #4]
 8045f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045f30:	429a      	cmp	r2, r3
 8045f32:	d802      	bhi.n	8045f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8045f34:	4a1c      	ldr	r2, [pc, #112]	; (8045fa8 <prvAddNewTaskToReadyList+0xbc>)
 8045f36:	687b      	ldr	r3, [r7, #4]
 8045f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8045f3a:	4b1d      	ldr	r3, [pc, #116]	; (8045fb0 <prvAddNewTaskToReadyList+0xc4>)
 8045f3c:	681b      	ldr	r3, [r3, #0]
 8045f3e:	3301      	adds	r3, #1
 8045f40:	4a1b      	ldr	r2, [pc, #108]	; (8045fb0 <prvAddNewTaskToReadyList+0xc4>)
 8045f42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8045f44:	687b      	ldr	r3, [r7, #4]
 8045f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045f48:	2201      	movs	r2, #1
 8045f4a:	409a      	lsls	r2, r3
 8045f4c:	4b19      	ldr	r3, [pc, #100]	; (8045fb4 <prvAddNewTaskToReadyList+0xc8>)
 8045f4e:	681b      	ldr	r3, [r3, #0]
 8045f50:	4313      	orrs	r3, r2
 8045f52:	4a18      	ldr	r2, [pc, #96]	; (8045fb4 <prvAddNewTaskToReadyList+0xc8>)
 8045f54:	6013      	str	r3, [r2, #0]
 8045f56:	687b      	ldr	r3, [r7, #4]
 8045f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045f5a:	4613      	mov	r3, r2
 8045f5c:	009b      	lsls	r3, r3, #2
 8045f5e:	4413      	add	r3, r2
 8045f60:	009b      	lsls	r3, r3, #2
 8045f62:	4a15      	ldr	r2, [pc, #84]	; (8045fb8 <prvAddNewTaskToReadyList+0xcc>)
 8045f64:	441a      	add	r2, r3
 8045f66:	687b      	ldr	r3, [r7, #4]
 8045f68:	3304      	adds	r3, #4
 8045f6a:	4619      	mov	r1, r3
 8045f6c:	4610      	mov	r0, r2
 8045f6e:	f7ff fdf5 	bl	8045b5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8045f72:	f000 fdb7 	bl	8046ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8045f76:	4b0d      	ldr	r3, [pc, #52]	; (8045fac <prvAddNewTaskToReadyList+0xc0>)
 8045f78:	681b      	ldr	r3, [r3, #0]
 8045f7a:	2b00      	cmp	r3, #0
 8045f7c:	d00e      	beq.n	8045f9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8045f7e:	4b0a      	ldr	r3, [pc, #40]	; (8045fa8 <prvAddNewTaskToReadyList+0xbc>)
 8045f80:	681b      	ldr	r3, [r3, #0]
 8045f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045f84:	687b      	ldr	r3, [r7, #4]
 8045f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045f88:	429a      	cmp	r2, r3
 8045f8a:	d207      	bcs.n	8045f9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8045f8c:	4b0b      	ldr	r3, [pc, #44]	; (8045fbc <prvAddNewTaskToReadyList+0xd0>)
 8045f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8045f92:	601a      	str	r2, [r3, #0]
 8045f94:	f3bf 8f4f 	dsb	sy
 8045f98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8045f9c:	bf00      	nop
 8045f9e:	3708      	adds	r7, #8
 8045fa0:	46bd      	mov	sp, r7
 8045fa2:	bd80      	pop	{r7, pc}
 8045fa4:	20000738 	.word	0x20000738
 8045fa8:	20000638 	.word	0x20000638
 8045fac:	20000744 	.word	0x20000744
 8045fb0:	20000754 	.word	0x20000754
 8045fb4:	20000740 	.word	0x20000740
 8045fb8:	2000063c 	.word	0x2000063c
 8045fbc:	e000ed04 	.word	0xe000ed04

08045fc0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8045fc0:	b580      	push	{r7, lr}
 8045fc2:	b084      	sub	sp, #16
 8045fc4:	af00      	add	r7, sp, #0
 8045fc6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8045fc8:	f000 fd5c 	bl	8046a84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8045fcc:	687b      	ldr	r3, [r7, #4]
 8045fce:	2b00      	cmp	r3, #0
 8045fd0:	d102      	bne.n	8045fd8 <vTaskDelete+0x18>
 8045fd2:	4b39      	ldr	r3, [pc, #228]	; (80460b8 <vTaskDelete+0xf8>)
 8045fd4:	681b      	ldr	r3, [r3, #0]
 8045fd6:	e000      	b.n	8045fda <vTaskDelete+0x1a>
 8045fd8:	687b      	ldr	r3, [r7, #4]
 8045fda:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8045fdc:	68fb      	ldr	r3, [r7, #12]
 8045fde:	3304      	adds	r3, #4
 8045fe0:	4618      	mov	r0, r3
 8045fe2:	f7ff fe18 	bl	8045c16 <uxListRemove>
 8045fe6:	4603      	mov	r3, r0
 8045fe8:	2b00      	cmp	r3, #0
 8045fea:	d115      	bne.n	8046018 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8045fec:	68fb      	ldr	r3, [r7, #12]
 8045fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045ff0:	4932      	ldr	r1, [pc, #200]	; (80460bc <vTaskDelete+0xfc>)
 8045ff2:	4613      	mov	r3, r2
 8045ff4:	009b      	lsls	r3, r3, #2
 8045ff6:	4413      	add	r3, r2
 8045ff8:	009b      	lsls	r3, r3, #2
 8045ffa:	440b      	add	r3, r1
 8045ffc:	681b      	ldr	r3, [r3, #0]
 8045ffe:	2b00      	cmp	r3, #0
 8046000:	d10a      	bne.n	8046018 <vTaskDelete+0x58>
 8046002:	68fb      	ldr	r3, [r7, #12]
 8046004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046006:	2201      	movs	r2, #1
 8046008:	fa02 f303 	lsl.w	r3, r2, r3
 804600c:	43da      	mvns	r2, r3
 804600e:	4b2c      	ldr	r3, [pc, #176]	; (80460c0 <vTaskDelete+0x100>)
 8046010:	681b      	ldr	r3, [r3, #0]
 8046012:	4013      	ands	r3, r2
 8046014:	4a2a      	ldr	r2, [pc, #168]	; (80460c0 <vTaskDelete+0x100>)
 8046016:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8046018:	68fb      	ldr	r3, [r7, #12]
 804601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804601c:	2b00      	cmp	r3, #0
 804601e:	d004      	beq.n	804602a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8046020:	68fb      	ldr	r3, [r7, #12]
 8046022:	3318      	adds	r3, #24
 8046024:	4618      	mov	r0, r3
 8046026:	f7ff fdf6 	bl	8045c16 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 804602a:	4b26      	ldr	r3, [pc, #152]	; (80460c4 <vTaskDelete+0x104>)
 804602c:	681b      	ldr	r3, [r3, #0]
 804602e:	3301      	adds	r3, #1
 8046030:	4a24      	ldr	r2, [pc, #144]	; (80460c4 <vTaskDelete+0x104>)
 8046032:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8046034:	4b20      	ldr	r3, [pc, #128]	; (80460b8 <vTaskDelete+0xf8>)
 8046036:	681b      	ldr	r3, [r3, #0]
 8046038:	68fa      	ldr	r2, [r7, #12]
 804603a:	429a      	cmp	r2, r3
 804603c:	d10b      	bne.n	8046056 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 804603e:	68fb      	ldr	r3, [r7, #12]
 8046040:	3304      	adds	r3, #4
 8046042:	4619      	mov	r1, r3
 8046044:	4820      	ldr	r0, [pc, #128]	; (80460c8 <vTaskDelete+0x108>)
 8046046:	f7ff fd89 	bl	8045b5c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 804604a:	4b20      	ldr	r3, [pc, #128]	; (80460cc <vTaskDelete+0x10c>)
 804604c:	681b      	ldr	r3, [r3, #0]
 804604e:	3301      	adds	r3, #1
 8046050:	4a1e      	ldr	r2, [pc, #120]	; (80460cc <vTaskDelete+0x10c>)
 8046052:	6013      	str	r3, [r2, #0]
 8046054:	e009      	b.n	804606a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8046056:	4b1e      	ldr	r3, [pc, #120]	; (80460d0 <vTaskDelete+0x110>)
 8046058:	681b      	ldr	r3, [r3, #0]
 804605a:	3b01      	subs	r3, #1
 804605c:	4a1c      	ldr	r2, [pc, #112]	; (80460d0 <vTaskDelete+0x110>)
 804605e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8046060:	68f8      	ldr	r0, [r7, #12]
 8046062:	f000 fb25 	bl	80466b0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8046066:	f000 fb57 	bl	8046718 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 804606a:	f000 fd3b 	bl	8046ae4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 804606e:	4b19      	ldr	r3, [pc, #100]	; (80460d4 <vTaskDelete+0x114>)
 8046070:	681b      	ldr	r3, [r3, #0]
 8046072:	2b00      	cmp	r3, #0
 8046074:	d01b      	beq.n	80460ae <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8046076:	4b10      	ldr	r3, [pc, #64]	; (80460b8 <vTaskDelete+0xf8>)
 8046078:	681b      	ldr	r3, [r3, #0]
 804607a:	68fa      	ldr	r2, [r7, #12]
 804607c:	429a      	cmp	r2, r3
 804607e:	d116      	bne.n	80460ae <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8046080:	4b15      	ldr	r3, [pc, #84]	; (80460d8 <vTaskDelete+0x118>)
 8046082:	681b      	ldr	r3, [r3, #0]
 8046084:	2b00      	cmp	r3, #0
 8046086:	d00a      	beq.n	804609e <vTaskDelete+0xde>
	__asm volatile
 8046088:	f04f 0350 	mov.w	r3, #80	; 0x50
 804608c:	f383 8811 	msr	BASEPRI, r3
 8046090:	f3bf 8f6f 	isb	sy
 8046094:	f3bf 8f4f 	dsb	sy
 8046098:	60bb      	str	r3, [r7, #8]
}
 804609a:	bf00      	nop
 804609c:	e7fe      	b.n	804609c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 804609e:	4b0f      	ldr	r3, [pc, #60]	; (80460dc <vTaskDelete+0x11c>)
 80460a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80460a4:	601a      	str	r2, [r3, #0]
 80460a6:	f3bf 8f4f 	dsb	sy
 80460aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80460ae:	bf00      	nop
 80460b0:	3710      	adds	r7, #16
 80460b2:	46bd      	mov	sp, r7
 80460b4:	bd80      	pop	{r7, pc}
 80460b6:	bf00      	nop
 80460b8:	20000638 	.word	0x20000638
 80460bc:	2000063c 	.word	0x2000063c
 80460c0:	20000740 	.word	0x20000740
 80460c4:	20000754 	.word	0x20000754
 80460c8:	2000070c 	.word	0x2000070c
 80460cc:	20000720 	.word	0x20000720
 80460d0:	20000738 	.word	0x20000738
 80460d4:	20000744 	.word	0x20000744
 80460d8:	20000760 	.word	0x20000760
 80460dc:	e000ed04 	.word	0xe000ed04

080460e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80460e0:	b580      	push	{r7, lr}
 80460e2:	b084      	sub	sp, #16
 80460e4:	af00      	add	r7, sp, #0
 80460e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80460e8:	2300      	movs	r3, #0
 80460ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80460ec:	687b      	ldr	r3, [r7, #4]
 80460ee:	2b00      	cmp	r3, #0
 80460f0:	d017      	beq.n	8046122 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80460f2:	4b13      	ldr	r3, [pc, #76]	; (8046140 <vTaskDelay+0x60>)
 80460f4:	681b      	ldr	r3, [r3, #0]
 80460f6:	2b00      	cmp	r3, #0
 80460f8:	d00a      	beq.n	8046110 <vTaskDelay+0x30>
	__asm volatile
 80460fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80460fe:	f383 8811 	msr	BASEPRI, r3
 8046102:	f3bf 8f6f 	isb	sy
 8046106:	f3bf 8f4f 	dsb	sy
 804610a:	60bb      	str	r3, [r7, #8]
}
 804610c:	bf00      	nop
 804610e:	e7fe      	b.n	804610e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8046110:	f000 f884 	bl	804621c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8046114:	2100      	movs	r1, #0
 8046116:	6878      	ldr	r0, [r7, #4]
 8046118:	f000 fb1e 	bl	8046758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 804611c:	f000 f88c 	bl	8046238 <xTaskResumeAll>
 8046120:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8046122:	68fb      	ldr	r3, [r7, #12]
 8046124:	2b00      	cmp	r3, #0
 8046126:	d107      	bne.n	8046138 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8046128:	4b06      	ldr	r3, [pc, #24]	; (8046144 <vTaskDelay+0x64>)
 804612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804612e:	601a      	str	r2, [r3, #0]
 8046130:	f3bf 8f4f 	dsb	sy
 8046134:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8046138:	bf00      	nop
 804613a:	3710      	adds	r7, #16
 804613c:	46bd      	mov	sp, r7
 804613e:	bd80      	pop	{r7, pc}
 8046140:	20000760 	.word	0x20000760
 8046144:	e000ed04 	.word	0xe000ed04

08046148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8046148:	b580      	push	{r7, lr}
 804614a:	b08a      	sub	sp, #40	; 0x28
 804614c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 804614e:	2300      	movs	r3, #0
 8046150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8046152:	2300      	movs	r3, #0
 8046154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8046156:	463a      	mov	r2, r7
 8046158:	1d39      	adds	r1, r7, #4
 804615a:	f107 0308 	add.w	r3, r7, #8
 804615e:	4618      	mov	r0, r3
 8046160:	f7fb fc8a 	bl	8041a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8046164:	6839      	ldr	r1, [r7, #0]
 8046166:	687b      	ldr	r3, [r7, #4]
 8046168:	68ba      	ldr	r2, [r7, #8]
 804616a:	9202      	str	r2, [sp, #8]
 804616c:	9301      	str	r3, [sp, #4]
 804616e:	2300      	movs	r3, #0
 8046170:	9300      	str	r3, [sp, #0]
 8046172:	2300      	movs	r3, #0
 8046174:	460a      	mov	r2, r1
 8046176:	4921      	ldr	r1, [pc, #132]	; (80461fc <vTaskStartScheduler+0xb4>)
 8046178:	4821      	ldr	r0, [pc, #132]	; (8046200 <vTaskStartScheduler+0xb8>)
 804617a:	f7ff fd76 	bl	8045c6a <xTaskCreateStatic>
 804617e:	4603      	mov	r3, r0
 8046180:	4a20      	ldr	r2, [pc, #128]	; (8046204 <vTaskStartScheduler+0xbc>)
 8046182:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8046184:	4b1f      	ldr	r3, [pc, #124]	; (8046204 <vTaskStartScheduler+0xbc>)
 8046186:	681b      	ldr	r3, [r3, #0]
 8046188:	2b00      	cmp	r3, #0
 804618a:	d002      	beq.n	8046192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 804618c:	2301      	movs	r3, #1
 804618e:	617b      	str	r3, [r7, #20]
 8046190:	e001      	b.n	8046196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8046192:	2300      	movs	r3, #0
 8046194:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8046196:	697b      	ldr	r3, [r7, #20]
 8046198:	2b01      	cmp	r3, #1
 804619a:	d11b      	bne.n	80461d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 804619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80461a0:	f383 8811 	msr	BASEPRI, r3
 80461a4:	f3bf 8f6f 	isb	sy
 80461a8:	f3bf 8f4f 	dsb	sy
 80461ac:	613b      	str	r3, [r7, #16]
}
 80461ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80461b0:	4b15      	ldr	r3, [pc, #84]	; (8046208 <vTaskStartScheduler+0xc0>)
 80461b2:	681b      	ldr	r3, [r3, #0]
 80461b4:	334c      	adds	r3, #76	; 0x4c
 80461b6:	4a15      	ldr	r2, [pc, #84]	; (804620c <vTaskStartScheduler+0xc4>)
 80461b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80461ba:	4b15      	ldr	r3, [pc, #84]	; (8046210 <vTaskStartScheduler+0xc8>)
 80461bc:	f04f 32ff 	mov.w	r2, #4294967295
 80461c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80461c2:	4b14      	ldr	r3, [pc, #80]	; (8046214 <vTaskStartScheduler+0xcc>)
 80461c4:	2201      	movs	r2, #1
 80461c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80461c8:	4b13      	ldr	r3, [pc, #76]	; (8046218 <vTaskStartScheduler+0xd0>)
 80461ca:	2200      	movs	r2, #0
 80461cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80461ce:	f000 fbb7 	bl	8046940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80461d2:	e00e      	b.n	80461f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80461d4:	697b      	ldr	r3, [r7, #20]
 80461d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80461da:	d10a      	bne.n	80461f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80461dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80461e0:	f383 8811 	msr	BASEPRI, r3
 80461e4:	f3bf 8f6f 	isb	sy
 80461e8:	f3bf 8f4f 	dsb	sy
 80461ec:	60fb      	str	r3, [r7, #12]
}
 80461ee:	bf00      	nop
 80461f0:	e7fe      	b.n	80461f0 <vTaskStartScheduler+0xa8>
}
 80461f2:	bf00      	nop
 80461f4:	3718      	adds	r7, #24
 80461f6:	46bd      	mov	sp, r7
 80461f8:	bd80      	pop	{r7, pc}
 80461fa:	bf00      	nop
 80461fc:	0804a12c 	.word	0x0804a12c
 8046200:	080465a5 	.word	0x080465a5
 8046204:	2000075c 	.word	0x2000075c
 8046208:	20000638 	.word	0x20000638
 804620c:	20000010 	.word	0x20000010
 8046210:	20000758 	.word	0x20000758
 8046214:	20000744 	.word	0x20000744
 8046218:	2000073c 	.word	0x2000073c

0804621c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 804621c:	b480      	push	{r7}
 804621e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8046220:	4b04      	ldr	r3, [pc, #16]	; (8046234 <vTaskSuspendAll+0x18>)
 8046222:	681b      	ldr	r3, [r3, #0]
 8046224:	3301      	adds	r3, #1
 8046226:	4a03      	ldr	r2, [pc, #12]	; (8046234 <vTaskSuspendAll+0x18>)
 8046228:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 804622a:	bf00      	nop
 804622c:	46bd      	mov	sp, r7
 804622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046232:	4770      	bx	lr
 8046234:	20000760 	.word	0x20000760

08046238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8046238:	b580      	push	{r7, lr}
 804623a:	b084      	sub	sp, #16
 804623c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 804623e:	2300      	movs	r3, #0
 8046240:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8046242:	2300      	movs	r3, #0
 8046244:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8046246:	4b41      	ldr	r3, [pc, #260]	; (804634c <xTaskResumeAll+0x114>)
 8046248:	681b      	ldr	r3, [r3, #0]
 804624a:	2b00      	cmp	r3, #0
 804624c:	d10a      	bne.n	8046264 <xTaskResumeAll+0x2c>
	__asm volatile
 804624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046252:	f383 8811 	msr	BASEPRI, r3
 8046256:	f3bf 8f6f 	isb	sy
 804625a:	f3bf 8f4f 	dsb	sy
 804625e:	603b      	str	r3, [r7, #0]
}
 8046260:	bf00      	nop
 8046262:	e7fe      	b.n	8046262 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8046264:	f000 fc0e 	bl	8046a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8046268:	4b38      	ldr	r3, [pc, #224]	; (804634c <xTaskResumeAll+0x114>)
 804626a:	681b      	ldr	r3, [r3, #0]
 804626c:	3b01      	subs	r3, #1
 804626e:	4a37      	ldr	r2, [pc, #220]	; (804634c <xTaskResumeAll+0x114>)
 8046270:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8046272:	4b36      	ldr	r3, [pc, #216]	; (804634c <xTaskResumeAll+0x114>)
 8046274:	681b      	ldr	r3, [r3, #0]
 8046276:	2b00      	cmp	r3, #0
 8046278:	d161      	bne.n	804633e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 804627a:	4b35      	ldr	r3, [pc, #212]	; (8046350 <xTaskResumeAll+0x118>)
 804627c:	681b      	ldr	r3, [r3, #0]
 804627e:	2b00      	cmp	r3, #0
 8046280:	d05d      	beq.n	804633e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8046282:	e02e      	b.n	80462e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8046284:	4b33      	ldr	r3, [pc, #204]	; (8046354 <xTaskResumeAll+0x11c>)
 8046286:	68db      	ldr	r3, [r3, #12]
 8046288:	68db      	ldr	r3, [r3, #12]
 804628a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 804628c:	68fb      	ldr	r3, [r7, #12]
 804628e:	3318      	adds	r3, #24
 8046290:	4618      	mov	r0, r3
 8046292:	f7ff fcc0 	bl	8045c16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8046296:	68fb      	ldr	r3, [r7, #12]
 8046298:	3304      	adds	r3, #4
 804629a:	4618      	mov	r0, r3
 804629c:	f7ff fcbb 	bl	8045c16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80462a0:	68fb      	ldr	r3, [r7, #12]
 80462a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80462a4:	2201      	movs	r2, #1
 80462a6:	409a      	lsls	r2, r3
 80462a8:	4b2b      	ldr	r3, [pc, #172]	; (8046358 <xTaskResumeAll+0x120>)
 80462aa:	681b      	ldr	r3, [r3, #0]
 80462ac:	4313      	orrs	r3, r2
 80462ae:	4a2a      	ldr	r2, [pc, #168]	; (8046358 <xTaskResumeAll+0x120>)
 80462b0:	6013      	str	r3, [r2, #0]
 80462b2:	68fb      	ldr	r3, [r7, #12]
 80462b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80462b6:	4613      	mov	r3, r2
 80462b8:	009b      	lsls	r3, r3, #2
 80462ba:	4413      	add	r3, r2
 80462bc:	009b      	lsls	r3, r3, #2
 80462be:	4a27      	ldr	r2, [pc, #156]	; (804635c <xTaskResumeAll+0x124>)
 80462c0:	441a      	add	r2, r3
 80462c2:	68fb      	ldr	r3, [r7, #12]
 80462c4:	3304      	adds	r3, #4
 80462c6:	4619      	mov	r1, r3
 80462c8:	4610      	mov	r0, r2
 80462ca:	f7ff fc47 	bl	8045b5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80462ce:	68fb      	ldr	r3, [r7, #12]
 80462d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80462d2:	4b23      	ldr	r3, [pc, #140]	; (8046360 <xTaskResumeAll+0x128>)
 80462d4:	681b      	ldr	r3, [r3, #0]
 80462d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80462d8:	429a      	cmp	r2, r3
 80462da:	d302      	bcc.n	80462e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80462dc:	4b21      	ldr	r3, [pc, #132]	; (8046364 <xTaskResumeAll+0x12c>)
 80462de:	2201      	movs	r2, #1
 80462e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80462e2:	4b1c      	ldr	r3, [pc, #112]	; (8046354 <xTaskResumeAll+0x11c>)
 80462e4:	681b      	ldr	r3, [r3, #0]
 80462e6:	2b00      	cmp	r3, #0
 80462e8:	d1cc      	bne.n	8046284 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80462ea:	68fb      	ldr	r3, [r7, #12]
 80462ec:	2b00      	cmp	r3, #0
 80462ee:	d001      	beq.n	80462f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80462f0:	f000 fa12 	bl	8046718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80462f4:	4b1c      	ldr	r3, [pc, #112]	; (8046368 <xTaskResumeAll+0x130>)
 80462f6:	681b      	ldr	r3, [r3, #0]
 80462f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80462fa:	687b      	ldr	r3, [r7, #4]
 80462fc:	2b00      	cmp	r3, #0
 80462fe:	d010      	beq.n	8046322 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8046300:	f000 f836 	bl	8046370 <xTaskIncrementTick>
 8046304:	4603      	mov	r3, r0
 8046306:	2b00      	cmp	r3, #0
 8046308:	d002      	beq.n	8046310 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 804630a:	4b16      	ldr	r3, [pc, #88]	; (8046364 <xTaskResumeAll+0x12c>)
 804630c:	2201      	movs	r2, #1
 804630e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8046310:	687b      	ldr	r3, [r7, #4]
 8046312:	3b01      	subs	r3, #1
 8046314:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8046316:	687b      	ldr	r3, [r7, #4]
 8046318:	2b00      	cmp	r3, #0
 804631a:	d1f1      	bne.n	8046300 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 804631c:	4b12      	ldr	r3, [pc, #72]	; (8046368 <xTaskResumeAll+0x130>)
 804631e:	2200      	movs	r2, #0
 8046320:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8046322:	4b10      	ldr	r3, [pc, #64]	; (8046364 <xTaskResumeAll+0x12c>)
 8046324:	681b      	ldr	r3, [r3, #0]
 8046326:	2b00      	cmp	r3, #0
 8046328:	d009      	beq.n	804633e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 804632a:	2301      	movs	r3, #1
 804632c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 804632e:	4b0f      	ldr	r3, [pc, #60]	; (804636c <xTaskResumeAll+0x134>)
 8046330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8046334:	601a      	str	r2, [r3, #0]
 8046336:	f3bf 8f4f 	dsb	sy
 804633a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 804633e:	f000 fbd1 	bl	8046ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8046342:	68bb      	ldr	r3, [r7, #8]
}
 8046344:	4618      	mov	r0, r3
 8046346:	3710      	adds	r7, #16
 8046348:	46bd      	mov	sp, r7
 804634a:	bd80      	pop	{r7, pc}
 804634c:	20000760 	.word	0x20000760
 8046350:	20000738 	.word	0x20000738
 8046354:	200006f8 	.word	0x200006f8
 8046358:	20000740 	.word	0x20000740
 804635c:	2000063c 	.word	0x2000063c
 8046360:	20000638 	.word	0x20000638
 8046364:	2000074c 	.word	0x2000074c
 8046368:	20000748 	.word	0x20000748
 804636c:	e000ed04 	.word	0xe000ed04

08046370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8046370:	b580      	push	{r7, lr}
 8046372:	b086      	sub	sp, #24
 8046374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8046376:	2300      	movs	r3, #0
 8046378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 804637a:	4b4e      	ldr	r3, [pc, #312]	; (80464b4 <xTaskIncrementTick+0x144>)
 804637c:	681b      	ldr	r3, [r3, #0]
 804637e:	2b00      	cmp	r3, #0
 8046380:	f040 808e 	bne.w	80464a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8046384:	4b4c      	ldr	r3, [pc, #304]	; (80464b8 <xTaskIncrementTick+0x148>)
 8046386:	681b      	ldr	r3, [r3, #0]
 8046388:	3301      	adds	r3, #1
 804638a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 804638c:	4a4a      	ldr	r2, [pc, #296]	; (80464b8 <xTaskIncrementTick+0x148>)
 804638e:	693b      	ldr	r3, [r7, #16]
 8046390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8046392:	693b      	ldr	r3, [r7, #16]
 8046394:	2b00      	cmp	r3, #0
 8046396:	d120      	bne.n	80463da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8046398:	4b48      	ldr	r3, [pc, #288]	; (80464bc <xTaskIncrementTick+0x14c>)
 804639a:	681b      	ldr	r3, [r3, #0]
 804639c:	681b      	ldr	r3, [r3, #0]
 804639e:	2b00      	cmp	r3, #0
 80463a0:	d00a      	beq.n	80463b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80463a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80463a6:	f383 8811 	msr	BASEPRI, r3
 80463aa:	f3bf 8f6f 	isb	sy
 80463ae:	f3bf 8f4f 	dsb	sy
 80463b2:	603b      	str	r3, [r7, #0]
}
 80463b4:	bf00      	nop
 80463b6:	e7fe      	b.n	80463b6 <xTaskIncrementTick+0x46>
 80463b8:	4b40      	ldr	r3, [pc, #256]	; (80464bc <xTaskIncrementTick+0x14c>)
 80463ba:	681b      	ldr	r3, [r3, #0]
 80463bc:	60fb      	str	r3, [r7, #12]
 80463be:	4b40      	ldr	r3, [pc, #256]	; (80464c0 <xTaskIncrementTick+0x150>)
 80463c0:	681b      	ldr	r3, [r3, #0]
 80463c2:	4a3e      	ldr	r2, [pc, #248]	; (80464bc <xTaskIncrementTick+0x14c>)
 80463c4:	6013      	str	r3, [r2, #0]
 80463c6:	4a3e      	ldr	r2, [pc, #248]	; (80464c0 <xTaskIncrementTick+0x150>)
 80463c8:	68fb      	ldr	r3, [r7, #12]
 80463ca:	6013      	str	r3, [r2, #0]
 80463cc:	4b3d      	ldr	r3, [pc, #244]	; (80464c4 <xTaskIncrementTick+0x154>)
 80463ce:	681b      	ldr	r3, [r3, #0]
 80463d0:	3301      	adds	r3, #1
 80463d2:	4a3c      	ldr	r2, [pc, #240]	; (80464c4 <xTaskIncrementTick+0x154>)
 80463d4:	6013      	str	r3, [r2, #0]
 80463d6:	f000 f99f 	bl	8046718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80463da:	4b3b      	ldr	r3, [pc, #236]	; (80464c8 <xTaskIncrementTick+0x158>)
 80463dc:	681b      	ldr	r3, [r3, #0]
 80463de:	693a      	ldr	r2, [r7, #16]
 80463e0:	429a      	cmp	r2, r3
 80463e2:	d348      	bcc.n	8046476 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80463e4:	4b35      	ldr	r3, [pc, #212]	; (80464bc <xTaskIncrementTick+0x14c>)
 80463e6:	681b      	ldr	r3, [r3, #0]
 80463e8:	681b      	ldr	r3, [r3, #0]
 80463ea:	2b00      	cmp	r3, #0
 80463ec:	d104      	bne.n	80463f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80463ee:	4b36      	ldr	r3, [pc, #216]	; (80464c8 <xTaskIncrementTick+0x158>)
 80463f0:	f04f 32ff 	mov.w	r2, #4294967295
 80463f4:	601a      	str	r2, [r3, #0]
					break;
 80463f6:	e03e      	b.n	8046476 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80463f8:	4b30      	ldr	r3, [pc, #192]	; (80464bc <xTaskIncrementTick+0x14c>)
 80463fa:	681b      	ldr	r3, [r3, #0]
 80463fc:	68db      	ldr	r3, [r3, #12]
 80463fe:	68db      	ldr	r3, [r3, #12]
 8046400:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8046402:	68bb      	ldr	r3, [r7, #8]
 8046404:	685b      	ldr	r3, [r3, #4]
 8046406:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8046408:	693a      	ldr	r2, [r7, #16]
 804640a:	687b      	ldr	r3, [r7, #4]
 804640c:	429a      	cmp	r2, r3
 804640e:	d203      	bcs.n	8046418 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8046410:	4a2d      	ldr	r2, [pc, #180]	; (80464c8 <xTaskIncrementTick+0x158>)
 8046412:	687b      	ldr	r3, [r7, #4]
 8046414:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8046416:	e02e      	b.n	8046476 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8046418:	68bb      	ldr	r3, [r7, #8]
 804641a:	3304      	adds	r3, #4
 804641c:	4618      	mov	r0, r3
 804641e:	f7ff fbfa 	bl	8045c16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8046422:	68bb      	ldr	r3, [r7, #8]
 8046424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046426:	2b00      	cmp	r3, #0
 8046428:	d004      	beq.n	8046434 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 804642a:	68bb      	ldr	r3, [r7, #8]
 804642c:	3318      	adds	r3, #24
 804642e:	4618      	mov	r0, r3
 8046430:	f7ff fbf1 	bl	8045c16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8046434:	68bb      	ldr	r3, [r7, #8]
 8046436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046438:	2201      	movs	r2, #1
 804643a:	409a      	lsls	r2, r3
 804643c:	4b23      	ldr	r3, [pc, #140]	; (80464cc <xTaskIncrementTick+0x15c>)
 804643e:	681b      	ldr	r3, [r3, #0]
 8046440:	4313      	orrs	r3, r2
 8046442:	4a22      	ldr	r2, [pc, #136]	; (80464cc <xTaskIncrementTick+0x15c>)
 8046444:	6013      	str	r3, [r2, #0]
 8046446:	68bb      	ldr	r3, [r7, #8]
 8046448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804644a:	4613      	mov	r3, r2
 804644c:	009b      	lsls	r3, r3, #2
 804644e:	4413      	add	r3, r2
 8046450:	009b      	lsls	r3, r3, #2
 8046452:	4a1f      	ldr	r2, [pc, #124]	; (80464d0 <xTaskIncrementTick+0x160>)
 8046454:	441a      	add	r2, r3
 8046456:	68bb      	ldr	r3, [r7, #8]
 8046458:	3304      	adds	r3, #4
 804645a:	4619      	mov	r1, r3
 804645c:	4610      	mov	r0, r2
 804645e:	f7ff fb7d 	bl	8045b5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8046462:	68bb      	ldr	r3, [r7, #8]
 8046464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8046466:	4b1b      	ldr	r3, [pc, #108]	; (80464d4 <xTaskIncrementTick+0x164>)
 8046468:	681b      	ldr	r3, [r3, #0]
 804646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804646c:	429a      	cmp	r2, r3
 804646e:	d3b9      	bcc.n	80463e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8046470:	2301      	movs	r3, #1
 8046472:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8046474:	e7b6      	b.n	80463e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8046476:	4b17      	ldr	r3, [pc, #92]	; (80464d4 <xTaskIncrementTick+0x164>)
 8046478:	681b      	ldr	r3, [r3, #0]
 804647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804647c:	4914      	ldr	r1, [pc, #80]	; (80464d0 <xTaskIncrementTick+0x160>)
 804647e:	4613      	mov	r3, r2
 8046480:	009b      	lsls	r3, r3, #2
 8046482:	4413      	add	r3, r2
 8046484:	009b      	lsls	r3, r3, #2
 8046486:	440b      	add	r3, r1
 8046488:	681b      	ldr	r3, [r3, #0]
 804648a:	2b01      	cmp	r3, #1
 804648c:	d901      	bls.n	8046492 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 804648e:	2301      	movs	r3, #1
 8046490:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8046492:	4b11      	ldr	r3, [pc, #68]	; (80464d8 <xTaskIncrementTick+0x168>)
 8046494:	681b      	ldr	r3, [r3, #0]
 8046496:	2b00      	cmp	r3, #0
 8046498:	d007      	beq.n	80464aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 804649a:	2301      	movs	r3, #1
 804649c:	617b      	str	r3, [r7, #20]
 804649e:	e004      	b.n	80464aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80464a0:	4b0e      	ldr	r3, [pc, #56]	; (80464dc <xTaskIncrementTick+0x16c>)
 80464a2:	681b      	ldr	r3, [r3, #0]
 80464a4:	3301      	adds	r3, #1
 80464a6:	4a0d      	ldr	r2, [pc, #52]	; (80464dc <xTaskIncrementTick+0x16c>)
 80464a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80464aa:	697b      	ldr	r3, [r7, #20]
}
 80464ac:	4618      	mov	r0, r3
 80464ae:	3718      	adds	r7, #24
 80464b0:	46bd      	mov	sp, r7
 80464b2:	bd80      	pop	{r7, pc}
 80464b4:	20000760 	.word	0x20000760
 80464b8:	2000073c 	.word	0x2000073c
 80464bc:	200006f0 	.word	0x200006f0
 80464c0:	200006f4 	.word	0x200006f4
 80464c4:	20000750 	.word	0x20000750
 80464c8:	20000758 	.word	0x20000758
 80464cc:	20000740 	.word	0x20000740
 80464d0:	2000063c 	.word	0x2000063c
 80464d4:	20000638 	.word	0x20000638
 80464d8:	2000074c 	.word	0x2000074c
 80464dc:	20000748 	.word	0x20000748

080464e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80464e0:	b480      	push	{r7}
 80464e2:	b087      	sub	sp, #28
 80464e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80464e6:	4b29      	ldr	r3, [pc, #164]	; (804658c <vTaskSwitchContext+0xac>)
 80464e8:	681b      	ldr	r3, [r3, #0]
 80464ea:	2b00      	cmp	r3, #0
 80464ec:	d003      	beq.n	80464f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80464ee:	4b28      	ldr	r3, [pc, #160]	; (8046590 <vTaskSwitchContext+0xb0>)
 80464f0:	2201      	movs	r2, #1
 80464f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80464f4:	e044      	b.n	8046580 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80464f6:	4b26      	ldr	r3, [pc, #152]	; (8046590 <vTaskSwitchContext+0xb0>)
 80464f8:	2200      	movs	r2, #0
 80464fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80464fc:	4b25      	ldr	r3, [pc, #148]	; (8046594 <vTaskSwitchContext+0xb4>)
 80464fe:	681b      	ldr	r3, [r3, #0]
 8046500:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8046502:	68fb      	ldr	r3, [r7, #12]
 8046504:	fab3 f383 	clz	r3, r3
 8046508:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 804650a:	7afb      	ldrb	r3, [r7, #11]
 804650c:	f1c3 031f 	rsb	r3, r3, #31
 8046510:	617b      	str	r3, [r7, #20]
 8046512:	4921      	ldr	r1, [pc, #132]	; (8046598 <vTaskSwitchContext+0xb8>)
 8046514:	697a      	ldr	r2, [r7, #20]
 8046516:	4613      	mov	r3, r2
 8046518:	009b      	lsls	r3, r3, #2
 804651a:	4413      	add	r3, r2
 804651c:	009b      	lsls	r3, r3, #2
 804651e:	440b      	add	r3, r1
 8046520:	681b      	ldr	r3, [r3, #0]
 8046522:	2b00      	cmp	r3, #0
 8046524:	d10a      	bne.n	804653c <vTaskSwitchContext+0x5c>
	__asm volatile
 8046526:	f04f 0350 	mov.w	r3, #80	; 0x50
 804652a:	f383 8811 	msr	BASEPRI, r3
 804652e:	f3bf 8f6f 	isb	sy
 8046532:	f3bf 8f4f 	dsb	sy
 8046536:	607b      	str	r3, [r7, #4]
}
 8046538:	bf00      	nop
 804653a:	e7fe      	b.n	804653a <vTaskSwitchContext+0x5a>
 804653c:	697a      	ldr	r2, [r7, #20]
 804653e:	4613      	mov	r3, r2
 8046540:	009b      	lsls	r3, r3, #2
 8046542:	4413      	add	r3, r2
 8046544:	009b      	lsls	r3, r3, #2
 8046546:	4a14      	ldr	r2, [pc, #80]	; (8046598 <vTaskSwitchContext+0xb8>)
 8046548:	4413      	add	r3, r2
 804654a:	613b      	str	r3, [r7, #16]
 804654c:	693b      	ldr	r3, [r7, #16]
 804654e:	685b      	ldr	r3, [r3, #4]
 8046550:	685a      	ldr	r2, [r3, #4]
 8046552:	693b      	ldr	r3, [r7, #16]
 8046554:	605a      	str	r2, [r3, #4]
 8046556:	693b      	ldr	r3, [r7, #16]
 8046558:	685a      	ldr	r2, [r3, #4]
 804655a:	693b      	ldr	r3, [r7, #16]
 804655c:	3308      	adds	r3, #8
 804655e:	429a      	cmp	r2, r3
 8046560:	d104      	bne.n	804656c <vTaskSwitchContext+0x8c>
 8046562:	693b      	ldr	r3, [r7, #16]
 8046564:	685b      	ldr	r3, [r3, #4]
 8046566:	685a      	ldr	r2, [r3, #4]
 8046568:	693b      	ldr	r3, [r7, #16]
 804656a:	605a      	str	r2, [r3, #4]
 804656c:	693b      	ldr	r3, [r7, #16]
 804656e:	685b      	ldr	r3, [r3, #4]
 8046570:	68db      	ldr	r3, [r3, #12]
 8046572:	4a0a      	ldr	r2, [pc, #40]	; (804659c <vTaskSwitchContext+0xbc>)
 8046574:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8046576:	4b09      	ldr	r3, [pc, #36]	; (804659c <vTaskSwitchContext+0xbc>)
 8046578:	681b      	ldr	r3, [r3, #0]
 804657a:	334c      	adds	r3, #76	; 0x4c
 804657c:	4a08      	ldr	r2, [pc, #32]	; (80465a0 <vTaskSwitchContext+0xc0>)
 804657e:	6013      	str	r3, [r2, #0]
}
 8046580:	bf00      	nop
 8046582:	371c      	adds	r7, #28
 8046584:	46bd      	mov	sp, r7
 8046586:	f85d 7b04 	ldr.w	r7, [sp], #4
 804658a:	4770      	bx	lr
 804658c:	20000760 	.word	0x20000760
 8046590:	2000074c 	.word	0x2000074c
 8046594:	20000740 	.word	0x20000740
 8046598:	2000063c 	.word	0x2000063c
 804659c:	20000638 	.word	0x20000638
 80465a0:	20000010 	.word	0x20000010

080465a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80465a4:	b580      	push	{r7, lr}
 80465a6:	b082      	sub	sp, #8
 80465a8:	af00      	add	r7, sp, #0
 80465aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80465ac:	f000 f852 	bl	8046654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80465b0:	4b06      	ldr	r3, [pc, #24]	; (80465cc <prvIdleTask+0x28>)
 80465b2:	681b      	ldr	r3, [r3, #0]
 80465b4:	2b01      	cmp	r3, #1
 80465b6:	d9f9      	bls.n	80465ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80465b8:	4b05      	ldr	r3, [pc, #20]	; (80465d0 <prvIdleTask+0x2c>)
 80465ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80465be:	601a      	str	r2, [r3, #0]
 80465c0:	f3bf 8f4f 	dsb	sy
 80465c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80465c8:	e7f0      	b.n	80465ac <prvIdleTask+0x8>
 80465ca:	bf00      	nop
 80465cc:	2000063c 	.word	0x2000063c
 80465d0:	e000ed04 	.word	0xe000ed04

080465d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80465d4:	b580      	push	{r7, lr}
 80465d6:	b082      	sub	sp, #8
 80465d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80465da:	2300      	movs	r3, #0
 80465dc:	607b      	str	r3, [r7, #4]
 80465de:	e00c      	b.n	80465fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80465e0:	687a      	ldr	r2, [r7, #4]
 80465e2:	4613      	mov	r3, r2
 80465e4:	009b      	lsls	r3, r3, #2
 80465e6:	4413      	add	r3, r2
 80465e8:	009b      	lsls	r3, r3, #2
 80465ea:	4a12      	ldr	r2, [pc, #72]	; (8046634 <prvInitialiseTaskLists+0x60>)
 80465ec:	4413      	add	r3, r2
 80465ee:	4618      	mov	r0, r3
 80465f0:	f7ff fa87 	bl	8045b02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80465f4:	687b      	ldr	r3, [r7, #4]
 80465f6:	3301      	adds	r3, #1
 80465f8:	607b      	str	r3, [r7, #4]
 80465fa:	687b      	ldr	r3, [r7, #4]
 80465fc:	2b06      	cmp	r3, #6
 80465fe:	d9ef      	bls.n	80465e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8046600:	480d      	ldr	r0, [pc, #52]	; (8046638 <prvInitialiseTaskLists+0x64>)
 8046602:	f7ff fa7e 	bl	8045b02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8046606:	480d      	ldr	r0, [pc, #52]	; (804663c <prvInitialiseTaskLists+0x68>)
 8046608:	f7ff fa7b 	bl	8045b02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 804660c:	480c      	ldr	r0, [pc, #48]	; (8046640 <prvInitialiseTaskLists+0x6c>)
 804660e:	f7ff fa78 	bl	8045b02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8046612:	480c      	ldr	r0, [pc, #48]	; (8046644 <prvInitialiseTaskLists+0x70>)
 8046614:	f7ff fa75 	bl	8045b02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8046618:	480b      	ldr	r0, [pc, #44]	; (8046648 <prvInitialiseTaskLists+0x74>)
 804661a:	f7ff fa72 	bl	8045b02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 804661e:	4b0b      	ldr	r3, [pc, #44]	; (804664c <prvInitialiseTaskLists+0x78>)
 8046620:	4a05      	ldr	r2, [pc, #20]	; (8046638 <prvInitialiseTaskLists+0x64>)
 8046622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8046624:	4b0a      	ldr	r3, [pc, #40]	; (8046650 <prvInitialiseTaskLists+0x7c>)
 8046626:	4a05      	ldr	r2, [pc, #20]	; (804663c <prvInitialiseTaskLists+0x68>)
 8046628:	601a      	str	r2, [r3, #0]
}
 804662a:	bf00      	nop
 804662c:	3708      	adds	r7, #8
 804662e:	46bd      	mov	sp, r7
 8046630:	bd80      	pop	{r7, pc}
 8046632:	bf00      	nop
 8046634:	2000063c 	.word	0x2000063c
 8046638:	200006c8 	.word	0x200006c8
 804663c:	200006dc 	.word	0x200006dc
 8046640:	200006f8 	.word	0x200006f8
 8046644:	2000070c 	.word	0x2000070c
 8046648:	20000724 	.word	0x20000724
 804664c:	200006f0 	.word	0x200006f0
 8046650:	200006f4 	.word	0x200006f4

08046654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8046654:	b580      	push	{r7, lr}
 8046656:	b082      	sub	sp, #8
 8046658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 804665a:	e019      	b.n	8046690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 804665c:	f000 fa12 	bl	8046a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8046660:	4b10      	ldr	r3, [pc, #64]	; (80466a4 <prvCheckTasksWaitingTermination+0x50>)
 8046662:	68db      	ldr	r3, [r3, #12]
 8046664:	68db      	ldr	r3, [r3, #12]
 8046666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8046668:	687b      	ldr	r3, [r7, #4]
 804666a:	3304      	adds	r3, #4
 804666c:	4618      	mov	r0, r3
 804666e:	f7ff fad2 	bl	8045c16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8046672:	4b0d      	ldr	r3, [pc, #52]	; (80466a8 <prvCheckTasksWaitingTermination+0x54>)
 8046674:	681b      	ldr	r3, [r3, #0]
 8046676:	3b01      	subs	r3, #1
 8046678:	4a0b      	ldr	r2, [pc, #44]	; (80466a8 <prvCheckTasksWaitingTermination+0x54>)
 804667a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 804667c:	4b0b      	ldr	r3, [pc, #44]	; (80466ac <prvCheckTasksWaitingTermination+0x58>)
 804667e:	681b      	ldr	r3, [r3, #0]
 8046680:	3b01      	subs	r3, #1
 8046682:	4a0a      	ldr	r2, [pc, #40]	; (80466ac <prvCheckTasksWaitingTermination+0x58>)
 8046684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8046686:	f000 fa2d 	bl	8046ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 804668a:	6878      	ldr	r0, [r7, #4]
 804668c:	f000 f810 	bl	80466b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8046690:	4b06      	ldr	r3, [pc, #24]	; (80466ac <prvCheckTasksWaitingTermination+0x58>)
 8046692:	681b      	ldr	r3, [r3, #0]
 8046694:	2b00      	cmp	r3, #0
 8046696:	d1e1      	bne.n	804665c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8046698:	bf00      	nop
 804669a:	bf00      	nop
 804669c:	3708      	adds	r7, #8
 804669e:	46bd      	mov	sp, r7
 80466a0:	bd80      	pop	{r7, pc}
 80466a2:	bf00      	nop
 80466a4:	2000070c 	.word	0x2000070c
 80466a8:	20000738 	.word	0x20000738
 80466ac:	20000720 	.word	0x20000720

080466b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80466b0:	b580      	push	{r7, lr}
 80466b2:	b084      	sub	sp, #16
 80466b4:	af00      	add	r7, sp, #0
 80466b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80466b8:	687b      	ldr	r3, [r7, #4]
 80466ba:	334c      	adds	r3, #76	; 0x4c
 80466bc:	4618      	mov	r0, r3
 80466be:	f001 fb81 	bl	8047dc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80466c2:	687b      	ldr	r3, [r7, #4]
 80466c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80466c8:	2b00      	cmp	r3, #0
 80466ca:	d108      	bne.n	80466de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80466cc:	687b      	ldr	r3, [r7, #4]
 80466ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80466d0:	4618      	mov	r0, r3
 80466d2:	f000 fb85 	bl	8046de0 <vPortFree>
				vPortFree( pxTCB );
 80466d6:	6878      	ldr	r0, [r7, #4]
 80466d8:	f000 fb82 	bl	8046de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80466dc:	e018      	b.n	8046710 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80466de:	687b      	ldr	r3, [r7, #4]
 80466e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80466e4:	2b01      	cmp	r3, #1
 80466e6:	d103      	bne.n	80466f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80466e8:	6878      	ldr	r0, [r7, #4]
 80466ea:	f000 fb79 	bl	8046de0 <vPortFree>
	}
 80466ee:	e00f      	b.n	8046710 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80466f0:	687b      	ldr	r3, [r7, #4]
 80466f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80466f6:	2b02      	cmp	r3, #2
 80466f8:	d00a      	beq.n	8046710 <prvDeleteTCB+0x60>
	__asm volatile
 80466fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80466fe:	f383 8811 	msr	BASEPRI, r3
 8046702:	f3bf 8f6f 	isb	sy
 8046706:	f3bf 8f4f 	dsb	sy
 804670a:	60fb      	str	r3, [r7, #12]
}
 804670c:	bf00      	nop
 804670e:	e7fe      	b.n	804670e <prvDeleteTCB+0x5e>
	}
 8046710:	bf00      	nop
 8046712:	3710      	adds	r7, #16
 8046714:	46bd      	mov	sp, r7
 8046716:	bd80      	pop	{r7, pc}

08046718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8046718:	b480      	push	{r7}
 804671a:	b083      	sub	sp, #12
 804671c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 804671e:	4b0c      	ldr	r3, [pc, #48]	; (8046750 <prvResetNextTaskUnblockTime+0x38>)
 8046720:	681b      	ldr	r3, [r3, #0]
 8046722:	681b      	ldr	r3, [r3, #0]
 8046724:	2b00      	cmp	r3, #0
 8046726:	d104      	bne.n	8046732 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8046728:	4b0a      	ldr	r3, [pc, #40]	; (8046754 <prvResetNextTaskUnblockTime+0x3c>)
 804672a:	f04f 32ff 	mov.w	r2, #4294967295
 804672e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8046730:	e008      	b.n	8046744 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8046732:	4b07      	ldr	r3, [pc, #28]	; (8046750 <prvResetNextTaskUnblockTime+0x38>)
 8046734:	681b      	ldr	r3, [r3, #0]
 8046736:	68db      	ldr	r3, [r3, #12]
 8046738:	68db      	ldr	r3, [r3, #12]
 804673a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 804673c:	687b      	ldr	r3, [r7, #4]
 804673e:	685b      	ldr	r3, [r3, #4]
 8046740:	4a04      	ldr	r2, [pc, #16]	; (8046754 <prvResetNextTaskUnblockTime+0x3c>)
 8046742:	6013      	str	r3, [r2, #0]
}
 8046744:	bf00      	nop
 8046746:	370c      	adds	r7, #12
 8046748:	46bd      	mov	sp, r7
 804674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804674e:	4770      	bx	lr
 8046750:	200006f0 	.word	0x200006f0
 8046754:	20000758 	.word	0x20000758

08046758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8046758:	b580      	push	{r7, lr}
 804675a:	b084      	sub	sp, #16
 804675c:	af00      	add	r7, sp, #0
 804675e:	6078      	str	r0, [r7, #4]
 8046760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8046762:	4b29      	ldr	r3, [pc, #164]	; (8046808 <prvAddCurrentTaskToDelayedList+0xb0>)
 8046764:	681b      	ldr	r3, [r3, #0]
 8046766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8046768:	4b28      	ldr	r3, [pc, #160]	; (804680c <prvAddCurrentTaskToDelayedList+0xb4>)
 804676a:	681b      	ldr	r3, [r3, #0]
 804676c:	3304      	adds	r3, #4
 804676e:	4618      	mov	r0, r3
 8046770:	f7ff fa51 	bl	8045c16 <uxListRemove>
 8046774:	4603      	mov	r3, r0
 8046776:	2b00      	cmp	r3, #0
 8046778:	d10b      	bne.n	8046792 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 804677a:	4b24      	ldr	r3, [pc, #144]	; (804680c <prvAddCurrentTaskToDelayedList+0xb4>)
 804677c:	681b      	ldr	r3, [r3, #0]
 804677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046780:	2201      	movs	r2, #1
 8046782:	fa02 f303 	lsl.w	r3, r2, r3
 8046786:	43da      	mvns	r2, r3
 8046788:	4b21      	ldr	r3, [pc, #132]	; (8046810 <prvAddCurrentTaskToDelayedList+0xb8>)
 804678a:	681b      	ldr	r3, [r3, #0]
 804678c:	4013      	ands	r3, r2
 804678e:	4a20      	ldr	r2, [pc, #128]	; (8046810 <prvAddCurrentTaskToDelayedList+0xb8>)
 8046790:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8046792:	687b      	ldr	r3, [r7, #4]
 8046794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046798:	d10a      	bne.n	80467b0 <prvAddCurrentTaskToDelayedList+0x58>
 804679a:	683b      	ldr	r3, [r7, #0]
 804679c:	2b00      	cmp	r3, #0
 804679e:	d007      	beq.n	80467b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80467a0:	4b1a      	ldr	r3, [pc, #104]	; (804680c <prvAddCurrentTaskToDelayedList+0xb4>)
 80467a2:	681b      	ldr	r3, [r3, #0]
 80467a4:	3304      	adds	r3, #4
 80467a6:	4619      	mov	r1, r3
 80467a8:	481a      	ldr	r0, [pc, #104]	; (8046814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80467aa:	f7ff f9d7 	bl	8045b5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80467ae:	e026      	b.n	80467fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80467b0:	68fa      	ldr	r2, [r7, #12]
 80467b2:	687b      	ldr	r3, [r7, #4]
 80467b4:	4413      	add	r3, r2
 80467b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80467b8:	4b14      	ldr	r3, [pc, #80]	; (804680c <prvAddCurrentTaskToDelayedList+0xb4>)
 80467ba:	681b      	ldr	r3, [r3, #0]
 80467bc:	68ba      	ldr	r2, [r7, #8]
 80467be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80467c0:	68ba      	ldr	r2, [r7, #8]
 80467c2:	68fb      	ldr	r3, [r7, #12]
 80467c4:	429a      	cmp	r2, r3
 80467c6:	d209      	bcs.n	80467dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80467c8:	4b13      	ldr	r3, [pc, #76]	; (8046818 <prvAddCurrentTaskToDelayedList+0xc0>)
 80467ca:	681a      	ldr	r2, [r3, #0]
 80467cc:	4b0f      	ldr	r3, [pc, #60]	; (804680c <prvAddCurrentTaskToDelayedList+0xb4>)
 80467ce:	681b      	ldr	r3, [r3, #0]
 80467d0:	3304      	adds	r3, #4
 80467d2:	4619      	mov	r1, r3
 80467d4:	4610      	mov	r0, r2
 80467d6:	f7ff f9e5 	bl	8045ba4 <vListInsert>
}
 80467da:	e010      	b.n	80467fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80467dc:	4b0f      	ldr	r3, [pc, #60]	; (804681c <prvAddCurrentTaskToDelayedList+0xc4>)
 80467de:	681a      	ldr	r2, [r3, #0]
 80467e0:	4b0a      	ldr	r3, [pc, #40]	; (804680c <prvAddCurrentTaskToDelayedList+0xb4>)
 80467e2:	681b      	ldr	r3, [r3, #0]
 80467e4:	3304      	adds	r3, #4
 80467e6:	4619      	mov	r1, r3
 80467e8:	4610      	mov	r0, r2
 80467ea:	f7ff f9db 	bl	8045ba4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80467ee:	4b0c      	ldr	r3, [pc, #48]	; (8046820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80467f0:	681b      	ldr	r3, [r3, #0]
 80467f2:	68ba      	ldr	r2, [r7, #8]
 80467f4:	429a      	cmp	r2, r3
 80467f6:	d202      	bcs.n	80467fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80467f8:	4a09      	ldr	r2, [pc, #36]	; (8046820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80467fa:	68bb      	ldr	r3, [r7, #8]
 80467fc:	6013      	str	r3, [r2, #0]
}
 80467fe:	bf00      	nop
 8046800:	3710      	adds	r7, #16
 8046802:	46bd      	mov	sp, r7
 8046804:	bd80      	pop	{r7, pc}
 8046806:	bf00      	nop
 8046808:	2000073c 	.word	0x2000073c
 804680c:	20000638 	.word	0x20000638
 8046810:	20000740 	.word	0x20000740
 8046814:	20000724 	.word	0x20000724
 8046818:	200006f4 	.word	0x200006f4
 804681c:	200006f0 	.word	0x200006f0
 8046820:	20000758 	.word	0x20000758

08046824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8046824:	b480      	push	{r7}
 8046826:	b085      	sub	sp, #20
 8046828:	af00      	add	r7, sp, #0
 804682a:	60f8      	str	r0, [r7, #12]
 804682c:	60b9      	str	r1, [r7, #8]
 804682e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8046830:	68fb      	ldr	r3, [r7, #12]
 8046832:	3b04      	subs	r3, #4
 8046834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8046836:	68fb      	ldr	r3, [r7, #12]
 8046838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 804683c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 804683e:	68fb      	ldr	r3, [r7, #12]
 8046840:	3b04      	subs	r3, #4
 8046842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8046844:	68bb      	ldr	r3, [r7, #8]
 8046846:	f023 0201 	bic.w	r2, r3, #1
 804684a:	68fb      	ldr	r3, [r7, #12]
 804684c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 804684e:	68fb      	ldr	r3, [r7, #12]
 8046850:	3b04      	subs	r3, #4
 8046852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8046854:	4a0c      	ldr	r2, [pc, #48]	; (8046888 <pxPortInitialiseStack+0x64>)
 8046856:	68fb      	ldr	r3, [r7, #12]
 8046858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 804685a:	68fb      	ldr	r3, [r7, #12]
 804685c:	3b14      	subs	r3, #20
 804685e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8046860:	687a      	ldr	r2, [r7, #4]
 8046862:	68fb      	ldr	r3, [r7, #12]
 8046864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8046866:	68fb      	ldr	r3, [r7, #12]
 8046868:	3b04      	subs	r3, #4
 804686a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 804686c:	68fb      	ldr	r3, [r7, #12]
 804686e:	f06f 0202 	mvn.w	r2, #2
 8046872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8046874:	68fb      	ldr	r3, [r7, #12]
 8046876:	3b20      	subs	r3, #32
 8046878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 804687a:	68fb      	ldr	r3, [r7, #12]
}
 804687c:	4618      	mov	r0, r3
 804687e:	3714      	adds	r7, #20
 8046880:	46bd      	mov	sp, r7
 8046882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046886:	4770      	bx	lr
 8046888:	0804688d 	.word	0x0804688d

0804688c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 804688c:	b480      	push	{r7}
 804688e:	b085      	sub	sp, #20
 8046890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8046892:	2300      	movs	r3, #0
 8046894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8046896:	4b12      	ldr	r3, [pc, #72]	; (80468e0 <prvTaskExitError+0x54>)
 8046898:	681b      	ldr	r3, [r3, #0]
 804689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804689e:	d00a      	beq.n	80468b6 <prvTaskExitError+0x2a>
	__asm volatile
 80468a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80468a4:	f383 8811 	msr	BASEPRI, r3
 80468a8:	f3bf 8f6f 	isb	sy
 80468ac:	f3bf 8f4f 	dsb	sy
 80468b0:	60fb      	str	r3, [r7, #12]
}
 80468b2:	bf00      	nop
 80468b4:	e7fe      	b.n	80468b4 <prvTaskExitError+0x28>
	__asm volatile
 80468b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80468ba:	f383 8811 	msr	BASEPRI, r3
 80468be:	f3bf 8f6f 	isb	sy
 80468c2:	f3bf 8f4f 	dsb	sy
 80468c6:	60bb      	str	r3, [r7, #8]
}
 80468c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80468ca:	bf00      	nop
 80468cc:	687b      	ldr	r3, [r7, #4]
 80468ce:	2b00      	cmp	r3, #0
 80468d0:	d0fc      	beq.n	80468cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80468d2:	bf00      	nop
 80468d4:	bf00      	nop
 80468d6:	3714      	adds	r7, #20
 80468d8:	46bd      	mov	sp, r7
 80468da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80468de:	4770      	bx	lr
 80468e0:	2000000c 	.word	0x2000000c
	...

080468f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80468f0:	4b07      	ldr	r3, [pc, #28]	; (8046910 <pxCurrentTCBConst2>)
 80468f2:	6819      	ldr	r1, [r3, #0]
 80468f4:	6808      	ldr	r0, [r1, #0]
 80468f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80468fa:	f380 8809 	msr	PSP, r0
 80468fe:	f3bf 8f6f 	isb	sy
 8046902:	f04f 0000 	mov.w	r0, #0
 8046906:	f380 8811 	msr	BASEPRI, r0
 804690a:	4770      	bx	lr
 804690c:	f3af 8000 	nop.w

08046910 <pxCurrentTCBConst2>:
 8046910:	20000638 	.word	0x20000638
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8046914:	bf00      	nop
 8046916:	bf00      	nop

08046918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8046918:	4808      	ldr	r0, [pc, #32]	; (804693c <prvPortStartFirstTask+0x24>)
 804691a:	6800      	ldr	r0, [r0, #0]
 804691c:	6800      	ldr	r0, [r0, #0]
 804691e:	f380 8808 	msr	MSP, r0
 8046922:	f04f 0000 	mov.w	r0, #0
 8046926:	f380 8814 	msr	CONTROL, r0
 804692a:	b662      	cpsie	i
 804692c:	b661      	cpsie	f
 804692e:	f3bf 8f4f 	dsb	sy
 8046932:	f3bf 8f6f 	isb	sy
 8046936:	df00      	svc	0
 8046938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 804693a:	bf00      	nop
 804693c:	e000ed08 	.word	0xe000ed08

08046940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8046940:	b580      	push	{r7, lr}
 8046942:	b086      	sub	sp, #24
 8046944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8046946:	4b46      	ldr	r3, [pc, #280]	; (8046a60 <xPortStartScheduler+0x120>)
 8046948:	681b      	ldr	r3, [r3, #0]
 804694a:	4a46      	ldr	r2, [pc, #280]	; (8046a64 <xPortStartScheduler+0x124>)
 804694c:	4293      	cmp	r3, r2
 804694e:	d10a      	bne.n	8046966 <xPortStartScheduler+0x26>
	__asm volatile
 8046950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046954:	f383 8811 	msr	BASEPRI, r3
 8046958:	f3bf 8f6f 	isb	sy
 804695c:	f3bf 8f4f 	dsb	sy
 8046960:	613b      	str	r3, [r7, #16]
}
 8046962:	bf00      	nop
 8046964:	e7fe      	b.n	8046964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8046966:	4b3e      	ldr	r3, [pc, #248]	; (8046a60 <xPortStartScheduler+0x120>)
 8046968:	681b      	ldr	r3, [r3, #0]
 804696a:	4a3f      	ldr	r2, [pc, #252]	; (8046a68 <xPortStartScheduler+0x128>)
 804696c:	4293      	cmp	r3, r2
 804696e:	d10a      	bne.n	8046986 <xPortStartScheduler+0x46>
	__asm volatile
 8046970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046974:	f383 8811 	msr	BASEPRI, r3
 8046978:	f3bf 8f6f 	isb	sy
 804697c:	f3bf 8f4f 	dsb	sy
 8046980:	60fb      	str	r3, [r7, #12]
}
 8046982:	bf00      	nop
 8046984:	e7fe      	b.n	8046984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8046986:	4b39      	ldr	r3, [pc, #228]	; (8046a6c <xPortStartScheduler+0x12c>)
 8046988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 804698a:	697b      	ldr	r3, [r7, #20]
 804698c:	781b      	ldrb	r3, [r3, #0]
 804698e:	b2db      	uxtb	r3, r3
 8046990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8046992:	697b      	ldr	r3, [r7, #20]
 8046994:	22ff      	movs	r2, #255	; 0xff
 8046996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8046998:	697b      	ldr	r3, [r7, #20]
 804699a:	781b      	ldrb	r3, [r3, #0]
 804699c:	b2db      	uxtb	r3, r3
 804699e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80469a0:	78fb      	ldrb	r3, [r7, #3]
 80469a2:	b2db      	uxtb	r3, r3
 80469a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80469a8:	b2da      	uxtb	r2, r3
 80469aa:	4b31      	ldr	r3, [pc, #196]	; (8046a70 <xPortStartScheduler+0x130>)
 80469ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80469ae:	4b31      	ldr	r3, [pc, #196]	; (8046a74 <xPortStartScheduler+0x134>)
 80469b0:	2207      	movs	r2, #7
 80469b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80469b4:	e009      	b.n	80469ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80469b6:	4b2f      	ldr	r3, [pc, #188]	; (8046a74 <xPortStartScheduler+0x134>)
 80469b8:	681b      	ldr	r3, [r3, #0]
 80469ba:	3b01      	subs	r3, #1
 80469bc:	4a2d      	ldr	r2, [pc, #180]	; (8046a74 <xPortStartScheduler+0x134>)
 80469be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80469c0:	78fb      	ldrb	r3, [r7, #3]
 80469c2:	b2db      	uxtb	r3, r3
 80469c4:	005b      	lsls	r3, r3, #1
 80469c6:	b2db      	uxtb	r3, r3
 80469c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80469ca:	78fb      	ldrb	r3, [r7, #3]
 80469cc:	b2db      	uxtb	r3, r3
 80469ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80469d2:	2b80      	cmp	r3, #128	; 0x80
 80469d4:	d0ef      	beq.n	80469b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80469d6:	4b27      	ldr	r3, [pc, #156]	; (8046a74 <xPortStartScheduler+0x134>)
 80469d8:	681b      	ldr	r3, [r3, #0]
 80469da:	f1c3 0307 	rsb	r3, r3, #7
 80469de:	2b04      	cmp	r3, #4
 80469e0:	d00a      	beq.n	80469f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80469e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80469e6:	f383 8811 	msr	BASEPRI, r3
 80469ea:	f3bf 8f6f 	isb	sy
 80469ee:	f3bf 8f4f 	dsb	sy
 80469f2:	60bb      	str	r3, [r7, #8]
}
 80469f4:	bf00      	nop
 80469f6:	e7fe      	b.n	80469f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80469f8:	4b1e      	ldr	r3, [pc, #120]	; (8046a74 <xPortStartScheduler+0x134>)
 80469fa:	681b      	ldr	r3, [r3, #0]
 80469fc:	021b      	lsls	r3, r3, #8
 80469fe:	4a1d      	ldr	r2, [pc, #116]	; (8046a74 <xPortStartScheduler+0x134>)
 8046a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8046a02:	4b1c      	ldr	r3, [pc, #112]	; (8046a74 <xPortStartScheduler+0x134>)
 8046a04:	681b      	ldr	r3, [r3, #0]
 8046a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8046a0a:	4a1a      	ldr	r2, [pc, #104]	; (8046a74 <xPortStartScheduler+0x134>)
 8046a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8046a0e:	687b      	ldr	r3, [r7, #4]
 8046a10:	b2da      	uxtb	r2, r3
 8046a12:	697b      	ldr	r3, [r7, #20]
 8046a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8046a16:	4b18      	ldr	r3, [pc, #96]	; (8046a78 <xPortStartScheduler+0x138>)
 8046a18:	681b      	ldr	r3, [r3, #0]
 8046a1a:	4a17      	ldr	r2, [pc, #92]	; (8046a78 <xPortStartScheduler+0x138>)
 8046a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8046a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8046a22:	4b15      	ldr	r3, [pc, #84]	; (8046a78 <xPortStartScheduler+0x138>)
 8046a24:	681b      	ldr	r3, [r3, #0]
 8046a26:	4a14      	ldr	r2, [pc, #80]	; (8046a78 <xPortStartScheduler+0x138>)
 8046a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8046a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8046a2e:	f000 f8dd 	bl	8046bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8046a32:	4b12      	ldr	r3, [pc, #72]	; (8046a7c <xPortStartScheduler+0x13c>)
 8046a34:	2200      	movs	r2, #0
 8046a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8046a38:	f000 f8fc 	bl	8046c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8046a3c:	4b10      	ldr	r3, [pc, #64]	; (8046a80 <xPortStartScheduler+0x140>)
 8046a3e:	681b      	ldr	r3, [r3, #0]
 8046a40:	4a0f      	ldr	r2, [pc, #60]	; (8046a80 <xPortStartScheduler+0x140>)
 8046a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8046a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8046a48:	f7ff ff66 	bl	8046918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8046a4c:	f7ff fd48 	bl	80464e0 <vTaskSwitchContext>
	prvTaskExitError();
 8046a50:	f7ff ff1c 	bl	804688c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8046a54:	2300      	movs	r3, #0
}
 8046a56:	4618      	mov	r0, r3
 8046a58:	3718      	adds	r7, #24
 8046a5a:	46bd      	mov	sp, r7
 8046a5c:	bd80      	pop	{r7, pc}
 8046a5e:	bf00      	nop
 8046a60:	e000ed00 	.word	0xe000ed00
 8046a64:	410fc271 	.word	0x410fc271
 8046a68:	410fc270 	.word	0x410fc270
 8046a6c:	e000e400 	.word	0xe000e400
 8046a70:	20000764 	.word	0x20000764
 8046a74:	20000768 	.word	0x20000768
 8046a78:	e000ed20 	.word	0xe000ed20
 8046a7c:	2000000c 	.word	0x2000000c
 8046a80:	e000ef34 	.word	0xe000ef34

08046a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8046a84:	b480      	push	{r7}
 8046a86:	b083      	sub	sp, #12
 8046a88:	af00      	add	r7, sp, #0
	__asm volatile
 8046a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046a8e:	f383 8811 	msr	BASEPRI, r3
 8046a92:	f3bf 8f6f 	isb	sy
 8046a96:	f3bf 8f4f 	dsb	sy
 8046a9a:	607b      	str	r3, [r7, #4]
}
 8046a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8046a9e:	4b0f      	ldr	r3, [pc, #60]	; (8046adc <vPortEnterCritical+0x58>)
 8046aa0:	681b      	ldr	r3, [r3, #0]
 8046aa2:	3301      	adds	r3, #1
 8046aa4:	4a0d      	ldr	r2, [pc, #52]	; (8046adc <vPortEnterCritical+0x58>)
 8046aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8046aa8:	4b0c      	ldr	r3, [pc, #48]	; (8046adc <vPortEnterCritical+0x58>)
 8046aaa:	681b      	ldr	r3, [r3, #0]
 8046aac:	2b01      	cmp	r3, #1
 8046aae:	d10f      	bne.n	8046ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8046ab0:	4b0b      	ldr	r3, [pc, #44]	; (8046ae0 <vPortEnterCritical+0x5c>)
 8046ab2:	681b      	ldr	r3, [r3, #0]
 8046ab4:	b2db      	uxtb	r3, r3
 8046ab6:	2b00      	cmp	r3, #0
 8046ab8:	d00a      	beq.n	8046ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8046aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046abe:	f383 8811 	msr	BASEPRI, r3
 8046ac2:	f3bf 8f6f 	isb	sy
 8046ac6:	f3bf 8f4f 	dsb	sy
 8046aca:	603b      	str	r3, [r7, #0]
}
 8046acc:	bf00      	nop
 8046ace:	e7fe      	b.n	8046ace <vPortEnterCritical+0x4a>
	}
}
 8046ad0:	bf00      	nop
 8046ad2:	370c      	adds	r7, #12
 8046ad4:	46bd      	mov	sp, r7
 8046ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046ada:	4770      	bx	lr
 8046adc:	2000000c 	.word	0x2000000c
 8046ae0:	e000ed04 	.word	0xe000ed04

08046ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8046ae4:	b480      	push	{r7}
 8046ae6:	b083      	sub	sp, #12
 8046ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8046aea:	4b12      	ldr	r3, [pc, #72]	; (8046b34 <vPortExitCritical+0x50>)
 8046aec:	681b      	ldr	r3, [r3, #0]
 8046aee:	2b00      	cmp	r3, #0
 8046af0:	d10a      	bne.n	8046b08 <vPortExitCritical+0x24>
	__asm volatile
 8046af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046af6:	f383 8811 	msr	BASEPRI, r3
 8046afa:	f3bf 8f6f 	isb	sy
 8046afe:	f3bf 8f4f 	dsb	sy
 8046b02:	607b      	str	r3, [r7, #4]
}
 8046b04:	bf00      	nop
 8046b06:	e7fe      	b.n	8046b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8046b08:	4b0a      	ldr	r3, [pc, #40]	; (8046b34 <vPortExitCritical+0x50>)
 8046b0a:	681b      	ldr	r3, [r3, #0]
 8046b0c:	3b01      	subs	r3, #1
 8046b0e:	4a09      	ldr	r2, [pc, #36]	; (8046b34 <vPortExitCritical+0x50>)
 8046b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8046b12:	4b08      	ldr	r3, [pc, #32]	; (8046b34 <vPortExitCritical+0x50>)
 8046b14:	681b      	ldr	r3, [r3, #0]
 8046b16:	2b00      	cmp	r3, #0
 8046b18:	d105      	bne.n	8046b26 <vPortExitCritical+0x42>
 8046b1a:	2300      	movs	r3, #0
 8046b1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8046b1e:	683b      	ldr	r3, [r7, #0]
 8046b20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8046b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8046b26:	bf00      	nop
 8046b28:	370c      	adds	r7, #12
 8046b2a:	46bd      	mov	sp, r7
 8046b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b30:	4770      	bx	lr
 8046b32:	bf00      	nop
 8046b34:	2000000c 	.word	0x2000000c
	...

08046b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8046b40:	f3ef 8009 	mrs	r0, PSP
 8046b44:	f3bf 8f6f 	isb	sy
 8046b48:	4b15      	ldr	r3, [pc, #84]	; (8046ba0 <pxCurrentTCBConst>)
 8046b4a:	681a      	ldr	r2, [r3, #0]
 8046b4c:	f01e 0f10 	tst.w	lr, #16
 8046b50:	bf08      	it	eq
 8046b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8046b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046b5a:	6010      	str	r0, [r2, #0]
 8046b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8046b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8046b64:	f380 8811 	msr	BASEPRI, r0
 8046b68:	f3bf 8f4f 	dsb	sy
 8046b6c:	f3bf 8f6f 	isb	sy
 8046b70:	f7ff fcb6 	bl	80464e0 <vTaskSwitchContext>
 8046b74:	f04f 0000 	mov.w	r0, #0
 8046b78:	f380 8811 	msr	BASEPRI, r0
 8046b7c:	bc09      	pop	{r0, r3}
 8046b7e:	6819      	ldr	r1, [r3, #0]
 8046b80:	6808      	ldr	r0, [r1, #0]
 8046b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046b86:	f01e 0f10 	tst.w	lr, #16
 8046b8a:	bf08      	it	eq
 8046b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8046b90:	f380 8809 	msr	PSP, r0
 8046b94:	f3bf 8f6f 	isb	sy
 8046b98:	4770      	bx	lr
 8046b9a:	bf00      	nop
 8046b9c:	f3af 8000 	nop.w

08046ba0 <pxCurrentTCBConst>:
 8046ba0:	20000638 	.word	0x20000638
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8046ba4:	bf00      	nop
 8046ba6:	bf00      	nop

08046ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8046ba8:	b580      	push	{r7, lr}
 8046baa:	b082      	sub	sp, #8
 8046bac:	af00      	add	r7, sp, #0
	__asm volatile
 8046bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046bb2:	f383 8811 	msr	BASEPRI, r3
 8046bb6:	f3bf 8f6f 	isb	sy
 8046bba:	f3bf 8f4f 	dsb	sy
 8046bbe:	607b      	str	r3, [r7, #4]
}
 8046bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8046bc2:	f7ff fbd5 	bl	8046370 <xTaskIncrementTick>
 8046bc6:	4603      	mov	r3, r0
 8046bc8:	2b00      	cmp	r3, #0
 8046bca:	d003      	beq.n	8046bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8046bcc:	4b06      	ldr	r3, [pc, #24]	; (8046be8 <SysTick_Handler+0x40>)
 8046bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8046bd2:	601a      	str	r2, [r3, #0]
 8046bd4:	2300      	movs	r3, #0
 8046bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8046bd8:	683b      	ldr	r3, [r7, #0]
 8046bda:	f383 8811 	msr	BASEPRI, r3
}
 8046bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8046be0:	bf00      	nop
 8046be2:	3708      	adds	r7, #8
 8046be4:	46bd      	mov	sp, r7
 8046be6:	bd80      	pop	{r7, pc}
 8046be8:	e000ed04 	.word	0xe000ed04

08046bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8046bec:	b480      	push	{r7}
 8046bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8046bf0:	4b0b      	ldr	r3, [pc, #44]	; (8046c20 <vPortSetupTimerInterrupt+0x34>)
 8046bf2:	2200      	movs	r2, #0
 8046bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8046bf6:	4b0b      	ldr	r3, [pc, #44]	; (8046c24 <vPortSetupTimerInterrupt+0x38>)
 8046bf8:	2200      	movs	r2, #0
 8046bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8046bfc:	4b0a      	ldr	r3, [pc, #40]	; (8046c28 <vPortSetupTimerInterrupt+0x3c>)
 8046bfe:	681b      	ldr	r3, [r3, #0]
 8046c00:	4a0a      	ldr	r2, [pc, #40]	; (8046c2c <vPortSetupTimerInterrupt+0x40>)
 8046c02:	fba2 2303 	umull	r2, r3, r2, r3
 8046c06:	099b      	lsrs	r3, r3, #6
 8046c08:	4a09      	ldr	r2, [pc, #36]	; (8046c30 <vPortSetupTimerInterrupt+0x44>)
 8046c0a:	3b01      	subs	r3, #1
 8046c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8046c0e:	4b04      	ldr	r3, [pc, #16]	; (8046c20 <vPortSetupTimerInterrupt+0x34>)
 8046c10:	2207      	movs	r2, #7
 8046c12:	601a      	str	r2, [r3, #0]
}
 8046c14:	bf00      	nop
 8046c16:	46bd      	mov	sp, r7
 8046c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c1c:	4770      	bx	lr
 8046c1e:	bf00      	nop
 8046c20:	e000e010 	.word	0xe000e010
 8046c24:	e000e018 	.word	0xe000e018
 8046c28:	20000000 	.word	0x20000000
 8046c2c:	10624dd3 	.word	0x10624dd3
 8046c30:	e000e014 	.word	0xe000e014

08046c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8046c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8046c44 <vPortEnableVFP+0x10>
 8046c38:	6801      	ldr	r1, [r0, #0]
 8046c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8046c3e:	6001      	str	r1, [r0, #0]
 8046c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8046c42:	bf00      	nop
 8046c44:	e000ed88 	.word	0xe000ed88

08046c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8046c48:	b580      	push	{r7, lr}
 8046c4a:	b08a      	sub	sp, #40	; 0x28
 8046c4c:	af00      	add	r7, sp, #0
 8046c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8046c50:	2300      	movs	r3, #0
 8046c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8046c54:	f7ff fae2 	bl	804621c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8046c58:	4b5b      	ldr	r3, [pc, #364]	; (8046dc8 <pvPortMalloc+0x180>)
 8046c5a:	681b      	ldr	r3, [r3, #0]
 8046c5c:	2b00      	cmp	r3, #0
 8046c5e:	d101      	bne.n	8046c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8046c60:	f000 f920 	bl	8046ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8046c64:	4b59      	ldr	r3, [pc, #356]	; (8046dcc <pvPortMalloc+0x184>)
 8046c66:	681a      	ldr	r2, [r3, #0]
 8046c68:	687b      	ldr	r3, [r7, #4]
 8046c6a:	4013      	ands	r3, r2
 8046c6c:	2b00      	cmp	r3, #0
 8046c6e:	f040 8093 	bne.w	8046d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8046c72:	687b      	ldr	r3, [r7, #4]
 8046c74:	2b00      	cmp	r3, #0
 8046c76:	d01d      	beq.n	8046cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8046c78:	2208      	movs	r2, #8
 8046c7a:	687b      	ldr	r3, [r7, #4]
 8046c7c:	4413      	add	r3, r2
 8046c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8046c80:	687b      	ldr	r3, [r7, #4]
 8046c82:	f003 0307 	and.w	r3, r3, #7
 8046c86:	2b00      	cmp	r3, #0
 8046c88:	d014      	beq.n	8046cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8046c8a:	687b      	ldr	r3, [r7, #4]
 8046c8c:	f023 0307 	bic.w	r3, r3, #7
 8046c90:	3308      	adds	r3, #8
 8046c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8046c94:	687b      	ldr	r3, [r7, #4]
 8046c96:	f003 0307 	and.w	r3, r3, #7
 8046c9a:	2b00      	cmp	r3, #0
 8046c9c:	d00a      	beq.n	8046cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8046c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046ca2:	f383 8811 	msr	BASEPRI, r3
 8046ca6:	f3bf 8f6f 	isb	sy
 8046caa:	f3bf 8f4f 	dsb	sy
 8046cae:	617b      	str	r3, [r7, #20]
}
 8046cb0:	bf00      	nop
 8046cb2:	e7fe      	b.n	8046cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8046cb4:	687b      	ldr	r3, [r7, #4]
 8046cb6:	2b00      	cmp	r3, #0
 8046cb8:	d06e      	beq.n	8046d98 <pvPortMalloc+0x150>
 8046cba:	4b45      	ldr	r3, [pc, #276]	; (8046dd0 <pvPortMalloc+0x188>)
 8046cbc:	681b      	ldr	r3, [r3, #0]
 8046cbe:	687a      	ldr	r2, [r7, #4]
 8046cc0:	429a      	cmp	r2, r3
 8046cc2:	d869      	bhi.n	8046d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8046cc4:	4b43      	ldr	r3, [pc, #268]	; (8046dd4 <pvPortMalloc+0x18c>)
 8046cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8046cc8:	4b42      	ldr	r3, [pc, #264]	; (8046dd4 <pvPortMalloc+0x18c>)
 8046cca:	681b      	ldr	r3, [r3, #0]
 8046ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8046cce:	e004      	b.n	8046cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8046cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8046cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046cd6:	681b      	ldr	r3, [r3, #0]
 8046cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8046cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046cdc:	685b      	ldr	r3, [r3, #4]
 8046cde:	687a      	ldr	r2, [r7, #4]
 8046ce0:	429a      	cmp	r2, r3
 8046ce2:	d903      	bls.n	8046cec <pvPortMalloc+0xa4>
 8046ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046ce6:	681b      	ldr	r3, [r3, #0]
 8046ce8:	2b00      	cmp	r3, #0
 8046cea:	d1f1      	bne.n	8046cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8046cec:	4b36      	ldr	r3, [pc, #216]	; (8046dc8 <pvPortMalloc+0x180>)
 8046cee:	681b      	ldr	r3, [r3, #0]
 8046cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8046cf2:	429a      	cmp	r2, r3
 8046cf4:	d050      	beq.n	8046d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8046cf6:	6a3b      	ldr	r3, [r7, #32]
 8046cf8:	681b      	ldr	r3, [r3, #0]
 8046cfa:	2208      	movs	r2, #8
 8046cfc:	4413      	add	r3, r2
 8046cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8046d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d02:	681a      	ldr	r2, [r3, #0]
 8046d04:	6a3b      	ldr	r3, [r7, #32]
 8046d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8046d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d0a:	685a      	ldr	r2, [r3, #4]
 8046d0c:	687b      	ldr	r3, [r7, #4]
 8046d0e:	1ad2      	subs	r2, r2, r3
 8046d10:	2308      	movs	r3, #8
 8046d12:	005b      	lsls	r3, r3, #1
 8046d14:	429a      	cmp	r2, r3
 8046d16:	d91f      	bls.n	8046d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8046d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8046d1a:	687b      	ldr	r3, [r7, #4]
 8046d1c:	4413      	add	r3, r2
 8046d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8046d20:	69bb      	ldr	r3, [r7, #24]
 8046d22:	f003 0307 	and.w	r3, r3, #7
 8046d26:	2b00      	cmp	r3, #0
 8046d28:	d00a      	beq.n	8046d40 <pvPortMalloc+0xf8>
	__asm volatile
 8046d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046d2e:	f383 8811 	msr	BASEPRI, r3
 8046d32:	f3bf 8f6f 	isb	sy
 8046d36:	f3bf 8f4f 	dsb	sy
 8046d3a:	613b      	str	r3, [r7, #16]
}
 8046d3c:	bf00      	nop
 8046d3e:	e7fe      	b.n	8046d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8046d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d42:	685a      	ldr	r2, [r3, #4]
 8046d44:	687b      	ldr	r3, [r7, #4]
 8046d46:	1ad2      	subs	r2, r2, r3
 8046d48:	69bb      	ldr	r3, [r7, #24]
 8046d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8046d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d4e:	687a      	ldr	r2, [r7, #4]
 8046d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8046d52:	69b8      	ldr	r0, [r7, #24]
 8046d54:	f000 f908 	bl	8046f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8046d58:	4b1d      	ldr	r3, [pc, #116]	; (8046dd0 <pvPortMalloc+0x188>)
 8046d5a:	681a      	ldr	r2, [r3, #0]
 8046d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d5e:	685b      	ldr	r3, [r3, #4]
 8046d60:	1ad3      	subs	r3, r2, r3
 8046d62:	4a1b      	ldr	r2, [pc, #108]	; (8046dd0 <pvPortMalloc+0x188>)
 8046d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8046d66:	4b1a      	ldr	r3, [pc, #104]	; (8046dd0 <pvPortMalloc+0x188>)
 8046d68:	681a      	ldr	r2, [r3, #0]
 8046d6a:	4b1b      	ldr	r3, [pc, #108]	; (8046dd8 <pvPortMalloc+0x190>)
 8046d6c:	681b      	ldr	r3, [r3, #0]
 8046d6e:	429a      	cmp	r2, r3
 8046d70:	d203      	bcs.n	8046d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8046d72:	4b17      	ldr	r3, [pc, #92]	; (8046dd0 <pvPortMalloc+0x188>)
 8046d74:	681b      	ldr	r3, [r3, #0]
 8046d76:	4a18      	ldr	r2, [pc, #96]	; (8046dd8 <pvPortMalloc+0x190>)
 8046d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8046d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d7c:	685a      	ldr	r2, [r3, #4]
 8046d7e:	4b13      	ldr	r3, [pc, #76]	; (8046dcc <pvPortMalloc+0x184>)
 8046d80:	681b      	ldr	r3, [r3, #0]
 8046d82:	431a      	orrs	r2, r3
 8046d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8046d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046d8a:	2200      	movs	r2, #0
 8046d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8046d8e:	4b13      	ldr	r3, [pc, #76]	; (8046ddc <pvPortMalloc+0x194>)
 8046d90:	681b      	ldr	r3, [r3, #0]
 8046d92:	3301      	adds	r3, #1
 8046d94:	4a11      	ldr	r2, [pc, #68]	; (8046ddc <pvPortMalloc+0x194>)
 8046d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8046d98:	f7ff fa4e 	bl	8046238 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8046d9c:	69fb      	ldr	r3, [r7, #28]
 8046d9e:	f003 0307 	and.w	r3, r3, #7
 8046da2:	2b00      	cmp	r3, #0
 8046da4:	d00a      	beq.n	8046dbc <pvPortMalloc+0x174>
	__asm volatile
 8046da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046daa:	f383 8811 	msr	BASEPRI, r3
 8046dae:	f3bf 8f6f 	isb	sy
 8046db2:	f3bf 8f4f 	dsb	sy
 8046db6:	60fb      	str	r3, [r7, #12]
}
 8046db8:	bf00      	nop
 8046dba:	e7fe      	b.n	8046dba <pvPortMalloc+0x172>
	return pvReturn;
 8046dbc:	69fb      	ldr	r3, [r7, #28]
}
 8046dbe:	4618      	mov	r0, r3
 8046dc0:	3728      	adds	r7, #40	; 0x28
 8046dc2:	46bd      	mov	sp, r7
 8046dc4:	bd80      	pop	{r7, pc}
 8046dc6:	bf00      	nop
 8046dc8:	20004374 	.word	0x20004374
 8046dcc:	20004388 	.word	0x20004388
 8046dd0:	20004378 	.word	0x20004378
 8046dd4:	2000436c 	.word	0x2000436c
 8046dd8:	2000437c 	.word	0x2000437c
 8046ddc:	20004380 	.word	0x20004380

08046de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8046de0:	b580      	push	{r7, lr}
 8046de2:	b086      	sub	sp, #24
 8046de4:	af00      	add	r7, sp, #0
 8046de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8046de8:	687b      	ldr	r3, [r7, #4]
 8046dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8046dec:	687b      	ldr	r3, [r7, #4]
 8046dee:	2b00      	cmp	r3, #0
 8046df0:	d04d      	beq.n	8046e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8046df2:	2308      	movs	r3, #8
 8046df4:	425b      	negs	r3, r3
 8046df6:	697a      	ldr	r2, [r7, #20]
 8046df8:	4413      	add	r3, r2
 8046dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8046dfc:	697b      	ldr	r3, [r7, #20]
 8046dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8046e00:	693b      	ldr	r3, [r7, #16]
 8046e02:	685a      	ldr	r2, [r3, #4]
 8046e04:	4b24      	ldr	r3, [pc, #144]	; (8046e98 <vPortFree+0xb8>)
 8046e06:	681b      	ldr	r3, [r3, #0]
 8046e08:	4013      	ands	r3, r2
 8046e0a:	2b00      	cmp	r3, #0
 8046e0c:	d10a      	bne.n	8046e24 <vPortFree+0x44>
	__asm volatile
 8046e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046e12:	f383 8811 	msr	BASEPRI, r3
 8046e16:	f3bf 8f6f 	isb	sy
 8046e1a:	f3bf 8f4f 	dsb	sy
 8046e1e:	60fb      	str	r3, [r7, #12]
}
 8046e20:	bf00      	nop
 8046e22:	e7fe      	b.n	8046e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8046e24:	693b      	ldr	r3, [r7, #16]
 8046e26:	681b      	ldr	r3, [r3, #0]
 8046e28:	2b00      	cmp	r3, #0
 8046e2a:	d00a      	beq.n	8046e42 <vPortFree+0x62>
	__asm volatile
 8046e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8046e30:	f383 8811 	msr	BASEPRI, r3
 8046e34:	f3bf 8f6f 	isb	sy
 8046e38:	f3bf 8f4f 	dsb	sy
 8046e3c:	60bb      	str	r3, [r7, #8]
}
 8046e3e:	bf00      	nop
 8046e40:	e7fe      	b.n	8046e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8046e42:	693b      	ldr	r3, [r7, #16]
 8046e44:	685a      	ldr	r2, [r3, #4]
 8046e46:	4b14      	ldr	r3, [pc, #80]	; (8046e98 <vPortFree+0xb8>)
 8046e48:	681b      	ldr	r3, [r3, #0]
 8046e4a:	4013      	ands	r3, r2
 8046e4c:	2b00      	cmp	r3, #0
 8046e4e:	d01e      	beq.n	8046e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8046e50:	693b      	ldr	r3, [r7, #16]
 8046e52:	681b      	ldr	r3, [r3, #0]
 8046e54:	2b00      	cmp	r3, #0
 8046e56:	d11a      	bne.n	8046e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8046e58:	693b      	ldr	r3, [r7, #16]
 8046e5a:	685a      	ldr	r2, [r3, #4]
 8046e5c:	4b0e      	ldr	r3, [pc, #56]	; (8046e98 <vPortFree+0xb8>)
 8046e5e:	681b      	ldr	r3, [r3, #0]
 8046e60:	43db      	mvns	r3, r3
 8046e62:	401a      	ands	r2, r3
 8046e64:	693b      	ldr	r3, [r7, #16]
 8046e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8046e68:	f7ff f9d8 	bl	804621c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8046e6c:	693b      	ldr	r3, [r7, #16]
 8046e6e:	685a      	ldr	r2, [r3, #4]
 8046e70:	4b0a      	ldr	r3, [pc, #40]	; (8046e9c <vPortFree+0xbc>)
 8046e72:	681b      	ldr	r3, [r3, #0]
 8046e74:	4413      	add	r3, r2
 8046e76:	4a09      	ldr	r2, [pc, #36]	; (8046e9c <vPortFree+0xbc>)
 8046e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8046e7a:	6938      	ldr	r0, [r7, #16]
 8046e7c:	f000 f874 	bl	8046f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8046e80:	4b07      	ldr	r3, [pc, #28]	; (8046ea0 <vPortFree+0xc0>)
 8046e82:	681b      	ldr	r3, [r3, #0]
 8046e84:	3301      	adds	r3, #1
 8046e86:	4a06      	ldr	r2, [pc, #24]	; (8046ea0 <vPortFree+0xc0>)
 8046e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8046e8a:	f7ff f9d5 	bl	8046238 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8046e8e:	bf00      	nop
 8046e90:	3718      	adds	r7, #24
 8046e92:	46bd      	mov	sp, r7
 8046e94:	bd80      	pop	{r7, pc}
 8046e96:	bf00      	nop
 8046e98:	20004388 	.word	0x20004388
 8046e9c:	20004378 	.word	0x20004378
 8046ea0:	20004384 	.word	0x20004384

08046ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8046ea4:	b480      	push	{r7}
 8046ea6:	b085      	sub	sp, #20
 8046ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8046eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8046eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8046eb0:	4b27      	ldr	r3, [pc, #156]	; (8046f50 <prvHeapInit+0xac>)
 8046eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8046eb4:	68fb      	ldr	r3, [r7, #12]
 8046eb6:	f003 0307 	and.w	r3, r3, #7
 8046eba:	2b00      	cmp	r3, #0
 8046ebc:	d00c      	beq.n	8046ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8046ebe:	68fb      	ldr	r3, [r7, #12]
 8046ec0:	3307      	adds	r3, #7
 8046ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8046ec4:	68fb      	ldr	r3, [r7, #12]
 8046ec6:	f023 0307 	bic.w	r3, r3, #7
 8046eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8046ecc:	68ba      	ldr	r2, [r7, #8]
 8046ece:	68fb      	ldr	r3, [r7, #12]
 8046ed0:	1ad3      	subs	r3, r2, r3
 8046ed2:	4a1f      	ldr	r2, [pc, #124]	; (8046f50 <prvHeapInit+0xac>)
 8046ed4:	4413      	add	r3, r2
 8046ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8046ed8:	68fb      	ldr	r3, [r7, #12]
 8046eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8046edc:	4a1d      	ldr	r2, [pc, #116]	; (8046f54 <prvHeapInit+0xb0>)
 8046ede:	687b      	ldr	r3, [r7, #4]
 8046ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8046ee2:	4b1c      	ldr	r3, [pc, #112]	; (8046f54 <prvHeapInit+0xb0>)
 8046ee4:	2200      	movs	r2, #0
 8046ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8046ee8:	687b      	ldr	r3, [r7, #4]
 8046eea:	68ba      	ldr	r2, [r7, #8]
 8046eec:	4413      	add	r3, r2
 8046eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8046ef0:	2208      	movs	r2, #8
 8046ef2:	68fb      	ldr	r3, [r7, #12]
 8046ef4:	1a9b      	subs	r3, r3, r2
 8046ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8046ef8:	68fb      	ldr	r3, [r7, #12]
 8046efa:	f023 0307 	bic.w	r3, r3, #7
 8046efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8046f00:	68fb      	ldr	r3, [r7, #12]
 8046f02:	4a15      	ldr	r2, [pc, #84]	; (8046f58 <prvHeapInit+0xb4>)
 8046f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8046f06:	4b14      	ldr	r3, [pc, #80]	; (8046f58 <prvHeapInit+0xb4>)
 8046f08:	681b      	ldr	r3, [r3, #0]
 8046f0a:	2200      	movs	r2, #0
 8046f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8046f0e:	4b12      	ldr	r3, [pc, #72]	; (8046f58 <prvHeapInit+0xb4>)
 8046f10:	681b      	ldr	r3, [r3, #0]
 8046f12:	2200      	movs	r2, #0
 8046f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8046f16:	687b      	ldr	r3, [r7, #4]
 8046f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8046f1a:	683b      	ldr	r3, [r7, #0]
 8046f1c:	68fa      	ldr	r2, [r7, #12]
 8046f1e:	1ad2      	subs	r2, r2, r3
 8046f20:	683b      	ldr	r3, [r7, #0]
 8046f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8046f24:	4b0c      	ldr	r3, [pc, #48]	; (8046f58 <prvHeapInit+0xb4>)
 8046f26:	681a      	ldr	r2, [r3, #0]
 8046f28:	683b      	ldr	r3, [r7, #0]
 8046f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8046f2c:	683b      	ldr	r3, [r7, #0]
 8046f2e:	685b      	ldr	r3, [r3, #4]
 8046f30:	4a0a      	ldr	r2, [pc, #40]	; (8046f5c <prvHeapInit+0xb8>)
 8046f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8046f34:	683b      	ldr	r3, [r7, #0]
 8046f36:	685b      	ldr	r3, [r3, #4]
 8046f38:	4a09      	ldr	r2, [pc, #36]	; (8046f60 <prvHeapInit+0xbc>)
 8046f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8046f3c:	4b09      	ldr	r3, [pc, #36]	; (8046f64 <prvHeapInit+0xc0>)
 8046f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8046f42:	601a      	str	r2, [r3, #0]
}
 8046f44:	bf00      	nop
 8046f46:	3714      	adds	r7, #20
 8046f48:	46bd      	mov	sp, r7
 8046f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f4e:	4770      	bx	lr
 8046f50:	2000076c 	.word	0x2000076c
 8046f54:	2000436c 	.word	0x2000436c
 8046f58:	20004374 	.word	0x20004374
 8046f5c:	2000437c 	.word	0x2000437c
 8046f60:	20004378 	.word	0x20004378
 8046f64:	20004388 	.word	0x20004388

08046f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8046f68:	b480      	push	{r7}
 8046f6a:	b085      	sub	sp, #20
 8046f6c:	af00      	add	r7, sp, #0
 8046f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8046f70:	4b28      	ldr	r3, [pc, #160]	; (8047014 <prvInsertBlockIntoFreeList+0xac>)
 8046f72:	60fb      	str	r3, [r7, #12]
 8046f74:	e002      	b.n	8046f7c <prvInsertBlockIntoFreeList+0x14>
 8046f76:	68fb      	ldr	r3, [r7, #12]
 8046f78:	681b      	ldr	r3, [r3, #0]
 8046f7a:	60fb      	str	r3, [r7, #12]
 8046f7c:	68fb      	ldr	r3, [r7, #12]
 8046f7e:	681b      	ldr	r3, [r3, #0]
 8046f80:	687a      	ldr	r2, [r7, #4]
 8046f82:	429a      	cmp	r2, r3
 8046f84:	d8f7      	bhi.n	8046f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8046f86:	68fb      	ldr	r3, [r7, #12]
 8046f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8046f8a:	68fb      	ldr	r3, [r7, #12]
 8046f8c:	685b      	ldr	r3, [r3, #4]
 8046f8e:	68ba      	ldr	r2, [r7, #8]
 8046f90:	4413      	add	r3, r2
 8046f92:	687a      	ldr	r2, [r7, #4]
 8046f94:	429a      	cmp	r2, r3
 8046f96:	d108      	bne.n	8046faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8046f98:	68fb      	ldr	r3, [r7, #12]
 8046f9a:	685a      	ldr	r2, [r3, #4]
 8046f9c:	687b      	ldr	r3, [r7, #4]
 8046f9e:	685b      	ldr	r3, [r3, #4]
 8046fa0:	441a      	add	r2, r3
 8046fa2:	68fb      	ldr	r3, [r7, #12]
 8046fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8046fa6:	68fb      	ldr	r3, [r7, #12]
 8046fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8046faa:	687b      	ldr	r3, [r7, #4]
 8046fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8046fae:	687b      	ldr	r3, [r7, #4]
 8046fb0:	685b      	ldr	r3, [r3, #4]
 8046fb2:	68ba      	ldr	r2, [r7, #8]
 8046fb4:	441a      	add	r2, r3
 8046fb6:	68fb      	ldr	r3, [r7, #12]
 8046fb8:	681b      	ldr	r3, [r3, #0]
 8046fba:	429a      	cmp	r2, r3
 8046fbc:	d118      	bne.n	8046ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8046fbe:	68fb      	ldr	r3, [r7, #12]
 8046fc0:	681a      	ldr	r2, [r3, #0]
 8046fc2:	4b15      	ldr	r3, [pc, #84]	; (8047018 <prvInsertBlockIntoFreeList+0xb0>)
 8046fc4:	681b      	ldr	r3, [r3, #0]
 8046fc6:	429a      	cmp	r2, r3
 8046fc8:	d00d      	beq.n	8046fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8046fca:	687b      	ldr	r3, [r7, #4]
 8046fcc:	685a      	ldr	r2, [r3, #4]
 8046fce:	68fb      	ldr	r3, [r7, #12]
 8046fd0:	681b      	ldr	r3, [r3, #0]
 8046fd2:	685b      	ldr	r3, [r3, #4]
 8046fd4:	441a      	add	r2, r3
 8046fd6:	687b      	ldr	r3, [r7, #4]
 8046fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8046fda:	68fb      	ldr	r3, [r7, #12]
 8046fdc:	681b      	ldr	r3, [r3, #0]
 8046fde:	681a      	ldr	r2, [r3, #0]
 8046fe0:	687b      	ldr	r3, [r7, #4]
 8046fe2:	601a      	str	r2, [r3, #0]
 8046fe4:	e008      	b.n	8046ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8046fe6:	4b0c      	ldr	r3, [pc, #48]	; (8047018 <prvInsertBlockIntoFreeList+0xb0>)
 8046fe8:	681a      	ldr	r2, [r3, #0]
 8046fea:	687b      	ldr	r3, [r7, #4]
 8046fec:	601a      	str	r2, [r3, #0]
 8046fee:	e003      	b.n	8046ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8046ff0:	68fb      	ldr	r3, [r7, #12]
 8046ff2:	681a      	ldr	r2, [r3, #0]
 8046ff4:	687b      	ldr	r3, [r7, #4]
 8046ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8046ff8:	68fa      	ldr	r2, [r7, #12]
 8046ffa:	687b      	ldr	r3, [r7, #4]
 8046ffc:	429a      	cmp	r2, r3
 8046ffe:	d002      	beq.n	8047006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8047000:	68fb      	ldr	r3, [r7, #12]
 8047002:	687a      	ldr	r2, [r7, #4]
 8047004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8047006:	bf00      	nop
 8047008:	3714      	adds	r7, #20
 804700a:	46bd      	mov	sp, r7
 804700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047010:	4770      	bx	lr
 8047012:	bf00      	nop
 8047014:	2000436c 	.word	0x2000436c
 8047018:	20004374 	.word	0x20004374

0804701c <__errno>:
 804701c:	4b01      	ldr	r3, [pc, #4]	; (8047024 <__errno+0x8>)
 804701e:	6818      	ldr	r0, [r3, #0]
 8047020:	4770      	bx	lr
 8047022:	bf00      	nop
 8047024:	20000010 	.word	0x20000010

08047028 <std>:
 8047028:	2300      	movs	r3, #0
 804702a:	b510      	push	{r4, lr}
 804702c:	4604      	mov	r4, r0
 804702e:	e9c0 3300 	strd	r3, r3, [r0]
 8047032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8047036:	6083      	str	r3, [r0, #8]
 8047038:	8181      	strh	r1, [r0, #12]
 804703a:	6643      	str	r3, [r0, #100]	; 0x64
 804703c:	81c2      	strh	r2, [r0, #14]
 804703e:	6183      	str	r3, [r0, #24]
 8047040:	4619      	mov	r1, r3
 8047042:	2208      	movs	r2, #8
 8047044:	305c      	adds	r0, #92	; 0x5c
 8047046:	f000 f91a 	bl	804727e <memset>
 804704a:	4b05      	ldr	r3, [pc, #20]	; (8047060 <std+0x38>)
 804704c:	6263      	str	r3, [r4, #36]	; 0x24
 804704e:	4b05      	ldr	r3, [pc, #20]	; (8047064 <std+0x3c>)
 8047050:	62a3      	str	r3, [r4, #40]	; 0x28
 8047052:	4b05      	ldr	r3, [pc, #20]	; (8047068 <std+0x40>)
 8047054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8047056:	4b05      	ldr	r3, [pc, #20]	; (804706c <std+0x44>)
 8047058:	6224      	str	r4, [r4, #32]
 804705a:	6323      	str	r3, [r4, #48]	; 0x30
 804705c:	bd10      	pop	{r4, pc}
 804705e:	bf00      	nop
 8047060:	08047edd 	.word	0x08047edd
 8047064:	08047eff 	.word	0x08047eff
 8047068:	08047f37 	.word	0x08047f37
 804706c:	08047f5b 	.word	0x08047f5b

08047070 <_cleanup_r>:
 8047070:	4901      	ldr	r1, [pc, #4]	; (8047078 <_cleanup_r+0x8>)
 8047072:	f000 b8af 	b.w	80471d4 <_fwalk_reent>
 8047076:	bf00      	nop
 8047078:	08048f29 	.word	0x08048f29

0804707c <__sfmoreglue>:
 804707c:	b570      	push	{r4, r5, r6, lr}
 804707e:	2268      	movs	r2, #104	; 0x68
 8047080:	1e4d      	subs	r5, r1, #1
 8047082:	4355      	muls	r5, r2
 8047084:	460e      	mov	r6, r1
 8047086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804708a:	f000 f921 	bl	80472d0 <_malloc_r>
 804708e:	4604      	mov	r4, r0
 8047090:	b140      	cbz	r0, 80470a4 <__sfmoreglue+0x28>
 8047092:	2100      	movs	r1, #0
 8047094:	e9c0 1600 	strd	r1, r6, [r0]
 8047098:	300c      	adds	r0, #12
 804709a:	60a0      	str	r0, [r4, #8]
 804709c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80470a0:	f000 f8ed 	bl	804727e <memset>
 80470a4:	4620      	mov	r0, r4
 80470a6:	bd70      	pop	{r4, r5, r6, pc}

080470a8 <__sfp_lock_acquire>:
 80470a8:	4801      	ldr	r0, [pc, #4]	; (80470b0 <__sfp_lock_acquire+0x8>)
 80470aa:	f000 b8d8 	b.w	804725e <__retarget_lock_acquire_recursive>
 80470ae:	bf00      	nop
 80470b0:	2000438d 	.word	0x2000438d

080470b4 <__sfp_lock_release>:
 80470b4:	4801      	ldr	r0, [pc, #4]	; (80470bc <__sfp_lock_release+0x8>)
 80470b6:	f000 b8d3 	b.w	8047260 <__retarget_lock_release_recursive>
 80470ba:	bf00      	nop
 80470bc:	2000438d 	.word	0x2000438d

080470c0 <__sinit_lock_acquire>:
 80470c0:	4801      	ldr	r0, [pc, #4]	; (80470c8 <__sinit_lock_acquire+0x8>)
 80470c2:	f000 b8cc 	b.w	804725e <__retarget_lock_acquire_recursive>
 80470c6:	bf00      	nop
 80470c8:	2000438e 	.word	0x2000438e

080470cc <__sinit_lock_release>:
 80470cc:	4801      	ldr	r0, [pc, #4]	; (80470d4 <__sinit_lock_release+0x8>)
 80470ce:	f000 b8c7 	b.w	8047260 <__retarget_lock_release_recursive>
 80470d2:	bf00      	nop
 80470d4:	2000438e 	.word	0x2000438e

080470d8 <__sinit>:
 80470d8:	b510      	push	{r4, lr}
 80470da:	4604      	mov	r4, r0
 80470dc:	f7ff fff0 	bl	80470c0 <__sinit_lock_acquire>
 80470e0:	69a3      	ldr	r3, [r4, #24]
 80470e2:	b11b      	cbz	r3, 80470ec <__sinit+0x14>
 80470e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80470e8:	f7ff bff0 	b.w	80470cc <__sinit_lock_release>
 80470ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80470f0:	6523      	str	r3, [r4, #80]	; 0x50
 80470f2:	4b13      	ldr	r3, [pc, #76]	; (8047140 <__sinit+0x68>)
 80470f4:	4a13      	ldr	r2, [pc, #76]	; (8047144 <__sinit+0x6c>)
 80470f6:	681b      	ldr	r3, [r3, #0]
 80470f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80470fa:	42a3      	cmp	r3, r4
 80470fc:	bf04      	itt	eq
 80470fe:	2301      	moveq	r3, #1
 8047100:	61a3      	streq	r3, [r4, #24]
 8047102:	4620      	mov	r0, r4
 8047104:	f000 f820 	bl	8047148 <__sfp>
 8047108:	6060      	str	r0, [r4, #4]
 804710a:	4620      	mov	r0, r4
 804710c:	f000 f81c 	bl	8047148 <__sfp>
 8047110:	60a0      	str	r0, [r4, #8]
 8047112:	4620      	mov	r0, r4
 8047114:	f000 f818 	bl	8047148 <__sfp>
 8047118:	2200      	movs	r2, #0
 804711a:	60e0      	str	r0, [r4, #12]
 804711c:	2104      	movs	r1, #4
 804711e:	6860      	ldr	r0, [r4, #4]
 8047120:	f7ff ff82 	bl	8047028 <std>
 8047124:	68a0      	ldr	r0, [r4, #8]
 8047126:	2201      	movs	r2, #1
 8047128:	2109      	movs	r1, #9
 804712a:	f7ff ff7d 	bl	8047028 <std>
 804712e:	68e0      	ldr	r0, [r4, #12]
 8047130:	2202      	movs	r2, #2
 8047132:	2112      	movs	r1, #18
 8047134:	f7ff ff78 	bl	8047028 <std>
 8047138:	2301      	movs	r3, #1
 804713a:	61a3      	str	r3, [r4, #24]
 804713c:	e7d2      	b.n	80470e4 <__sinit+0xc>
 804713e:	bf00      	nop
 8047140:	0804a1b4 	.word	0x0804a1b4
 8047144:	08047071 	.word	0x08047071

08047148 <__sfp>:
 8047148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804714a:	4607      	mov	r7, r0
 804714c:	f7ff ffac 	bl	80470a8 <__sfp_lock_acquire>
 8047150:	4b1e      	ldr	r3, [pc, #120]	; (80471cc <__sfp+0x84>)
 8047152:	681e      	ldr	r6, [r3, #0]
 8047154:	69b3      	ldr	r3, [r6, #24]
 8047156:	b913      	cbnz	r3, 804715e <__sfp+0x16>
 8047158:	4630      	mov	r0, r6
 804715a:	f7ff ffbd 	bl	80470d8 <__sinit>
 804715e:	3648      	adds	r6, #72	; 0x48
 8047160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8047164:	3b01      	subs	r3, #1
 8047166:	d503      	bpl.n	8047170 <__sfp+0x28>
 8047168:	6833      	ldr	r3, [r6, #0]
 804716a:	b30b      	cbz	r3, 80471b0 <__sfp+0x68>
 804716c:	6836      	ldr	r6, [r6, #0]
 804716e:	e7f7      	b.n	8047160 <__sfp+0x18>
 8047170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8047174:	b9d5      	cbnz	r5, 80471ac <__sfp+0x64>
 8047176:	4b16      	ldr	r3, [pc, #88]	; (80471d0 <__sfp+0x88>)
 8047178:	60e3      	str	r3, [r4, #12]
 804717a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804717e:	6665      	str	r5, [r4, #100]	; 0x64
 8047180:	f000 f86c 	bl	804725c <__retarget_lock_init_recursive>
 8047184:	f7ff ff96 	bl	80470b4 <__sfp_lock_release>
 8047188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804718c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8047190:	6025      	str	r5, [r4, #0]
 8047192:	61a5      	str	r5, [r4, #24]
 8047194:	2208      	movs	r2, #8
 8047196:	4629      	mov	r1, r5
 8047198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804719c:	f000 f86f 	bl	804727e <memset>
 80471a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80471a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80471a8:	4620      	mov	r0, r4
 80471aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80471ac:	3468      	adds	r4, #104	; 0x68
 80471ae:	e7d9      	b.n	8047164 <__sfp+0x1c>
 80471b0:	2104      	movs	r1, #4
 80471b2:	4638      	mov	r0, r7
 80471b4:	f7ff ff62 	bl	804707c <__sfmoreglue>
 80471b8:	4604      	mov	r4, r0
 80471ba:	6030      	str	r0, [r6, #0]
 80471bc:	2800      	cmp	r0, #0
 80471be:	d1d5      	bne.n	804716c <__sfp+0x24>
 80471c0:	f7ff ff78 	bl	80470b4 <__sfp_lock_release>
 80471c4:	230c      	movs	r3, #12
 80471c6:	603b      	str	r3, [r7, #0]
 80471c8:	e7ee      	b.n	80471a8 <__sfp+0x60>
 80471ca:	bf00      	nop
 80471cc:	0804a1b4 	.word	0x0804a1b4
 80471d0:	ffff0001 	.word	0xffff0001

080471d4 <_fwalk_reent>:
 80471d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80471d8:	4606      	mov	r6, r0
 80471da:	4688      	mov	r8, r1
 80471dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80471e0:	2700      	movs	r7, #0
 80471e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80471e6:	f1b9 0901 	subs.w	r9, r9, #1
 80471ea:	d505      	bpl.n	80471f8 <_fwalk_reent+0x24>
 80471ec:	6824      	ldr	r4, [r4, #0]
 80471ee:	2c00      	cmp	r4, #0
 80471f0:	d1f7      	bne.n	80471e2 <_fwalk_reent+0xe>
 80471f2:	4638      	mov	r0, r7
 80471f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80471f8:	89ab      	ldrh	r3, [r5, #12]
 80471fa:	2b01      	cmp	r3, #1
 80471fc:	d907      	bls.n	804720e <_fwalk_reent+0x3a>
 80471fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8047202:	3301      	adds	r3, #1
 8047204:	d003      	beq.n	804720e <_fwalk_reent+0x3a>
 8047206:	4629      	mov	r1, r5
 8047208:	4630      	mov	r0, r6
 804720a:	47c0      	blx	r8
 804720c:	4307      	orrs	r7, r0
 804720e:	3568      	adds	r5, #104	; 0x68
 8047210:	e7e9      	b.n	80471e6 <_fwalk_reent+0x12>
	...

08047214 <__libc_init_array>:
 8047214:	b570      	push	{r4, r5, r6, lr}
 8047216:	4d0d      	ldr	r5, [pc, #52]	; (804724c <__libc_init_array+0x38>)
 8047218:	4c0d      	ldr	r4, [pc, #52]	; (8047250 <__libc_init_array+0x3c>)
 804721a:	1b64      	subs	r4, r4, r5
 804721c:	10a4      	asrs	r4, r4, #2
 804721e:	2600      	movs	r6, #0
 8047220:	42a6      	cmp	r6, r4
 8047222:	d109      	bne.n	8047238 <__libc_init_array+0x24>
 8047224:	4d0b      	ldr	r5, [pc, #44]	; (8047254 <__libc_init_array+0x40>)
 8047226:	4c0c      	ldr	r4, [pc, #48]	; (8047258 <__libc_init_array+0x44>)
 8047228:	f002 ff06 	bl	804a038 <_init>
 804722c:	1b64      	subs	r4, r4, r5
 804722e:	10a4      	asrs	r4, r4, #2
 8047230:	2600      	movs	r6, #0
 8047232:	42a6      	cmp	r6, r4
 8047234:	d105      	bne.n	8047242 <__libc_init_array+0x2e>
 8047236:	bd70      	pop	{r4, r5, r6, pc}
 8047238:	f855 3b04 	ldr.w	r3, [r5], #4
 804723c:	4798      	blx	r3
 804723e:	3601      	adds	r6, #1
 8047240:	e7ee      	b.n	8047220 <__libc_init_array+0xc>
 8047242:	f855 3b04 	ldr.w	r3, [r5], #4
 8047246:	4798      	blx	r3
 8047248:	3601      	adds	r6, #1
 804724a:	e7f2      	b.n	8047232 <__libc_init_array+0x1e>
 804724c:	0804a534 	.word	0x0804a534
 8047250:	0804a534 	.word	0x0804a534
 8047254:	0804a534 	.word	0x0804a534
 8047258:	0804a538 	.word	0x0804a538

0804725c <__retarget_lock_init_recursive>:
 804725c:	4770      	bx	lr

0804725e <__retarget_lock_acquire_recursive>:
 804725e:	4770      	bx	lr

08047260 <__retarget_lock_release_recursive>:
 8047260:	4770      	bx	lr

08047262 <memcpy>:
 8047262:	440a      	add	r2, r1
 8047264:	4291      	cmp	r1, r2
 8047266:	f100 33ff 	add.w	r3, r0, #4294967295
 804726a:	d100      	bne.n	804726e <memcpy+0xc>
 804726c:	4770      	bx	lr
 804726e:	b510      	push	{r4, lr}
 8047270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8047274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8047278:	4291      	cmp	r1, r2
 804727a:	d1f9      	bne.n	8047270 <memcpy+0xe>
 804727c:	bd10      	pop	{r4, pc}

0804727e <memset>:
 804727e:	4402      	add	r2, r0
 8047280:	4603      	mov	r3, r0
 8047282:	4293      	cmp	r3, r2
 8047284:	d100      	bne.n	8047288 <memset+0xa>
 8047286:	4770      	bx	lr
 8047288:	f803 1b01 	strb.w	r1, [r3], #1
 804728c:	e7f9      	b.n	8047282 <memset+0x4>
	...

08047290 <sbrk_aligned>:
 8047290:	b570      	push	{r4, r5, r6, lr}
 8047292:	4e0e      	ldr	r6, [pc, #56]	; (80472cc <sbrk_aligned+0x3c>)
 8047294:	460c      	mov	r4, r1
 8047296:	6831      	ldr	r1, [r6, #0]
 8047298:	4605      	mov	r5, r0
 804729a:	b911      	cbnz	r1, 80472a2 <sbrk_aligned+0x12>
 804729c:	f000 fdee 	bl	8047e7c <_sbrk_r>
 80472a0:	6030      	str	r0, [r6, #0]
 80472a2:	4621      	mov	r1, r4
 80472a4:	4628      	mov	r0, r5
 80472a6:	f000 fde9 	bl	8047e7c <_sbrk_r>
 80472aa:	1c43      	adds	r3, r0, #1
 80472ac:	d00a      	beq.n	80472c4 <sbrk_aligned+0x34>
 80472ae:	1cc4      	adds	r4, r0, #3
 80472b0:	f024 0403 	bic.w	r4, r4, #3
 80472b4:	42a0      	cmp	r0, r4
 80472b6:	d007      	beq.n	80472c8 <sbrk_aligned+0x38>
 80472b8:	1a21      	subs	r1, r4, r0
 80472ba:	4628      	mov	r0, r5
 80472bc:	f000 fdde 	bl	8047e7c <_sbrk_r>
 80472c0:	3001      	adds	r0, #1
 80472c2:	d101      	bne.n	80472c8 <sbrk_aligned+0x38>
 80472c4:	f04f 34ff 	mov.w	r4, #4294967295
 80472c8:	4620      	mov	r0, r4
 80472ca:	bd70      	pop	{r4, r5, r6, pc}
 80472cc:	20004394 	.word	0x20004394

080472d0 <_malloc_r>:
 80472d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80472d4:	1ccd      	adds	r5, r1, #3
 80472d6:	f025 0503 	bic.w	r5, r5, #3
 80472da:	3508      	adds	r5, #8
 80472dc:	2d0c      	cmp	r5, #12
 80472de:	bf38      	it	cc
 80472e0:	250c      	movcc	r5, #12
 80472e2:	2d00      	cmp	r5, #0
 80472e4:	4607      	mov	r7, r0
 80472e6:	db01      	blt.n	80472ec <_malloc_r+0x1c>
 80472e8:	42a9      	cmp	r1, r5
 80472ea:	d905      	bls.n	80472f8 <_malloc_r+0x28>
 80472ec:	230c      	movs	r3, #12
 80472ee:	603b      	str	r3, [r7, #0]
 80472f0:	2600      	movs	r6, #0
 80472f2:	4630      	mov	r0, r6
 80472f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80472f8:	4e2e      	ldr	r6, [pc, #184]	; (80473b4 <_malloc_r+0xe4>)
 80472fa:	f001 fed5 	bl	80490a8 <__malloc_lock>
 80472fe:	6833      	ldr	r3, [r6, #0]
 8047300:	461c      	mov	r4, r3
 8047302:	bb34      	cbnz	r4, 8047352 <_malloc_r+0x82>
 8047304:	4629      	mov	r1, r5
 8047306:	4638      	mov	r0, r7
 8047308:	f7ff ffc2 	bl	8047290 <sbrk_aligned>
 804730c:	1c43      	adds	r3, r0, #1
 804730e:	4604      	mov	r4, r0
 8047310:	d14d      	bne.n	80473ae <_malloc_r+0xde>
 8047312:	6834      	ldr	r4, [r6, #0]
 8047314:	4626      	mov	r6, r4
 8047316:	2e00      	cmp	r6, #0
 8047318:	d140      	bne.n	804739c <_malloc_r+0xcc>
 804731a:	6823      	ldr	r3, [r4, #0]
 804731c:	4631      	mov	r1, r6
 804731e:	4638      	mov	r0, r7
 8047320:	eb04 0803 	add.w	r8, r4, r3
 8047324:	f000 fdaa 	bl	8047e7c <_sbrk_r>
 8047328:	4580      	cmp	r8, r0
 804732a:	d13a      	bne.n	80473a2 <_malloc_r+0xd2>
 804732c:	6821      	ldr	r1, [r4, #0]
 804732e:	3503      	adds	r5, #3
 8047330:	1a6d      	subs	r5, r5, r1
 8047332:	f025 0503 	bic.w	r5, r5, #3
 8047336:	3508      	adds	r5, #8
 8047338:	2d0c      	cmp	r5, #12
 804733a:	bf38      	it	cc
 804733c:	250c      	movcc	r5, #12
 804733e:	4629      	mov	r1, r5
 8047340:	4638      	mov	r0, r7
 8047342:	f7ff ffa5 	bl	8047290 <sbrk_aligned>
 8047346:	3001      	adds	r0, #1
 8047348:	d02b      	beq.n	80473a2 <_malloc_r+0xd2>
 804734a:	6823      	ldr	r3, [r4, #0]
 804734c:	442b      	add	r3, r5
 804734e:	6023      	str	r3, [r4, #0]
 8047350:	e00e      	b.n	8047370 <_malloc_r+0xa0>
 8047352:	6822      	ldr	r2, [r4, #0]
 8047354:	1b52      	subs	r2, r2, r5
 8047356:	d41e      	bmi.n	8047396 <_malloc_r+0xc6>
 8047358:	2a0b      	cmp	r2, #11
 804735a:	d916      	bls.n	804738a <_malloc_r+0xba>
 804735c:	1961      	adds	r1, r4, r5
 804735e:	42a3      	cmp	r3, r4
 8047360:	6025      	str	r5, [r4, #0]
 8047362:	bf18      	it	ne
 8047364:	6059      	strne	r1, [r3, #4]
 8047366:	6863      	ldr	r3, [r4, #4]
 8047368:	bf08      	it	eq
 804736a:	6031      	streq	r1, [r6, #0]
 804736c:	5162      	str	r2, [r4, r5]
 804736e:	604b      	str	r3, [r1, #4]
 8047370:	4638      	mov	r0, r7
 8047372:	f104 060b 	add.w	r6, r4, #11
 8047376:	f001 fe9d 	bl	80490b4 <__malloc_unlock>
 804737a:	f026 0607 	bic.w	r6, r6, #7
 804737e:	1d23      	adds	r3, r4, #4
 8047380:	1af2      	subs	r2, r6, r3
 8047382:	d0b6      	beq.n	80472f2 <_malloc_r+0x22>
 8047384:	1b9b      	subs	r3, r3, r6
 8047386:	50a3      	str	r3, [r4, r2]
 8047388:	e7b3      	b.n	80472f2 <_malloc_r+0x22>
 804738a:	6862      	ldr	r2, [r4, #4]
 804738c:	42a3      	cmp	r3, r4
 804738e:	bf0c      	ite	eq
 8047390:	6032      	streq	r2, [r6, #0]
 8047392:	605a      	strne	r2, [r3, #4]
 8047394:	e7ec      	b.n	8047370 <_malloc_r+0xa0>
 8047396:	4623      	mov	r3, r4
 8047398:	6864      	ldr	r4, [r4, #4]
 804739a:	e7b2      	b.n	8047302 <_malloc_r+0x32>
 804739c:	4634      	mov	r4, r6
 804739e:	6876      	ldr	r6, [r6, #4]
 80473a0:	e7b9      	b.n	8047316 <_malloc_r+0x46>
 80473a2:	230c      	movs	r3, #12
 80473a4:	603b      	str	r3, [r7, #0]
 80473a6:	4638      	mov	r0, r7
 80473a8:	f001 fe84 	bl	80490b4 <__malloc_unlock>
 80473ac:	e7a1      	b.n	80472f2 <_malloc_r+0x22>
 80473ae:	6025      	str	r5, [r4, #0]
 80473b0:	e7de      	b.n	8047370 <_malloc_r+0xa0>
 80473b2:	bf00      	nop
 80473b4:	20004390 	.word	0x20004390

080473b8 <__cvt>:
 80473b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80473bc:	ec55 4b10 	vmov	r4, r5, d0
 80473c0:	2d00      	cmp	r5, #0
 80473c2:	460e      	mov	r6, r1
 80473c4:	4619      	mov	r1, r3
 80473c6:	462b      	mov	r3, r5
 80473c8:	bfbb      	ittet	lt
 80473ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80473ce:	461d      	movlt	r5, r3
 80473d0:	2300      	movge	r3, #0
 80473d2:	232d      	movlt	r3, #45	; 0x2d
 80473d4:	700b      	strb	r3, [r1, #0]
 80473d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80473d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80473dc:	4691      	mov	r9, r2
 80473de:	f023 0820 	bic.w	r8, r3, #32
 80473e2:	bfbc      	itt	lt
 80473e4:	4622      	movlt	r2, r4
 80473e6:	4614      	movlt	r4, r2
 80473e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80473ec:	d005      	beq.n	80473fa <__cvt+0x42>
 80473ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80473f2:	d100      	bne.n	80473f6 <__cvt+0x3e>
 80473f4:	3601      	adds	r6, #1
 80473f6:	2102      	movs	r1, #2
 80473f8:	e000      	b.n	80473fc <__cvt+0x44>
 80473fa:	2103      	movs	r1, #3
 80473fc:	ab03      	add	r3, sp, #12
 80473fe:	9301      	str	r3, [sp, #4]
 8047400:	ab02      	add	r3, sp, #8
 8047402:	9300      	str	r3, [sp, #0]
 8047404:	ec45 4b10 	vmov	d0, r4, r5
 8047408:	4653      	mov	r3, sl
 804740a:	4632      	mov	r2, r6
 804740c:	f000 ff18 	bl	8048240 <_dtoa_r>
 8047410:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8047414:	4607      	mov	r7, r0
 8047416:	d102      	bne.n	804741e <__cvt+0x66>
 8047418:	f019 0f01 	tst.w	r9, #1
 804741c:	d022      	beq.n	8047464 <__cvt+0xac>
 804741e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8047422:	eb07 0906 	add.w	r9, r7, r6
 8047426:	d110      	bne.n	804744a <__cvt+0x92>
 8047428:	783b      	ldrb	r3, [r7, #0]
 804742a:	2b30      	cmp	r3, #48	; 0x30
 804742c:	d10a      	bne.n	8047444 <__cvt+0x8c>
 804742e:	2200      	movs	r2, #0
 8047430:	2300      	movs	r3, #0
 8047432:	4620      	mov	r0, r4
 8047434:	4629      	mov	r1, r5
 8047436:	f7f9 fb4f 	bl	8040ad8 <__aeabi_dcmpeq>
 804743a:	b918      	cbnz	r0, 8047444 <__cvt+0x8c>
 804743c:	f1c6 0601 	rsb	r6, r6, #1
 8047440:	f8ca 6000 	str.w	r6, [sl]
 8047444:	f8da 3000 	ldr.w	r3, [sl]
 8047448:	4499      	add	r9, r3
 804744a:	2200      	movs	r2, #0
 804744c:	2300      	movs	r3, #0
 804744e:	4620      	mov	r0, r4
 8047450:	4629      	mov	r1, r5
 8047452:	f7f9 fb41 	bl	8040ad8 <__aeabi_dcmpeq>
 8047456:	b108      	cbz	r0, 804745c <__cvt+0xa4>
 8047458:	f8cd 900c 	str.w	r9, [sp, #12]
 804745c:	2230      	movs	r2, #48	; 0x30
 804745e:	9b03      	ldr	r3, [sp, #12]
 8047460:	454b      	cmp	r3, r9
 8047462:	d307      	bcc.n	8047474 <__cvt+0xbc>
 8047464:	9b03      	ldr	r3, [sp, #12]
 8047466:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8047468:	1bdb      	subs	r3, r3, r7
 804746a:	4638      	mov	r0, r7
 804746c:	6013      	str	r3, [r2, #0]
 804746e:	b004      	add	sp, #16
 8047470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8047474:	1c59      	adds	r1, r3, #1
 8047476:	9103      	str	r1, [sp, #12]
 8047478:	701a      	strb	r2, [r3, #0]
 804747a:	e7f0      	b.n	804745e <__cvt+0xa6>

0804747c <__exponent>:
 804747c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804747e:	4603      	mov	r3, r0
 8047480:	2900      	cmp	r1, #0
 8047482:	bfb8      	it	lt
 8047484:	4249      	neglt	r1, r1
 8047486:	f803 2b02 	strb.w	r2, [r3], #2
 804748a:	bfb4      	ite	lt
 804748c:	222d      	movlt	r2, #45	; 0x2d
 804748e:	222b      	movge	r2, #43	; 0x2b
 8047490:	2909      	cmp	r1, #9
 8047492:	7042      	strb	r2, [r0, #1]
 8047494:	dd2a      	ble.n	80474ec <__exponent+0x70>
 8047496:	f10d 0407 	add.w	r4, sp, #7
 804749a:	46a4      	mov	ip, r4
 804749c:	270a      	movs	r7, #10
 804749e:	46a6      	mov	lr, r4
 80474a0:	460a      	mov	r2, r1
 80474a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80474a6:	fb07 1516 	mls	r5, r7, r6, r1
 80474aa:	3530      	adds	r5, #48	; 0x30
 80474ac:	2a63      	cmp	r2, #99	; 0x63
 80474ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80474b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80474b6:	4631      	mov	r1, r6
 80474b8:	dcf1      	bgt.n	804749e <__exponent+0x22>
 80474ba:	3130      	adds	r1, #48	; 0x30
 80474bc:	f1ae 0502 	sub.w	r5, lr, #2
 80474c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80474c4:	1c44      	adds	r4, r0, #1
 80474c6:	4629      	mov	r1, r5
 80474c8:	4561      	cmp	r1, ip
 80474ca:	d30a      	bcc.n	80474e2 <__exponent+0x66>
 80474cc:	f10d 0209 	add.w	r2, sp, #9
 80474d0:	eba2 020e 	sub.w	r2, r2, lr
 80474d4:	4565      	cmp	r5, ip
 80474d6:	bf88      	it	hi
 80474d8:	2200      	movhi	r2, #0
 80474da:	4413      	add	r3, r2
 80474dc:	1a18      	subs	r0, r3, r0
 80474de:	b003      	add	sp, #12
 80474e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80474e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80474e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80474ea:	e7ed      	b.n	80474c8 <__exponent+0x4c>
 80474ec:	2330      	movs	r3, #48	; 0x30
 80474ee:	3130      	adds	r1, #48	; 0x30
 80474f0:	7083      	strb	r3, [r0, #2]
 80474f2:	70c1      	strb	r1, [r0, #3]
 80474f4:	1d03      	adds	r3, r0, #4
 80474f6:	e7f1      	b.n	80474dc <__exponent+0x60>

080474f8 <_printf_float>:
 80474f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80474fc:	ed2d 8b02 	vpush	{d8}
 8047500:	b08d      	sub	sp, #52	; 0x34
 8047502:	460c      	mov	r4, r1
 8047504:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8047508:	4616      	mov	r6, r2
 804750a:	461f      	mov	r7, r3
 804750c:	4605      	mov	r5, r0
 804750e:	f001 fd47 	bl	8048fa0 <_localeconv_r>
 8047512:	f8d0 a000 	ldr.w	sl, [r0]
 8047516:	4650      	mov	r0, sl
 8047518:	f7f8 fe62 	bl	80401e0 <strlen>
 804751c:	2300      	movs	r3, #0
 804751e:	930a      	str	r3, [sp, #40]	; 0x28
 8047520:	6823      	ldr	r3, [r4, #0]
 8047522:	9305      	str	r3, [sp, #20]
 8047524:	f8d8 3000 	ldr.w	r3, [r8]
 8047528:	f894 b018 	ldrb.w	fp, [r4, #24]
 804752c:	3307      	adds	r3, #7
 804752e:	f023 0307 	bic.w	r3, r3, #7
 8047532:	f103 0208 	add.w	r2, r3, #8
 8047536:	f8c8 2000 	str.w	r2, [r8]
 804753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804753e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8047542:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8047546:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 804754a:	9307      	str	r3, [sp, #28]
 804754c:	f8cd 8018 	str.w	r8, [sp, #24]
 8047550:	ee08 0a10 	vmov	s16, r0
 8047554:	4b9f      	ldr	r3, [pc, #636]	; (80477d4 <_printf_float+0x2dc>)
 8047556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804755a:	f04f 32ff 	mov.w	r2, #4294967295
 804755e:	f7f9 faed 	bl	8040b3c <__aeabi_dcmpun>
 8047562:	bb88      	cbnz	r0, 80475c8 <_printf_float+0xd0>
 8047564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8047568:	4b9a      	ldr	r3, [pc, #616]	; (80477d4 <_printf_float+0x2dc>)
 804756a:	f04f 32ff 	mov.w	r2, #4294967295
 804756e:	f7f9 fac7 	bl	8040b00 <__aeabi_dcmple>
 8047572:	bb48      	cbnz	r0, 80475c8 <_printf_float+0xd0>
 8047574:	2200      	movs	r2, #0
 8047576:	2300      	movs	r3, #0
 8047578:	4640      	mov	r0, r8
 804757a:	4649      	mov	r1, r9
 804757c:	f7f9 fab6 	bl	8040aec <__aeabi_dcmplt>
 8047580:	b110      	cbz	r0, 8047588 <_printf_float+0x90>
 8047582:	232d      	movs	r3, #45	; 0x2d
 8047584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8047588:	4b93      	ldr	r3, [pc, #588]	; (80477d8 <_printf_float+0x2e0>)
 804758a:	4894      	ldr	r0, [pc, #592]	; (80477dc <_printf_float+0x2e4>)
 804758c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8047590:	bf94      	ite	ls
 8047592:	4698      	movls	r8, r3
 8047594:	4680      	movhi	r8, r0
 8047596:	2303      	movs	r3, #3
 8047598:	6123      	str	r3, [r4, #16]
 804759a:	9b05      	ldr	r3, [sp, #20]
 804759c:	f023 0204 	bic.w	r2, r3, #4
 80475a0:	6022      	str	r2, [r4, #0]
 80475a2:	f04f 0900 	mov.w	r9, #0
 80475a6:	9700      	str	r7, [sp, #0]
 80475a8:	4633      	mov	r3, r6
 80475aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80475ac:	4621      	mov	r1, r4
 80475ae:	4628      	mov	r0, r5
 80475b0:	f000 f9d8 	bl	8047964 <_printf_common>
 80475b4:	3001      	adds	r0, #1
 80475b6:	f040 8090 	bne.w	80476da <_printf_float+0x1e2>
 80475ba:	f04f 30ff 	mov.w	r0, #4294967295
 80475be:	b00d      	add	sp, #52	; 0x34
 80475c0:	ecbd 8b02 	vpop	{d8}
 80475c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80475c8:	4642      	mov	r2, r8
 80475ca:	464b      	mov	r3, r9
 80475cc:	4640      	mov	r0, r8
 80475ce:	4649      	mov	r1, r9
 80475d0:	f7f9 fab4 	bl	8040b3c <__aeabi_dcmpun>
 80475d4:	b140      	cbz	r0, 80475e8 <_printf_float+0xf0>
 80475d6:	464b      	mov	r3, r9
 80475d8:	2b00      	cmp	r3, #0
 80475da:	bfbc      	itt	lt
 80475dc:	232d      	movlt	r3, #45	; 0x2d
 80475de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80475e2:	487f      	ldr	r0, [pc, #508]	; (80477e0 <_printf_float+0x2e8>)
 80475e4:	4b7f      	ldr	r3, [pc, #508]	; (80477e4 <_printf_float+0x2ec>)
 80475e6:	e7d1      	b.n	804758c <_printf_float+0x94>
 80475e8:	6863      	ldr	r3, [r4, #4]
 80475ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80475ee:	9206      	str	r2, [sp, #24]
 80475f0:	1c5a      	adds	r2, r3, #1
 80475f2:	d13f      	bne.n	8047674 <_printf_float+0x17c>
 80475f4:	2306      	movs	r3, #6
 80475f6:	6063      	str	r3, [r4, #4]
 80475f8:	9b05      	ldr	r3, [sp, #20]
 80475fa:	6861      	ldr	r1, [r4, #4]
 80475fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8047600:	2300      	movs	r3, #0
 8047602:	9303      	str	r3, [sp, #12]
 8047604:	ab0a      	add	r3, sp, #40	; 0x28
 8047606:	e9cd b301 	strd	fp, r3, [sp, #4]
 804760a:	ab09      	add	r3, sp, #36	; 0x24
 804760c:	ec49 8b10 	vmov	d0, r8, r9
 8047610:	9300      	str	r3, [sp, #0]
 8047612:	6022      	str	r2, [r4, #0]
 8047614:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8047618:	4628      	mov	r0, r5
 804761a:	f7ff fecd 	bl	80473b8 <__cvt>
 804761e:	9b06      	ldr	r3, [sp, #24]
 8047620:	9909      	ldr	r1, [sp, #36]	; 0x24
 8047622:	2b47      	cmp	r3, #71	; 0x47
 8047624:	4680      	mov	r8, r0
 8047626:	d108      	bne.n	804763a <_printf_float+0x142>
 8047628:	1cc8      	adds	r0, r1, #3
 804762a:	db02      	blt.n	8047632 <_printf_float+0x13a>
 804762c:	6863      	ldr	r3, [r4, #4]
 804762e:	4299      	cmp	r1, r3
 8047630:	dd41      	ble.n	80476b6 <_printf_float+0x1be>
 8047632:	f1ab 0b02 	sub.w	fp, fp, #2
 8047636:	fa5f fb8b 	uxtb.w	fp, fp
 804763a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 804763e:	d820      	bhi.n	8047682 <_printf_float+0x18a>
 8047640:	3901      	subs	r1, #1
 8047642:	465a      	mov	r2, fp
 8047644:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8047648:	9109      	str	r1, [sp, #36]	; 0x24
 804764a:	f7ff ff17 	bl	804747c <__exponent>
 804764e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8047650:	1813      	adds	r3, r2, r0
 8047652:	2a01      	cmp	r2, #1
 8047654:	4681      	mov	r9, r0
 8047656:	6123      	str	r3, [r4, #16]
 8047658:	dc02      	bgt.n	8047660 <_printf_float+0x168>
 804765a:	6822      	ldr	r2, [r4, #0]
 804765c:	07d2      	lsls	r2, r2, #31
 804765e:	d501      	bpl.n	8047664 <_printf_float+0x16c>
 8047660:	3301      	adds	r3, #1
 8047662:	6123      	str	r3, [r4, #16]
 8047664:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8047668:	2b00      	cmp	r3, #0
 804766a:	d09c      	beq.n	80475a6 <_printf_float+0xae>
 804766c:	232d      	movs	r3, #45	; 0x2d
 804766e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8047672:	e798      	b.n	80475a6 <_printf_float+0xae>
 8047674:	9a06      	ldr	r2, [sp, #24]
 8047676:	2a47      	cmp	r2, #71	; 0x47
 8047678:	d1be      	bne.n	80475f8 <_printf_float+0x100>
 804767a:	2b00      	cmp	r3, #0
 804767c:	d1bc      	bne.n	80475f8 <_printf_float+0x100>
 804767e:	2301      	movs	r3, #1
 8047680:	e7b9      	b.n	80475f6 <_printf_float+0xfe>
 8047682:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8047686:	d118      	bne.n	80476ba <_printf_float+0x1c2>
 8047688:	2900      	cmp	r1, #0
 804768a:	6863      	ldr	r3, [r4, #4]
 804768c:	dd0b      	ble.n	80476a6 <_printf_float+0x1ae>
 804768e:	6121      	str	r1, [r4, #16]
 8047690:	b913      	cbnz	r3, 8047698 <_printf_float+0x1a0>
 8047692:	6822      	ldr	r2, [r4, #0]
 8047694:	07d0      	lsls	r0, r2, #31
 8047696:	d502      	bpl.n	804769e <_printf_float+0x1a6>
 8047698:	3301      	adds	r3, #1
 804769a:	440b      	add	r3, r1
 804769c:	6123      	str	r3, [r4, #16]
 804769e:	65a1      	str	r1, [r4, #88]	; 0x58
 80476a0:	f04f 0900 	mov.w	r9, #0
 80476a4:	e7de      	b.n	8047664 <_printf_float+0x16c>
 80476a6:	b913      	cbnz	r3, 80476ae <_printf_float+0x1b6>
 80476a8:	6822      	ldr	r2, [r4, #0]
 80476aa:	07d2      	lsls	r2, r2, #31
 80476ac:	d501      	bpl.n	80476b2 <_printf_float+0x1ba>
 80476ae:	3302      	adds	r3, #2
 80476b0:	e7f4      	b.n	804769c <_printf_float+0x1a4>
 80476b2:	2301      	movs	r3, #1
 80476b4:	e7f2      	b.n	804769c <_printf_float+0x1a4>
 80476b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80476ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80476bc:	4299      	cmp	r1, r3
 80476be:	db05      	blt.n	80476cc <_printf_float+0x1d4>
 80476c0:	6823      	ldr	r3, [r4, #0]
 80476c2:	6121      	str	r1, [r4, #16]
 80476c4:	07d8      	lsls	r0, r3, #31
 80476c6:	d5ea      	bpl.n	804769e <_printf_float+0x1a6>
 80476c8:	1c4b      	adds	r3, r1, #1
 80476ca:	e7e7      	b.n	804769c <_printf_float+0x1a4>
 80476cc:	2900      	cmp	r1, #0
 80476ce:	bfd4      	ite	le
 80476d0:	f1c1 0202 	rsble	r2, r1, #2
 80476d4:	2201      	movgt	r2, #1
 80476d6:	4413      	add	r3, r2
 80476d8:	e7e0      	b.n	804769c <_printf_float+0x1a4>
 80476da:	6823      	ldr	r3, [r4, #0]
 80476dc:	055a      	lsls	r2, r3, #21
 80476de:	d407      	bmi.n	80476f0 <_printf_float+0x1f8>
 80476e0:	6923      	ldr	r3, [r4, #16]
 80476e2:	4642      	mov	r2, r8
 80476e4:	4631      	mov	r1, r6
 80476e6:	4628      	mov	r0, r5
 80476e8:	47b8      	blx	r7
 80476ea:	3001      	adds	r0, #1
 80476ec:	d12c      	bne.n	8047748 <_printf_float+0x250>
 80476ee:	e764      	b.n	80475ba <_printf_float+0xc2>
 80476f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80476f4:	f240 80e0 	bls.w	80478b8 <_printf_float+0x3c0>
 80476f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80476fc:	2200      	movs	r2, #0
 80476fe:	2300      	movs	r3, #0
 8047700:	f7f9 f9ea 	bl	8040ad8 <__aeabi_dcmpeq>
 8047704:	2800      	cmp	r0, #0
 8047706:	d034      	beq.n	8047772 <_printf_float+0x27a>
 8047708:	4a37      	ldr	r2, [pc, #220]	; (80477e8 <_printf_float+0x2f0>)
 804770a:	2301      	movs	r3, #1
 804770c:	4631      	mov	r1, r6
 804770e:	4628      	mov	r0, r5
 8047710:	47b8      	blx	r7
 8047712:	3001      	adds	r0, #1
 8047714:	f43f af51 	beq.w	80475ba <_printf_float+0xc2>
 8047718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 804771c:	429a      	cmp	r2, r3
 804771e:	db02      	blt.n	8047726 <_printf_float+0x22e>
 8047720:	6823      	ldr	r3, [r4, #0]
 8047722:	07d8      	lsls	r0, r3, #31
 8047724:	d510      	bpl.n	8047748 <_printf_float+0x250>
 8047726:	ee18 3a10 	vmov	r3, s16
 804772a:	4652      	mov	r2, sl
 804772c:	4631      	mov	r1, r6
 804772e:	4628      	mov	r0, r5
 8047730:	47b8      	blx	r7
 8047732:	3001      	adds	r0, #1
 8047734:	f43f af41 	beq.w	80475ba <_printf_float+0xc2>
 8047738:	f04f 0800 	mov.w	r8, #0
 804773c:	f104 091a 	add.w	r9, r4, #26
 8047740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8047742:	3b01      	subs	r3, #1
 8047744:	4543      	cmp	r3, r8
 8047746:	dc09      	bgt.n	804775c <_printf_float+0x264>
 8047748:	6823      	ldr	r3, [r4, #0]
 804774a:	079b      	lsls	r3, r3, #30
 804774c:	f100 8105 	bmi.w	804795a <_printf_float+0x462>
 8047750:	68e0      	ldr	r0, [r4, #12]
 8047752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8047754:	4298      	cmp	r0, r3
 8047756:	bfb8      	it	lt
 8047758:	4618      	movlt	r0, r3
 804775a:	e730      	b.n	80475be <_printf_float+0xc6>
 804775c:	2301      	movs	r3, #1
 804775e:	464a      	mov	r2, r9
 8047760:	4631      	mov	r1, r6
 8047762:	4628      	mov	r0, r5
 8047764:	47b8      	blx	r7
 8047766:	3001      	adds	r0, #1
 8047768:	f43f af27 	beq.w	80475ba <_printf_float+0xc2>
 804776c:	f108 0801 	add.w	r8, r8, #1
 8047770:	e7e6      	b.n	8047740 <_printf_float+0x248>
 8047772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8047774:	2b00      	cmp	r3, #0
 8047776:	dc39      	bgt.n	80477ec <_printf_float+0x2f4>
 8047778:	4a1b      	ldr	r2, [pc, #108]	; (80477e8 <_printf_float+0x2f0>)
 804777a:	2301      	movs	r3, #1
 804777c:	4631      	mov	r1, r6
 804777e:	4628      	mov	r0, r5
 8047780:	47b8      	blx	r7
 8047782:	3001      	adds	r0, #1
 8047784:	f43f af19 	beq.w	80475ba <_printf_float+0xc2>
 8047788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 804778c:	4313      	orrs	r3, r2
 804778e:	d102      	bne.n	8047796 <_printf_float+0x29e>
 8047790:	6823      	ldr	r3, [r4, #0]
 8047792:	07d9      	lsls	r1, r3, #31
 8047794:	d5d8      	bpl.n	8047748 <_printf_float+0x250>
 8047796:	ee18 3a10 	vmov	r3, s16
 804779a:	4652      	mov	r2, sl
 804779c:	4631      	mov	r1, r6
 804779e:	4628      	mov	r0, r5
 80477a0:	47b8      	blx	r7
 80477a2:	3001      	adds	r0, #1
 80477a4:	f43f af09 	beq.w	80475ba <_printf_float+0xc2>
 80477a8:	f04f 0900 	mov.w	r9, #0
 80477ac:	f104 0a1a 	add.w	sl, r4, #26
 80477b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80477b2:	425b      	negs	r3, r3
 80477b4:	454b      	cmp	r3, r9
 80477b6:	dc01      	bgt.n	80477bc <_printf_float+0x2c4>
 80477b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80477ba:	e792      	b.n	80476e2 <_printf_float+0x1ea>
 80477bc:	2301      	movs	r3, #1
 80477be:	4652      	mov	r2, sl
 80477c0:	4631      	mov	r1, r6
 80477c2:	4628      	mov	r0, r5
 80477c4:	47b8      	blx	r7
 80477c6:	3001      	adds	r0, #1
 80477c8:	f43f aef7 	beq.w	80475ba <_printf_float+0xc2>
 80477cc:	f109 0901 	add.w	r9, r9, #1
 80477d0:	e7ee      	b.n	80477b0 <_printf_float+0x2b8>
 80477d2:	bf00      	nop
 80477d4:	7fefffff 	.word	0x7fefffff
 80477d8:	0804a1b8 	.word	0x0804a1b8
 80477dc:	0804a1bc 	.word	0x0804a1bc
 80477e0:	0804a1c4 	.word	0x0804a1c4
 80477e4:	0804a1c0 	.word	0x0804a1c0
 80477e8:	0804a1c8 	.word	0x0804a1c8
 80477ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80477ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80477f0:	429a      	cmp	r2, r3
 80477f2:	bfa8      	it	ge
 80477f4:	461a      	movge	r2, r3
 80477f6:	2a00      	cmp	r2, #0
 80477f8:	4691      	mov	r9, r2
 80477fa:	dc37      	bgt.n	804786c <_printf_float+0x374>
 80477fc:	f04f 0b00 	mov.w	fp, #0
 8047800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8047804:	f104 021a 	add.w	r2, r4, #26
 8047808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804780a:	9305      	str	r3, [sp, #20]
 804780c:	eba3 0309 	sub.w	r3, r3, r9
 8047810:	455b      	cmp	r3, fp
 8047812:	dc33      	bgt.n	804787c <_printf_float+0x384>
 8047814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8047818:	429a      	cmp	r2, r3
 804781a:	db3b      	blt.n	8047894 <_printf_float+0x39c>
 804781c:	6823      	ldr	r3, [r4, #0]
 804781e:	07da      	lsls	r2, r3, #31
 8047820:	d438      	bmi.n	8047894 <_printf_float+0x39c>
 8047822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8047824:	9a05      	ldr	r2, [sp, #20]
 8047826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8047828:	1a9a      	subs	r2, r3, r2
 804782a:	eba3 0901 	sub.w	r9, r3, r1
 804782e:	4591      	cmp	r9, r2
 8047830:	bfa8      	it	ge
 8047832:	4691      	movge	r9, r2
 8047834:	f1b9 0f00 	cmp.w	r9, #0
 8047838:	dc35      	bgt.n	80478a6 <_printf_float+0x3ae>
 804783a:	f04f 0800 	mov.w	r8, #0
 804783e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8047842:	f104 0a1a 	add.w	sl, r4, #26
 8047846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 804784a:	1a9b      	subs	r3, r3, r2
 804784c:	eba3 0309 	sub.w	r3, r3, r9
 8047850:	4543      	cmp	r3, r8
 8047852:	f77f af79 	ble.w	8047748 <_printf_float+0x250>
 8047856:	2301      	movs	r3, #1
 8047858:	4652      	mov	r2, sl
 804785a:	4631      	mov	r1, r6
 804785c:	4628      	mov	r0, r5
 804785e:	47b8      	blx	r7
 8047860:	3001      	adds	r0, #1
 8047862:	f43f aeaa 	beq.w	80475ba <_printf_float+0xc2>
 8047866:	f108 0801 	add.w	r8, r8, #1
 804786a:	e7ec      	b.n	8047846 <_printf_float+0x34e>
 804786c:	4613      	mov	r3, r2
 804786e:	4631      	mov	r1, r6
 8047870:	4642      	mov	r2, r8
 8047872:	4628      	mov	r0, r5
 8047874:	47b8      	blx	r7
 8047876:	3001      	adds	r0, #1
 8047878:	d1c0      	bne.n	80477fc <_printf_float+0x304>
 804787a:	e69e      	b.n	80475ba <_printf_float+0xc2>
 804787c:	2301      	movs	r3, #1
 804787e:	4631      	mov	r1, r6
 8047880:	4628      	mov	r0, r5
 8047882:	9205      	str	r2, [sp, #20]
 8047884:	47b8      	blx	r7
 8047886:	3001      	adds	r0, #1
 8047888:	f43f ae97 	beq.w	80475ba <_printf_float+0xc2>
 804788c:	9a05      	ldr	r2, [sp, #20]
 804788e:	f10b 0b01 	add.w	fp, fp, #1
 8047892:	e7b9      	b.n	8047808 <_printf_float+0x310>
 8047894:	ee18 3a10 	vmov	r3, s16
 8047898:	4652      	mov	r2, sl
 804789a:	4631      	mov	r1, r6
 804789c:	4628      	mov	r0, r5
 804789e:	47b8      	blx	r7
 80478a0:	3001      	adds	r0, #1
 80478a2:	d1be      	bne.n	8047822 <_printf_float+0x32a>
 80478a4:	e689      	b.n	80475ba <_printf_float+0xc2>
 80478a6:	9a05      	ldr	r2, [sp, #20]
 80478a8:	464b      	mov	r3, r9
 80478aa:	4442      	add	r2, r8
 80478ac:	4631      	mov	r1, r6
 80478ae:	4628      	mov	r0, r5
 80478b0:	47b8      	blx	r7
 80478b2:	3001      	adds	r0, #1
 80478b4:	d1c1      	bne.n	804783a <_printf_float+0x342>
 80478b6:	e680      	b.n	80475ba <_printf_float+0xc2>
 80478b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80478ba:	2a01      	cmp	r2, #1
 80478bc:	dc01      	bgt.n	80478c2 <_printf_float+0x3ca>
 80478be:	07db      	lsls	r3, r3, #31
 80478c0:	d538      	bpl.n	8047934 <_printf_float+0x43c>
 80478c2:	2301      	movs	r3, #1
 80478c4:	4642      	mov	r2, r8
 80478c6:	4631      	mov	r1, r6
 80478c8:	4628      	mov	r0, r5
 80478ca:	47b8      	blx	r7
 80478cc:	3001      	adds	r0, #1
 80478ce:	f43f ae74 	beq.w	80475ba <_printf_float+0xc2>
 80478d2:	ee18 3a10 	vmov	r3, s16
 80478d6:	4652      	mov	r2, sl
 80478d8:	4631      	mov	r1, r6
 80478da:	4628      	mov	r0, r5
 80478dc:	47b8      	blx	r7
 80478de:	3001      	adds	r0, #1
 80478e0:	f43f ae6b 	beq.w	80475ba <_printf_float+0xc2>
 80478e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80478e8:	2200      	movs	r2, #0
 80478ea:	2300      	movs	r3, #0
 80478ec:	f7f9 f8f4 	bl	8040ad8 <__aeabi_dcmpeq>
 80478f0:	b9d8      	cbnz	r0, 804792a <_printf_float+0x432>
 80478f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80478f4:	f108 0201 	add.w	r2, r8, #1
 80478f8:	3b01      	subs	r3, #1
 80478fa:	4631      	mov	r1, r6
 80478fc:	4628      	mov	r0, r5
 80478fe:	47b8      	blx	r7
 8047900:	3001      	adds	r0, #1
 8047902:	d10e      	bne.n	8047922 <_printf_float+0x42a>
 8047904:	e659      	b.n	80475ba <_printf_float+0xc2>
 8047906:	2301      	movs	r3, #1
 8047908:	4652      	mov	r2, sl
 804790a:	4631      	mov	r1, r6
 804790c:	4628      	mov	r0, r5
 804790e:	47b8      	blx	r7
 8047910:	3001      	adds	r0, #1
 8047912:	f43f ae52 	beq.w	80475ba <_printf_float+0xc2>
 8047916:	f108 0801 	add.w	r8, r8, #1
 804791a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804791c:	3b01      	subs	r3, #1
 804791e:	4543      	cmp	r3, r8
 8047920:	dcf1      	bgt.n	8047906 <_printf_float+0x40e>
 8047922:	464b      	mov	r3, r9
 8047924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8047928:	e6dc      	b.n	80476e4 <_printf_float+0x1ec>
 804792a:	f04f 0800 	mov.w	r8, #0
 804792e:	f104 0a1a 	add.w	sl, r4, #26
 8047932:	e7f2      	b.n	804791a <_printf_float+0x422>
 8047934:	2301      	movs	r3, #1
 8047936:	4642      	mov	r2, r8
 8047938:	e7df      	b.n	80478fa <_printf_float+0x402>
 804793a:	2301      	movs	r3, #1
 804793c:	464a      	mov	r2, r9
 804793e:	4631      	mov	r1, r6
 8047940:	4628      	mov	r0, r5
 8047942:	47b8      	blx	r7
 8047944:	3001      	adds	r0, #1
 8047946:	f43f ae38 	beq.w	80475ba <_printf_float+0xc2>
 804794a:	f108 0801 	add.w	r8, r8, #1
 804794e:	68e3      	ldr	r3, [r4, #12]
 8047950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8047952:	1a5b      	subs	r3, r3, r1
 8047954:	4543      	cmp	r3, r8
 8047956:	dcf0      	bgt.n	804793a <_printf_float+0x442>
 8047958:	e6fa      	b.n	8047750 <_printf_float+0x258>
 804795a:	f04f 0800 	mov.w	r8, #0
 804795e:	f104 0919 	add.w	r9, r4, #25
 8047962:	e7f4      	b.n	804794e <_printf_float+0x456>

08047964 <_printf_common>:
 8047964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8047968:	4616      	mov	r6, r2
 804796a:	4699      	mov	r9, r3
 804796c:	688a      	ldr	r2, [r1, #8]
 804796e:	690b      	ldr	r3, [r1, #16]
 8047970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8047974:	4293      	cmp	r3, r2
 8047976:	bfb8      	it	lt
 8047978:	4613      	movlt	r3, r2
 804797a:	6033      	str	r3, [r6, #0]
 804797c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8047980:	4607      	mov	r7, r0
 8047982:	460c      	mov	r4, r1
 8047984:	b10a      	cbz	r2, 804798a <_printf_common+0x26>
 8047986:	3301      	adds	r3, #1
 8047988:	6033      	str	r3, [r6, #0]
 804798a:	6823      	ldr	r3, [r4, #0]
 804798c:	0699      	lsls	r1, r3, #26
 804798e:	bf42      	ittt	mi
 8047990:	6833      	ldrmi	r3, [r6, #0]
 8047992:	3302      	addmi	r3, #2
 8047994:	6033      	strmi	r3, [r6, #0]
 8047996:	6825      	ldr	r5, [r4, #0]
 8047998:	f015 0506 	ands.w	r5, r5, #6
 804799c:	d106      	bne.n	80479ac <_printf_common+0x48>
 804799e:	f104 0a19 	add.w	sl, r4, #25
 80479a2:	68e3      	ldr	r3, [r4, #12]
 80479a4:	6832      	ldr	r2, [r6, #0]
 80479a6:	1a9b      	subs	r3, r3, r2
 80479a8:	42ab      	cmp	r3, r5
 80479aa:	dc26      	bgt.n	80479fa <_printf_common+0x96>
 80479ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80479b0:	1e13      	subs	r3, r2, #0
 80479b2:	6822      	ldr	r2, [r4, #0]
 80479b4:	bf18      	it	ne
 80479b6:	2301      	movne	r3, #1
 80479b8:	0692      	lsls	r2, r2, #26
 80479ba:	d42b      	bmi.n	8047a14 <_printf_common+0xb0>
 80479bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80479c0:	4649      	mov	r1, r9
 80479c2:	4638      	mov	r0, r7
 80479c4:	47c0      	blx	r8
 80479c6:	3001      	adds	r0, #1
 80479c8:	d01e      	beq.n	8047a08 <_printf_common+0xa4>
 80479ca:	6823      	ldr	r3, [r4, #0]
 80479cc:	68e5      	ldr	r5, [r4, #12]
 80479ce:	6832      	ldr	r2, [r6, #0]
 80479d0:	f003 0306 	and.w	r3, r3, #6
 80479d4:	2b04      	cmp	r3, #4
 80479d6:	bf08      	it	eq
 80479d8:	1aad      	subeq	r5, r5, r2
 80479da:	68a3      	ldr	r3, [r4, #8]
 80479dc:	6922      	ldr	r2, [r4, #16]
 80479de:	bf0c      	ite	eq
 80479e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80479e4:	2500      	movne	r5, #0
 80479e6:	4293      	cmp	r3, r2
 80479e8:	bfc4      	itt	gt
 80479ea:	1a9b      	subgt	r3, r3, r2
 80479ec:	18ed      	addgt	r5, r5, r3
 80479ee:	2600      	movs	r6, #0
 80479f0:	341a      	adds	r4, #26
 80479f2:	42b5      	cmp	r5, r6
 80479f4:	d11a      	bne.n	8047a2c <_printf_common+0xc8>
 80479f6:	2000      	movs	r0, #0
 80479f8:	e008      	b.n	8047a0c <_printf_common+0xa8>
 80479fa:	2301      	movs	r3, #1
 80479fc:	4652      	mov	r2, sl
 80479fe:	4649      	mov	r1, r9
 8047a00:	4638      	mov	r0, r7
 8047a02:	47c0      	blx	r8
 8047a04:	3001      	adds	r0, #1
 8047a06:	d103      	bne.n	8047a10 <_printf_common+0xac>
 8047a08:	f04f 30ff 	mov.w	r0, #4294967295
 8047a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8047a10:	3501      	adds	r5, #1
 8047a12:	e7c6      	b.n	80479a2 <_printf_common+0x3e>
 8047a14:	18e1      	adds	r1, r4, r3
 8047a16:	1c5a      	adds	r2, r3, #1
 8047a18:	2030      	movs	r0, #48	; 0x30
 8047a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8047a1e:	4422      	add	r2, r4
 8047a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8047a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8047a28:	3302      	adds	r3, #2
 8047a2a:	e7c7      	b.n	80479bc <_printf_common+0x58>
 8047a2c:	2301      	movs	r3, #1
 8047a2e:	4622      	mov	r2, r4
 8047a30:	4649      	mov	r1, r9
 8047a32:	4638      	mov	r0, r7
 8047a34:	47c0      	blx	r8
 8047a36:	3001      	adds	r0, #1
 8047a38:	d0e6      	beq.n	8047a08 <_printf_common+0xa4>
 8047a3a:	3601      	adds	r6, #1
 8047a3c:	e7d9      	b.n	80479f2 <_printf_common+0x8e>
	...

08047a40 <_printf_i>:
 8047a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8047a44:	7e0f      	ldrb	r7, [r1, #24]
 8047a46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8047a48:	2f78      	cmp	r7, #120	; 0x78
 8047a4a:	4691      	mov	r9, r2
 8047a4c:	4680      	mov	r8, r0
 8047a4e:	460c      	mov	r4, r1
 8047a50:	469a      	mov	sl, r3
 8047a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8047a56:	d807      	bhi.n	8047a68 <_printf_i+0x28>
 8047a58:	2f62      	cmp	r7, #98	; 0x62
 8047a5a:	d80a      	bhi.n	8047a72 <_printf_i+0x32>
 8047a5c:	2f00      	cmp	r7, #0
 8047a5e:	f000 80d8 	beq.w	8047c12 <_printf_i+0x1d2>
 8047a62:	2f58      	cmp	r7, #88	; 0x58
 8047a64:	f000 80a3 	beq.w	8047bae <_printf_i+0x16e>
 8047a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8047a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8047a70:	e03a      	b.n	8047ae8 <_printf_i+0xa8>
 8047a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8047a76:	2b15      	cmp	r3, #21
 8047a78:	d8f6      	bhi.n	8047a68 <_printf_i+0x28>
 8047a7a:	a101      	add	r1, pc, #4	; (adr r1, 8047a80 <_printf_i+0x40>)
 8047a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8047a80:	08047ad9 	.word	0x08047ad9
 8047a84:	08047aed 	.word	0x08047aed
 8047a88:	08047a69 	.word	0x08047a69
 8047a8c:	08047a69 	.word	0x08047a69
 8047a90:	08047a69 	.word	0x08047a69
 8047a94:	08047a69 	.word	0x08047a69
 8047a98:	08047aed 	.word	0x08047aed
 8047a9c:	08047a69 	.word	0x08047a69
 8047aa0:	08047a69 	.word	0x08047a69
 8047aa4:	08047a69 	.word	0x08047a69
 8047aa8:	08047a69 	.word	0x08047a69
 8047aac:	08047bf9 	.word	0x08047bf9
 8047ab0:	08047b1d 	.word	0x08047b1d
 8047ab4:	08047bdb 	.word	0x08047bdb
 8047ab8:	08047a69 	.word	0x08047a69
 8047abc:	08047a69 	.word	0x08047a69
 8047ac0:	08047c1b 	.word	0x08047c1b
 8047ac4:	08047a69 	.word	0x08047a69
 8047ac8:	08047b1d 	.word	0x08047b1d
 8047acc:	08047a69 	.word	0x08047a69
 8047ad0:	08047a69 	.word	0x08047a69
 8047ad4:	08047be3 	.word	0x08047be3
 8047ad8:	682b      	ldr	r3, [r5, #0]
 8047ada:	1d1a      	adds	r2, r3, #4
 8047adc:	681b      	ldr	r3, [r3, #0]
 8047ade:	602a      	str	r2, [r5, #0]
 8047ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8047ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8047ae8:	2301      	movs	r3, #1
 8047aea:	e0a3      	b.n	8047c34 <_printf_i+0x1f4>
 8047aec:	6820      	ldr	r0, [r4, #0]
 8047aee:	6829      	ldr	r1, [r5, #0]
 8047af0:	0606      	lsls	r6, r0, #24
 8047af2:	f101 0304 	add.w	r3, r1, #4
 8047af6:	d50a      	bpl.n	8047b0e <_printf_i+0xce>
 8047af8:	680e      	ldr	r6, [r1, #0]
 8047afa:	602b      	str	r3, [r5, #0]
 8047afc:	2e00      	cmp	r6, #0
 8047afe:	da03      	bge.n	8047b08 <_printf_i+0xc8>
 8047b00:	232d      	movs	r3, #45	; 0x2d
 8047b02:	4276      	negs	r6, r6
 8047b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8047b08:	485e      	ldr	r0, [pc, #376]	; (8047c84 <_printf_i+0x244>)
 8047b0a:	230a      	movs	r3, #10
 8047b0c:	e019      	b.n	8047b42 <_printf_i+0x102>
 8047b0e:	680e      	ldr	r6, [r1, #0]
 8047b10:	602b      	str	r3, [r5, #0]
 8047b12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8047b16:	bf18      	it	ne
 8047b18:	b236      	sxthne	r6, r6
 8047b1a:	e7ef      	b.n	8047afc <_printf_i+0xbc>
 8047b1c:	682b      	ldr	r3, [r5, #0]
 8047b1e:	6820      	ldr	r0, [r4, #0]
 8047b20:	1d19      	adds	r1, r3, #4
 8047b22:	6029      	str	r1, [r5, #0]
 8047b24:	0601      	lsls	r1, r0, #24
 8047b26:	d501      	bpl.n	8047b2c <_printf_i+0xec>
 8047b28:	681e      	ldr	r6, [r3, #0]
 8047b2a:	e002      	b.n	8047b32 <_printf_i+0xf2>
 8047b2c:	0646      	lsls	r6, r0, #25
 8047b2e:	d5fb      	bpl.n	8047b28 <_printf_i+0xe8>
 8047b30:	881e      	ldrh	r6, [r3, #0]
 8047b32:	4854      	ldr	r0, [pc, #336]	; (8047c84 <_printf_i+0x244>)
 8047b34:	2f6f      	cmp	r7, #111	; 0x6f
 8047b36:	bf0c      	ite	eq
 8047b38:	2308      	moveq	r3, #8
 8047b3a:	230a      	movne	r3, #10
 8047b3c:	2100      	movs	r1, #0
 8047b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8047b42:	6865      	ldr	r5, [r4, #4]
 8047b44:	60a5      	str	r5, [r4, #8]
 8047b46:	2d00      	cmp	r5, #0
 8047b48:	bfa2      	ittt	ge
 8047b4a:	6821      	ldrge	r1, [r4, #0]
 8047b4c:	f021 0104 	bicge.w	r1, r1, #4
 8047b50:	6021      	strge	r1, [r4, #0]
 8047b52:	b90e      	cbnz	r6, 8047b58 <_printf_i+0x118>
 8047b54:	2d00      	cmp	r5, #0
 8047b56:	d04d      	beq.n	8047bf4 <_printf_i+0x1b4>
 8047b58:	4615      	mov	r5, r2
 8047b5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8047b5e:	fb03 6711 	mls	r7, r3, r1, r6
 8047b62:	5dc7      	ldrb	r7, [r0, r7]
 8047b64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8047b68:	4637      	mov	r7, r6
 8047b6a:	42bb      	cmp	r3, r7
 8047b6c:	460e      	mov	r6, r1
 8047b6e:	d9f4      	bls.n	8047b5a <_printf_i+0x11a>
 8047b70:	2b08      	cmp	r3, #8
 8047b72:	d10b      	bne.n	8047b8c <_printf_i+0x14c>
 8047b74:	6823      	ldr	r3, [r4, #0]
 8047b76:	07de      	lsls	r6, r3, #31
 8047b78:	d508      	bpl.n	8047b8c <_printf_i+0x14c>
 8047b7a:	6923      	ldr	r3, [r4, #16]
 8047b7c:	6861      	ldr	r1, [r4, #4]
 8047b7e:	4299      	cmp	r1, r3
 8047b80:	bfde      	ittt	le
 8047b82:	2330      	movle	r3, #48	; 0x30
 8047b84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8047b88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8047b8c:	1b52      	subs	r2, r2, r5
 8047b8e:	6122      	str	r2, [r4, #16]
 8047b90:	f8cd a000 	str.w	sl, [sp]
 8047b94:	464b      	mov	r3, r9
 8047b96:	aa03      	add	r2, sp, #12
 8047b98:	4621      	mov	r1, r4
 8047b9a:	4640      	mov	r0, r8
 8047b9c:	f7ff fee2 	bl	8047964 <_printf_common>
 8047ba0:	3001      	adds	r0, #1
 8047ba2:	d14c      	bne.n	8047c3e <_printf_i+0x1fe>
 8047ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8047ba8:	b004      	add	sp, #16
 8047baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8047bae:	4835      	ldr	r0, [pc, #212]	; (8047c84 <_printf_i+0x244>)
 8047bb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8047bb4:	6829      	ldr	r1, [r5, #0]
 8047bb6:	6823      	ldr	r3, [r4, #0]
 8047bb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8047bbc:	6029      	str	r1, [r5, #0]
 8047bbe:	061d      	lsls	r5, r3, #24
 8047bc0:	d514      	bpl.n	8047bec <_printf_i+0x1ac>
 8047bc2:	07df      	lsls	r7, r3, #31
 8047bc4:	bf44      	itt	mi
 8047bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8047bca:	6023      	strmi	r3, [r4, #0]
 8047bcc:	b91e      	cbnz	r6, 8047bd6 <_printf_i+0x196>
 8047bce:	6823      	ldr	r3, [r4, #0]
 8047bd0:	f023 0320 	bic.w	r3, r3, #32
 8047bd4:	6023      	str	r3, [r4, #0]
 8047bd6:	2310      	movs	r3, #16
 8047bd8:	e7b0      	b.n	8047b3c <_printf_i+0xfc>
 8047bda:	6823      	ldr	r3, [r4, #0]
 8047bdc:	f043 0320 	orr.w	r3, r3, #32
 8047be0:	6023      	str	r3, [r4, #0]
 8047be2:	2378      	movs	r3, #120	; 0x78
 8047be4:	4828      	ldr	r0, [pc, #160]	; (8047c88 <_printf_i+0x248>)
 8047be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8047bea:	e7e3      	b.n	8047bb4 <_printf_i+0x174>
 8047bec:	0659      	lsls	r1, r3, #25
 8047bee:	bf48      	it	mi
 8047bf0:	b2b6      	uxthmi	r6, r6
 8047bf2:	e7e6      	b.n	8047bc2 <_printf_i+0x182>
 8047bf4:	4615      	mov	r5, r2
 8047bf6:	e7bb      	b.n	8047b70 <_printf_i+0x130>
 8047bf8:	682b      	ldr	r3, [r5, #0]
 8047bfa:	6826      	ldr	r6, [r4, #0]
 8047bfc:	6961      	ldr	r1, [r4, #20]
 8047bfe:	1d18      	adds	r0, r3, #4
 8047c00:	6028      	str	r0, [r5, #0]
 8047c02:	0635      	lsls	r5, r6, #24
 8047c04:	681b      	ldr	r3, [r3, #0]
 8047c06:	d501      	bpl.n	8047c0c <_printf_i+0x1cc>
 8047c08:	6019      	str	r1, [r3, #0]
 8047c0a:	e002      	b.n	8047c12 <_printf_i+0x1d2>
 8047c0c:	0670      	lsls	r0, r6, #25
 8047c0e:	d5fb      	bpl.n	8047c08 <_printf_i+0x1c8>
 8047c10:	8019      	strh	r1, [r3, #0]
 8047c12:	2300      	movs	r3, #0
 8047c14:	6123      	str	r3, [r4, #16]
 8047c16:	4615      	mov	r5, r2
 8047c18:	e7ba      	b.n	8047b90 <_printf_i+0x150>
 8047c1a:	682b      	ldr	r3, [r5, #0]
 8047c1c:	1d1a      	adds	r2, r3, #4
 8047c1e:	602a      	str	r2, [r5, #0]
 8047c20:	681d      	ldr	r5, [r3, #0]
 8047c22:	6862      	ldr	r2, [r4, #4]
 8047c24:	2100      	movs	r1, #0
 8047c26:	4628      	mov	r0, r5
 8047c28:	f7f8 fae2 	bl	80401f0 <memchr>
 8047c2c:	b108      	cbz	r0, 8047c32 <_printf_i+0x1f2>
 8047c2e:	1b40      	subs	r0, r0, r5
 8047c30:	6060      	str	r0, [r4, #4]
 8047c32:	6863      	ldr	r3, [r4, #4]
 8047c34:	6123      	str	r3, [r4, #16]
 8047c36:	2300      	movs	r3, #0
 8047c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8047c3c:	e7a8      	b.n	8047b90 <_printf_i+0x150>
 8047c3e:	6923      	ldr	r3, [r4, #16]
 8047c40:	462a      	mov	r2, r5
 8047c42:	4649      	mov	r1, r9
 8047c44:	4640      	mov	r0, r8
 8047c46:	47d0      	blx	sl
 8047c48:	3001      	adds	r0, #1
 8047c4a:	d0ab      	beq.n	8047ba4 <_printf_i+0x164>
 8047c4c:	6823      	ldr	r3, [r4, #0]
 8047c4e:	079b      	lsls	r3, r3, #30
 8047c50:	d413      	bmi.n	8047c7a <_printf_i+0x23a>
 8047c52:	68e0      	ldr	r0, [r4, #12]
 8047c54:	9b03      	ldr	r3, [sp, #12]
 8047c56:	4298      	cmp	r0, r3
 8047c58:	bfb8      	it	lt
 8047c5a:	4618      	movlt	r0, r3
 8047c5c:	e7a4      	b.n	8047ba8 <_printf_i+0x168>
 8047c5e:	2301      	movs	r3, #1
 8047c60:	4632      	mov	r2, r6
 8047c62:	4649      	mov	r1, r9
 8047c64:	4640      	mov	r0, r8
 8047c66:	47d0      	blx	sl
 8047c68:	3001      	adds	r0, #1
 8047c6a:	d09b      	beq.n	8047ba4 <_printf_i+0x164>
 8047c6c:	3501      	adds	r5, #1
 8047c6e:	68e3      	ldr	r3, [r4, #12]
 8047c70:	9903      	ldr	r1, [sp, #12]
 8047c72:	1a5b      	subs	r3, r3, r1
 8047c74:	42ab      	cmp	r3, r5
 8047c76:	dcf2      	bgt.n	8047c5e <_printf_i+0x21e>
 8047c78:	e7eb      	b.n	8047c52 <_printf_i+0x212>
 8047c7a:	2500      	movs	r5, #0
 8047c7c:	f104 0619 	add.w	r6, r4, #25
 8047c80:	e7f5      	b.n	8047c6e <_printf_i+0x22e>
 8047c82:	bf00      	nop
 8047c84:	0804a1ca 	.word	0x0804a1ca
 8047c88:	0804a1db 	.word	0x0804a1db

08047c8c <iprintf>:
 8047c8c:	b40f      	push	{r0, r1, r2, r3}
 8047c8e:	4b0a      	ldr	r3, [pc, #40]	; (8047cb8 <iprintf+0x2c>)
 8047c90:	b513      	push	{r0, r1, r4, lr}
 8047c92:	681c      	ldr	r4, [r3, #0]
 8047c94:	b124      	cbz	r4, 8047ca0 <iprintf+0x14>
 8047c96:	69a3      	ldr	r3, [r4, #24]
 8047c98:	b913      	cbnz	r3, 8047ca0 <iprintf+0x14>
 8047c9a:	4620      	mov	r0, r4
 8047c9c:	f7ff fa1c 	bl	80470d8 <__sinit>
 8047ca0:	ab05      	add	r3, sp, #20
 8047ca2:	9a04      	ldr	r2, [sp, #16]
 8047ca4:	68a1      	ldr	r1, [r4, #8]
 8047ca6:	9301      	str	r3, [sp, #4]
 8047ca8:	4620      	mov	r0, r4
 8047caa:	f001 ff75 	bl	8049b98 <_vfiprintf_r>
 8047cae:	b002      	add	sp, #8
 8047cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8047cb4:	b004      	add	sp, #16
 8047cb6:	4770      	bx	lr
 8047cb8:	20000010 	.word	0x20000010

08047cbc <_puts_r>:
 8047cbc:	b570      	push	{r4, r5, r6, lr}
 8047cbe:	460e      	mov	r6, r1
 8047cc0:	4605      	mov	r5, r0
 8047cc2:	b118      	cbz	r0, 8047ccc <_puts_r+0x10>
 8047cc4:	6983      	ldr	r3, [r0, #24]
 8047cc6:	b90b      	cbnz	r3, 8047ccc <_puts_r+0x10>
 8047cc8:	f7ff fa06 	bl	80470d8 <__sinit>
 8047ccc:	69ab      	ldr	r3, [r5, #24]
 8047cce:	68ac      	ldr	r4, [r5, #8]
 8047cd0:	b913      	cbnz	r3, 8047cd8 <_puts_r+0x1c>
 8047cd2:	4628      	mov	r0, r5
 8047cd4:	f7ff fa00 	bl	80470d8 <__sinit>
 8047cd8:	4b2c      	ldr	r3, [pc, #176]	; (8047d8c <_puts_r+0xd0>)
 8047cda:	429c      	cmp	r4, r3
 8047cdc:	d120      	bne.n	8047d20 <_puts_r+0x64>
 8047cde:	686c      	ldr	r4, [r5, #4]
 8047ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8047ce2:	07db      	lsls	r3, r3, #31
 8047ce4:	d405      	bmi.n	8047cf2 <_puts_r+0x36>
 8047ce6:	89a3      	ldrh	r3, [r4, #12]
 8047ce8:	0598      	lsls	r0, r3, #22
 8047cea:	d402      	bmi.n	8047cf2 <_puts_r+0x36>
 8047cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8047cee:	f7ff fab6 	bl	804725e <__retarget_lock_acquire_recursive>
 8047cf2:	89a3      	ldrh	r3, [r4, #12]
 8047cf4:	0719      	lsls	r1, r3, #28
 8047cf6:	d51d      	bpl.n	8047d34 <_puts_r+0x78>
 8047cf8:	6923      	ldr	r3, [r4, #16]
 8047cfa:	b1db      	cbz	r3, 8047d34 <_puts_r+0x78>
 8047cfc:	3e01      	subs	r6, #1
 8047cfe:	68a3      	ldr	r3, [r4, #8]
 8047d00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8047d04:	3b01      	subs	r3, #1
 8047d06:	60a3      	str	r3, [r4, #8]
 8047d08:	bb39      	cbnz	r1, 8047d5a <_puts_r+0x9e>
 8047d0a:	2b00      	cmp	r3, #0
 8047d0c:	da38      	bge.n	8047d80 <_puts_r+0xc4>
 8047d0e:	4622      	mov	r2, r4
 8047d10:	210a      	movs	r1, #10
 8047d12:	4628      	mov	r0, r5
 8047d14:	f000 f926 	bl	8047f64 <__swbuf_r>
 8047d18:	3001      	adds	r0, #1
 8047d1a:	d011      	beq.n	8047d40 <_puts_r+0x84>
 8047d1c:	250a      	movs	r5, #10
 8047d1e:	e011      	b.n	8047d44 <_puts_r+0x88>
 8047d20:	4b1b      	ldr	r3, [pc, #108]	; (8047d90 <_puts_r+0xd4>)
 8047d22:	429c      	cmp	r4, r3
 8047d24:	d101      	bne.n	8047d2a <_puts_r+0x6e>
 8047d26:	68ac      	ldr	r4, [r5, #8]
 8047d28:	e7da      	b.n	8047ce0 <_puts_r+0x24>
 8047d2a:	4b1a      	ldr	r3, [pc, #104]	; (8047d94 <_puts_r+0xd8>)
 8047d2c:	429c      	cmp	r4, r3
 8047d2e:	bf08      	it	eq
 8047d30:	68ec      	ldreq	r4, [r5, #12]
 8047d32:	e7d5      	b.n	8047ce0 <_puts_r+0x24>
 8047d34:	4621      	mov	r1, r4
 8047d36:	4628      	mov	r0, r5
 8047d38:	f000 f978 	bl	804802c <__swsetup_r>
 8047d3c:	2800      	cmp	r0, #0
 8047d3e:	d0dd      	beq.n	8047cfc <_puts_r+0x40>
 8047d40:	f04f 35ff 	mov.w	r5, #4294967295
 8047d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8047d46:	07da      	lsls	r2, r3, #31
 8047d48:	d405      	bmi.n	8047d56 <_puts_r+0x9a>
 8047d4a:	89a3      	ldrh	r3, [r4, #12]
 8047d4c:	059b      	lsls	r3, r3, #22
 8047d4e:	d402      	bmi.n	8047d56 <_puts_r+0x9a>
 8047d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8047d52:	f7ff fa85 	bl	8047260 <__retarget_lock_release_recursive>
 8047d56:	4628      	mov	r0, r5
 8047d58:	bd70      	pop	{r4, r5, r6, pc}
 8047d5a:	2b00      	cmp	r3, #0
 8047d5c:	da04      	bge.n	8047d68 <_puts_r+0xac>
 8047d5e:	69a2      	ldr	r2, [r4, #24]
 8047d60:	429a      	cmp	r2, r3
 8047d62:	dc06      	bgt.n	8047d72 <_puts_r+0xb6>
 8047d64:	290a      	cmp	r1, #10
 8047d66:	d004      	beq.n	8047d72 <_puts_r+0xb6>
 8047d68:	6823      	ldr	r3, [r4, #0]
 8047d6a:	1c5a      	adds	r2, r3, #1
 8047d6c:	6022      	str	r2, [r4, #0]
 8047d6e:	7019      	strb	r1, [r3, #0]
 8047d70:	e7c5      	b.n	8047cfe <_puts_r+0x42>
 8047d72:	4622      	mov	r2, r4
 8047d74:	4628      	mov	r0, r5
 8047d76:	f000 f8f5 	bl	8047f64 <__swbuf_r>
 8047d7a:	3001      	adds	r0, #1
 8047d7c:	d1bf      	bne.n	8047cfe <_puts_r+0x42>
 8047d7e:	e7df      	b.n	8047d40 <_puts_r+0x84>
 8047d80:	6823      	ldr	r3, [r4, #0]
 8047d82:	250a      	movs	r5, #10
 8047d84:	1c5a      	adds	r2, r3, #1
 8047d86:	6022      	str	r2, [r4, #0]
 8047d88:	701d      	strb	r5, [r3, #0]
 8047d8a:	e7db      	b.n	8047d44 <_puts_r+0x88>
 8047d8c:	0804a174 	.word	0x0804a174
 8047d90:	0804a194 	.word	0x0804a194
 8047d94:	0804a154 	.word	0x0804a154

08047d98 <puts>:
 8047d98:	4b02      	ldr	r3, [pc, #8]	; (8047da4 <puts+0xc>)
 8047d9a:	4601      	mov	r1, r0
 8047d9c:	6818      	ldr	r0, [r3, #0]
 8047d9e:	f7ff bf8d 	b.w	8047cbc <_puts_r>
 8047da2:	bf00      	nop
 8047da4:	20000010 	.word	0x20000010

08047da8 <cleanup_glue>:
 8047da8:	b538      	push	{r3, r4, r5, lr}
 8047daa:	460c      	mov	r4, r1
 8047dac:	6809      	ldr	r1, [r1, #0]
 8047dae:	4605      	mov	r5, r0
 8047db0:	b109      	cbz	r1, 8047db6 <cleanup_glue+0xe>
 8047db2:	f7ff fff9 	bl	8047da8 <cleanup_glue>
 8047db6:	4621      	mov	r1, r4
 8047db8:	4628      	mov	r0, r5
 8047dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8047dbe:	f001 bd19 	b.w	80497f4 <_free_r>
	...

08047dc4 <_reclaim_reent>:
 8047dc4:	4b2c      	ldr	r3, [pc, #176]	; (8047e78 <_reclaim_reent+0xb4>)
 8047dc6:	681b      	ldr	r3, [r3, #0]
 8047dc8:	4283      	cmp	r3, r0
 8047dca:	b570      	push	{r4, r5, r6, lr}
 8047dcc:	4604      	mov	r4, r0
 8047dce:	d051      	beq.n	8047e74 <_reclaim_reent+0xb0>
 8047dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8047dd2:	b143      	cbz	r3, 8047de6 <_reclaim_reent+0x22>
 8047dd4:	68db      	ldr	r3, [r3, #12]
 8047dd6:	2b00      	cmp	r3, #0
 8047dd8:	d14a      	bne.n	8047e70 <_reclaim_reent+0xac>
 8047dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8047ddc:	6819      	ldr	r1, [r3, #0]
 8047dde:	b111      	cbz	r1, 8047de6 <_reclaim_reent+0x22>
 8047de0:	4620      	mov	r0, r4
 8047de2:	f001 fd07 	bl	80497f4 <_free_r>
 8047de6:	6961      	ldr	r1, [r4, #20]
 8047de8:	b111      	cbz	r1, 8047df0 <_reclaim_reent+0x2c>
 8047dea:	4620      	mov	r0, r4
 8047dec:	f001 fd02 	bl	80497f4 <_free_r>
 8047df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8047df2:	b111      	cbz	r1, 8047dfa <_reclaim_reent+0x36>
 8047df4:	4620      	mov	r0, r4
 8047df6:	f001 fcfd 	bl	80497f4 <_free_r>
 8047dfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8047dfc:	b111      	cbz	r1, 8047e04 <_reclaim_reent+0x40>
 8047dfe:	4620      	mov	r0, r4
 8047e00:	f001 fcf8 	bl	80497f4 <_free_r>
 8047e04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8047e06:	b111      	cbz	r1, 8047e0e <_reclaim_reent+0x4a>
 8047e08:	4620      	mov	r0, r4
 8047e0a:	f001 fcf3 	bl	80497f4 <_free_r>
 8047e0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8047e10:	b111      	cbz	r1, 8047e18 <_reclaim_reent+0x54>
 8047e12:	4620      	mov	r0, r4
 8047e14:	f001 fcee 	bl	80497f4 <_free_r>
 8047e18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8047e1a:	b111      	cbz	r1, 8047e22 <_reclaim_reent+0x5e>
 8047e1c:	4620      	mov	r0, r4
 8047e1e:	f001 fce9 	bl	80497f4 <_free_r>
 8047e22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8047e24:	b111      	cbz	r1, 8047e2c <_reclaim_reent+0x68>
 8047e26:	4620      	mov	r0, r4
 8047e28:	f001 fce4 	bl	80497f4 <_free_r>
 8047e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8047e2e:	b111      	cbz	r1, 8047e36 <_reclaim_reent+0x72>
 8047e30:	4620      	mov	r0, r4
 8047e32:	f001 fcdf 	bl	80497f4 <_free_r>
 8047e36:	69a3      	ldr	r3, [r4, #24]
 8047e38:	b1e3      	cbz	r3, 8047e74 <_reclaim_reent+0xb0>
 8047e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8047e3c:	4620      	mov	r0, r4
 8047e3e:	4798      	blx	r3
 8047e40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8047e42:	b1b9      	cbz	r1, 8047e74 <_reclaim_reent+0xb0>
 8047e44:	4620      	mov	r0, r4
 8047e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8047e4a:	f7ff bfad 	b.w	8047da8 <cleanup_glue>
 8047e4e:	5949      	ldr	r1, [r1, r5]
 8047e50:	b941      	cbnz	r1, 8047e64 <_reclaim_reent+0xa0>
 8047e52:	3504      	adds	r5, #4
 8047e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8047e56:	2d80      	cmp	r5, #128	; 0x80
 8047e58:	68d9      	ldr	r1, [r3, #12]
 8047e5a:	d1f8      	bne.n	8047e4e <_reclaim_reent+0x8a>
 8047e5c:	4620      	mov	r0, r4
 8047e5e:	f001 fcc9 	bl	80497f4 <_free_r>
 8047e62:	e7ba      	b.n	8047dda <_reclaim_reent+0x16>
 8047e64:	680e      	ldr	r6, [r1, #0]
 8047e66:	4620      	mov	r0, r4
 8047e68:	f001 fcc4 	bl	80497f4 <_free_r>
 8047e6c:	4631      	mov	r1, r6
 8047e6e:	e7ef      	b.n	8047e50 <_reclaim_reent+0x8c>
 8047e70:	2500      	movs	r5, #0
 8047e72:	e7ef      	b.n	8047e54 <_reclaim_reent+0x90>
 8047e74:	bd70      	pop	{r4, r5, r6, pc}
 8047e76:	bf00      	nop
 8047e78:	20000010 	.word	0x20000010

08047e7c <_sbrk_r>:
 8047e7c:	b538      	push	{r3, r4, r5, lr}
 8047e7e:	4d06      	ldr	r5, [pc, #24]	; (8047e98 <_sbrk_r+0x1c>)
 8047e80:	2300      	movs	r3, #0
 8047e82:	4604      	mov	r4, r0
 8047e84:	4608      	mov	r0, r1
 8047e86:	602b      	str	r3, [r5, #0]
 8047e88:	f7fa fcaa 	bl	80427e0 <_sbrk>
 8047e8c:	1c43      	adds	r3, r0, #1
 8047e8e:	d102      	bne.n	8047e96 <_sbrk_r+0x1a>
 8047e90:	682b      	ldr	r3, [r5, #0]
 8047e92:	b103      	cbz	r3, 8047e96 <_sbrk_r+0x1a>
 8047e94:	6023      	str	r3, [r4, #0]
 8047e96:	bd38      	pop	{r3, r4, r5, pc}
 8047e98:	20004398 	.word	0x20004398

08047e9c <siprintf>:
 8047e9c:	b40e      	push	{r1, r2, r3}
 8047e9e:	b500      	push	{lr}
 8047ea0:	b09c      	sub	sp, #112	; 0x70
 8047ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8047ea4:	9002      	str	r0, [sp, #8]
 8047ea6:	9006      	str	r0, [sp, #24]
 8047ea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8047eac:	4809      	ldr	r0, [pc, #36]	; (8047ed4 <siprintf+0x38>)
 8047eae:	9107      	str	r1, [sp, #28]
 8047eb0:	9104      	str	r1, [sp, #16]
 8047eb2:	4909      	ldr	r1, [pc, #36]	; (8047ed8 <siprintf+0x3c>)
 8047eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8047eb8:	9105      	str	r1, [sp, #20]
 8047eba:	6800      	ldr	r0, [r0, #0]
 8047ebc:	9301      	str	r3, [sp, #4]
 8047ebe:	a902      	add	r1, sp, #8
 8047ec0:	f001 fd40 	bl	8049944 <_svfiprintf_r>
 8047ec4:	9b02      	ldr	r3, [sp, #8]
 8047ec6:	2200      	movs	r2, #0
 8047ec8:	701a      	strb	r2, [r3, #0]
 8047eca:	b01c      	add	sp, #112	; 0x70
 8047ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8047ed0:	b003      	add	sp, #12
 8047ed2:	4770      	bx	lr
 8047ed4:	20000010 	.word	0x20000010
 8047ed8:	ffff0208 	.word	0xffff0208

08047edc <__sread>:
 8047edc:	b510      	push	{r4, lr}
 8047ede:	460c      	mov	r4, r1
 8047ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8047ee4:	f001 ff88 	bl	8049df8 <_read_r>
 8047ee8:	2800      	cmp	r0, #0
 8047eea:	bfab      	itete	ge
 8047eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8047eee:	89a3      	ldrhlt	r3, [r4, #12]
 8047ef0:	181b      	addge	r3, r3, r0
 8047ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8047ef6:	bfac      	ite	ge
 8047ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8047efa:	81a3      	strhlt	r3, [r4, #12]
 8047efc:	bd10      	pop	{r4, pc}

08047efe <__swrite>:
 8047efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8047f02:	461f      	mov	r7, r3
 8047f04:	898b      	ldrh	r3, [r1, #12]
 8047f06:	05db      	lsls	r3, r3, #23
 8047f08:	4605      	mov	r5, r0
 8047f0a:	460c      	mov	r4, r1
 8047f0c:	4616      	mov	r6, r2
 8047f0e:	d505      	bpl.n	8047f1c <__swrite+0x1e>
 8047f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8047f14:	2302      	movs	r3, #2
 8047f16:	2200      	movs	r2, #0
 8047f18:	f001 f846 	bl	8048fa8 <_lseek_r>
 8047f1c:	89a3      	ldrh	r3, [r4, #12]
 8047f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8047f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8047f26:	81a3      	strh	r3, [r4, #12]
 8047f28:	4632      	mov	r2, r6
 8047f2a:	463b      	mov	r3, r7
 8047f2c:	4628      	mov	r0, r5
 8047f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8047f32:	f000 b869 	b.w	8048008 <_write_r>

08047f36 <__sseek>:
 8047f36:	b510      	push	{r4, lr}
 8047f38:	460c      	mov	r4, r1
 8047f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8047f3e:	f001 f833 	bl	8048fa8 <_lseek_r>
 8047f42:	1c43      	adds	r3, r0, #1
 8047f44:	89a3      	ldrh	r3, [r4, #12]
 8047f46:	bf15      	itete	ne
 8047f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8047f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8047f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8047f52:	81a3      	strheq	r3, [r4, #12]
 8047f54:	bf18      	it	ne
 8047f56:	81a3      	strhne	r3, [r4, #12]
 8047f58:	bd10      	pop	{r4, pc}

08047f5a <__sclose>:
 8047f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8047f5e:	f000 b8d3 	b.w	8048108 <_close_r>
	...

08047f64 <__swbuf_r>:
 8047f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8047f66:	460e      	mov	r6, r1
 8047f68:	4614      	mov	r4, r2
 8047f6a:	4605      	mov	r5, r0
 8047f6c:	b118      	cbz	r0, 8047f76 <__swbuf_r+0x12>
 8047f6e:	6983      	ldr	r3, [r0, #24]
 8047f70:	b90b      	cbnz	r3, 8047f76 <__swbuf_r+0x12>
 8047f72:	f7ff f8b1 	bl	80470d8 <__sinit>
 8047f76:	4b21      	ldr	r3, [pc, #132]	; (8047ffc <__swbuf_r+0x98>)
 8047f78:	429c      	cmp	r4, r3
 8047f7a:	d12b      	bne.n	8047fd4 <__swbuf_r+0x70>
 8047f7c:	686c      	ldr	r4, [r5, #4]
 8047f7e:	69a3      	ldr	r3, [r4, #24]
 8047f80:	60a3      	str	r3, [r4, #8]
 8047f82:	89a3      	ldrh	r3, [r4, #12]
 8047f84:	071a      	lsls	r2, r3, #28
 8047f86:	d52f      	bpl.n	8047fe8 <__swbuf_r+0x84>
 8047f88:	6923      	ldr	r3, [r4, #16]
 8047f8a:	b36b      	cbz	r3, 8047fe8 <__swbuf_r+0x84>
 8047f8c:	6923      	ldr	r3, [r4, #16]
 8047f8e:	6820      	ldr	r0, [r4, #0]
 8047f90:	1ac0      	subs	r0, r0, r3
 8047f92:	6963      	ldr	r3, [r4, #20]
 8047f94:	b2f6      	uxtb	r6, r6
 8047f96:	4283      	cmp	r3, r0
 8047f98:	4637      	mov	r7, r6
 8047f9a:	dc04      	bgt.n	8047fa6 <__swbuf_r+0x42>
 8047f9c:	4621      	mov	r1, r4
 8047f9e:	4628      	mov	r0, r5
 8047fa0:	f000 ffc2 	bl	8048f28 <_fflush_r>
 8047fa4:	bb30      	cbnz	r0, 8047ff4 <__swbuf_r+0x90>
 8047fa6:	68a3      	ldr	r3, [r4, #8]
 8047fa8:	3b01      	subs	r3, #1
 8047faa:	60a3      	str	r3, [r4, #8]
 8047fac:	6823      	ldr	r3, [r4, #0]
 8047fae:	1c5a      	adds	r2, r3, #1
 8047fb0:	6022      	str	r2, [r4, #0]
 8047fb2:	701e      	strb	r6, [r3, #0]
 8047fb4:	6963      	ldr	r3, [r4, #20]
 8047fb6:	3001      	adds	r0, #1
 8047fb8:	4283      	cmp	r3, r0
 8047fba:	d004      	beq.n	8047fc6 <__swbuf_r+0x62>
 8047fbc:	89a3      	ldrh	r3, [r4, #12]
 8047fbe:	07db      	lsls	r3, r3, #31
 8047fc0:	d506      	bpl.n	8047fd0 <__swbuf_r+0x6c>
 8047fc2:	2e0a      	cmp	r6, #10
 8047fc4:	d104      	bne.n	8047fd0 <__swbuf_r+0x6c>
 8047fc6:	4621      	mov	r1, r4
 8047fc8:	4628      	mov	r0, r5
 8047fca:	f000 ffad 	bl	8048f28 <_fflush_r>
 8047fce:	b988      	cbnz	r0, 8047ff4 <__swbuf_r+0x90>
 8047fd0:	4638      	mov	r0, r7
 8047fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8047fd4:	4b0a      	ldr	r3, [pc, #40]	; (8048000 <__swbuf_r+0x9c>)
 8047fd6:	429c      	cmp	r4, r3
 8047fd8:	d101      	bne.n	8047fde <__swbuf_r+0x7a>
 8047fda:	68ac      	ldr	r4, [r5, #8]
 8047fdc:	e7cf      	b.n	8047f7e <__swbuf_r+0x1a>
 8047fde:	4b09      	ldr	r3, [pc, #36]	; (8048004 <__swbuf_r+0xa0>)
 8047fe0:	429c      	cmp	r4, r3
 8047fe2:	bf08      	it	eq
 8047fe4:	68ec      	ldreq	r4, [r5, #12]
 8047fe6:	e7ca      	b.n	8047f7e <__swbuf_r+0x1a>
 8047fe8:	4621      	mov	r1, r4
 8047fea:	4628      	mov	r0, r5
 8047fec:	f000 f81e 	bl	804802c <__swsetup_r>
 8047ff0:	2800      	cmp	r0, #0
 8047ff2:	d0cb      	beq.n	8047f8c <__swbuf_r+0x28>
 8047ff4:	f04f 37ff 	mov.w	r7, #4294967295
 8047ff8:	e7ea      	b.n	8047fd0 <__swbuf_r+0x6c>
 8047ffa:	bf00      	nop
 8047ffc:	0804a174 	.word	0x0804a174
 8048000:	0804a194 	.word	0x0804a194
 8048004:	0804a154 	.word	0x0804a154

08048008 <_write_r>:
 8048008:	b538      	push	{r3, r4, r5, lr}
 804800a:	4d07      	ldr	r5, [pc, #28]	; (8048028 <_write_r+0x20>)
 804800c:	4604      	mov	r4, r0
 804800e:	4608      	mov	r0, r1
 8048010:	4611      	mov	r1, r2
 8048012:	2200      	movs	r2, #0
 8048014:	602a      	str	r2, [r5, #0]
 8048016:	461a      	mov	r2, r3
 8048018:	f7fa fb91 	bl	804273e <_write>
 804801c:	1c43      	adds	r3, r0, #1
 804801e:	d102      	bne.n	8048026 <_write_r+0x1e>
 8048020:	682b      	ldr	r3, [r5, #0]
 8048022:	b103      	cbz	r3, 8048026 <_write_r+0x1e>
 8048024:	6023      	str	r3, [r4, #0]
 8048026:	bd38      	pop	{r3, r4, r5, pc}
 8048028:	20004398 	.word	0x20004398

0804802c <__swsetup_r>:
 804802c:	4b32      	ldr	r3, [pc, #200]	; (80480f8 <__swsetup_r+0xcc>)
 804802e:	b570      	push	{r4, r5, r6, lr}
 8048030:	681d      	ldr	r5, [r3, #0]
 8048032:	4606      	mov	r6, r0
 8048034:	460c      	mov	r4, r1
 8048036:	b125      	cbz	r5, 8048042 <__swsetup_r+0x16>
 8048038:	69ab      	ldr	r3, [r5, #24]
 804803a:	b913      	cbnz	r3, 8048042 <__swsetup_r+0x16>
 804803c:	4628      	mov	r0, r5
 804803e:	f7ff f84b 	bl	80470d8 <__sinit>
 8048042:	4b2e      	ldr	r3, [pc, #184]	; (80480fc <__swsetup_r+0xd0>)
 8048044:	429c      	cmp	r4, r3
 8048046:	d10f      	bne.n	8048068 <__swsetup_r+0x3c>
 8048048:	686c      	ldr	r4, [r5, #4]
 804804a:	89a3      	ldrh	r3, [r4, #12]
 804804c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8048050:	0719      	lsls	r1, r3, #28
 8048052:	d42c      	bmi.n	80480ae <__swsetup_r+0x82>
 8048054:	06dd      	lsls	r5, r3, #27
 8048056:	d411      	bmi.n	804807c <__swsetup_r+0x50>
 8048058:	2309      	movs	r3, #9
 804805a:	6033      	str	r3, [r6, #0]
 804805c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8048060:	81a3      	strh	r3, [r4, #12]
 8048062:	f04f 30ff 	mov.w	r0, #4294967295
 8048066:	e03e      	b.n	80480e6 <__swsetup_r+0xba>
 8048068:	4b25      	ldr	r3, [pc, #148]	; (8048100 <__swsetup_r+0xd4>)
 804806a:	429c      	cmp	r4, r3
 804806c:	d101      	bne.n	8048072 <__swsetup_r+0x46>
 804806e:	68ac      	ldr	r4, [r5, #8]
 8048070:	e7eb      	b.n	804804a <__swsetup_r+0x1e>
 8048072:	4b24      	ldr	r3, [pc, #144]	; (8048104 <__swsetup_r+0xd8>)
 8048074:	429c      	cmp	r4, r3
 8048076:	bf08      	it	eq
 8048078:	68ec      	ldreq	r4, [r5, #12]
 804807a:	e7e6      	b.n	804804a <__swsetup_r+0x1e>
 804807c:	0758      	lsls	r0, r3, #29
 804807e:	d512      	bpl.n	80480a6 <__swsetup_r+0x7a>
 8048080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8048082:	b141      	cbz	r1, 8048096 <__swsetup_r+0x6a>
 8048084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8048088:	4299      	cmp	r1, r3
 804808a:	d002      	beq.n	8048092 <__swsetup_r+0x66>
 804808c:	4630      	mov	r0, r6
 804808e:	f001 fbb1 	bl	80497f4 <_free_r>
 8048092:	2300      	movs	r3, #0
 8048094:	6363      	str	r3, [r4, #52]	; 0x34
 8048096:	89a3      	ldrh	r3, [r4, #12]
 8048098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804809c:	81a3      	strh	r3, [r4, #12]
 804809e:	2300      	movs	r3, #0
 80480a0:	6063      	str	r3, [r4, #4]
 80480a2:	6923      	ldr	r3, [r4, #16]
 80480a4:	6023      	str	r3, [r4, #0]
 80480a6:	89a3      	ldrh	r3, [r4, #12]
 80480a8:	f043 0308 	orr.w	r3, r3, #8
 80480ac:	81a3      	strh	r3, [r4, #12]
 80480ae:	6923      	ldr	r3, [r4, #16]
 80480b0:	b94b      	cbnz	r3, 80480c6 <__swsetup_r+0x9a>
 80480b2:	89a3      	ldrh	r3, [r4, #12]
 80480b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80480b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80480bc:	d003      	beq.n	80480c6 <__swsetup_r+0x9a>
 80480be:	4621      	mov	r1, r4
 80480c0:	4630      	mov	r0, r6
 80480c2:	f000 ffa9 	bl	8049018 <__smakebuf_r>
 80480c6:	89a0      	ldrh	r0, [r4, #12]
 80480c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80480cc:	f010 0301 	ands.w	r3, r0, #1
 80480d0:	d00a      	beq.n	80480e8 <__swsetup_r+0xbc>
 80480d2:	2300      	movs	r3, #0
 80480d4:	60a3      	str	r3, [r4, #8]
 80480d6:	6963      	ldr	r3, [r4, #20]
 80480d8:	425b      	negs	r3, r3
 80480da:	61a3      	str	r3, [r4, #24]
 80480dc:	6923      	ldr	r3, [r4, #16]
 80480de:	b943      	cbnz	r3, 80480f2 <__swsetup_r+0xc6>
 80480e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80480e4:	d1ba      	bne.n	804805c <__swsetup_r+0x30>
 80480e6:	bd70      	pop	{r4, r5, r6, pc}
 80480e8:	0781      	lsls	r1, r0, #30
 80480ea:	bf58      	it	pl
 80480ec:	6963      	ldrpl	r3, [r4, #20]
 80480ee:	60a3      	str	r3, [r4, #8]
 80480f0:	e7f4      	b.n	80480dc <__swsetup_r+0xb0>
 80480f2:	2000      	movs	r0, #0
 80480f4:	e7f7      	b.n	80480e6 <__swsetup_r+0xba>
 80480f6:	bf00      	nop
 80480f8:	20000010 	.word	0x20000010
 80480fc:	0804a174 	.word	0x0804a174
 8048100:	0804a194 	.word	0x0804a194
 8048104:	0804a154 	.word	0x0804a154

08048108 <_close_r>:
 8048108:	b538      	push	{r3, r4, r5, lr}
 804810a:	4d06      	ldr	r5, [pc, #24]	; (8048124 <_close_r+0x1c>)
 804810c:	2300      	movs	r3, #0
 804810e:	4604      	mov	r4, r0
 8048110:	4608      	mov	r0, r1
 8048112:	602b      	str	r3, [r5, #0]
 8048114:	f7fa fb2f 	bl	8042776 <_close>
 8048118:	1c43      	adds	r3, r0, #1
 804811a:	d102      	bne.n	8048122 <_close_r+0x1a>
 804811c:	682b      	ldr	r3, [r5, #0]
 804811e:	b103      	cbz	r3, 8048122 <_close_r+0x1a>
 8048120:	6023      	str	r3, [r4, #0]
 8048122:	bd38      	pop	{r3, r4, r5, pc}
 8048124:	20004398 	.word	0x20004398

08048128 <quorem>:
 8048128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804812c:	6903      	ldr	r3, [r0, #16]
 804812e:	690c      	ldr	r4, [r1, #16]
 8048130:	42a3      	cmp	r3, r4
 8048132:	4607      	mov	r7, r0
 8048134:	f2c0 8081 	blt.w	804823a <quorem+0x112>
 8048138:	3c01      	subs	r4, #1
 804813a:	f101 0814 	add.w	r8, r1, #20
 804813e:	f100 0514 	add.w	r5, r0, #20
 8048142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8048146:	9301      	str	r3, [sp, #4]
 8048148:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 804814c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8048150:	3301      	adds	r3, #1
 8048152:	429a      	cmp	r2, r3
 8048154:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8048158:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 804815c:	fbb2 f6f3 	udiv	r6, r2, r3
 8048160:	d331      	bcc.n	80481c6 <quorem+0x9e>
 8048162:	f04f 0e00 	mov.w	lr, #0
 8048166:	4640      	mov	r0, r8
 8048168:	46ac      	mov	ip, r5
 804816a:	46f2      	mov	sl, lr
 804816c:	f850 2b04 	ldr.w	r2, [r0], #4
 8048170:	b293      	uxth	r3, r2
 8048172:	fb06 e303 	mla	r3, r6, r3, lr
 8048176:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 804817a:	b29b      	uxth	r3, r3
 804817c:	ebaa 0303 	sub.w	r3, sl, r3
 8048180:	f8dc a000 	ldr.w	sl, [ip]
 8048184:	0c12      	lsrs	r2, r2, #16
 8048186:	fa13 f38a 	uxtah	r3, r3, sl
 804818a:	fb06 e202 	mla	r2, r6, r2, lr
 804818e:	9300      	str	r3, [sp, #0]
 8048190:	9b00      	ldr	r3, [sp, #0]
 8048192:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8048196:	b292      	uxth	r2, r2
 8048198:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 804819c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80481a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80481a4:	4581      	cmp	r9, r0
 80481a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80481aa:	f84c 3b04 	str.w	r3, [ip], #4
 80481ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80481b2:	d2db      	bcs.n	804816c <quorem+0x44>
 80481b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80481b8:	b92b      	cbnz	r3, 80481c6 <quorem+0x9e>
 80481ba:	9b01      	ldr	r3, [sp, #4]
 80481bc:	3b04      	subs	r3, #4
 80481be:	429d      	cmp	r5, r3
 80481c0:	461a      	mov	r2, r3
 80481c2:	d32e      	bcc.n	8048222 <quorem+0xfa>
 80481c4:	613c      	str	r4, [r7, #16]
 80481c6:	4638      	mov	r0, r7
 80481c8:	f001 f9fc 	bl	80495c4 <__mcmp>
 80481cc:	2800      	cmp	r0, #0
 80481ce:	db24      	blt.n	804821a <quorem+0xf2>
 80481d0:	3601      	adds	r6, #1
 80481d2:	4628      	mov	r0, r5
 80481d4:	f04f 0c00 	mov.w	ip, #0
 80481d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80481dc:	f8d0 e000 	ldr.w	lr, [r0]
 80481e0:	b293      	uxth	r3, r2
 80481e2:	ebac 0303 	sub.w	r3, ip, r3
 80481e6:	0c12      	lsrs	r2, r2, #16
 80481e8:	fa13 f38e 	uxtah	r3, r3, lr
 80481ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80481f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80481f4:	b29b      	uxth	r3, r3
 80481f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80481fa:	45c1      	cmp	r9, r8
 80481fc:	f840 3b04 	str.w	r3, [r0], #4
 8048200:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8048204:	d2e8      	bcs.n	80481d8 <quorem+0xb0>
 8048206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 804820a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 804820e:	b922      	cbnz	r2, 804821a <quorem+0xf2>
 8048210:	3b04      	subs	r3, #4
 8048212:	429d      	cmp	r5, r3
 8048214:	461a      	mov	r2, r3
 8048216:	d30a      	bcc.n	804822e <quorem+0x106>
 8048218:	613c      	str	r4, [r7, #16]
 804821a:	4630      	mov	r0, r6
 804821c:	b003      	add	sp, #12
 804821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8048222:	6812      	ldr	r2, [r2, #0]
 8048224:	3b04      	subs	r3, #4
 8048226:	2a00      	cmp	r2, #0
 8048228:	d1cc      	bne.n	80481c4 <quorem+0x9c>
 804822a:	3c01      	subs	r4, #1
 804822c:	e7c7      	b.n	80481be <quorem+0x96>
 804822e:	6812      	ldr	r2, [r2, #0]
 8048230:	3b04      	subs	r3, #4
 8048232:	2a00      	cmp	r2, #0
 8048234:	d1f0      	bne.n	8048218 <quorem+0xf0>
 8048236:	3c01      	subs	r4, #1
 8048238:	e7eb      	b.n	8048212 <quorem+0xea>
 804823a:	2000      	movs	r0, #0
 804823c:	e7ee      	b.n	804821c <quorem+0xf4>
	...

08048240 <_dtoa_r>:
 8048240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048244:	ed2d 8b04 	vpush	{d8-d9}
 8048248:	ec57 6b10 	vmov	r6, r7, d0
 804824c:	b093      	sub	sp, #76	; 0x4c
 804824e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8048250:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8048254:	9106      	str	r1, [sp, #24]
 8048256:	ee10 aa10 	vmov	sl, s0
 804825a:	4604      	mov	r4, r0
 804825c:	9209      	str	r2, [sp, #36]	; 0x24
 804825e:	930c      	str	r3, [sp, #48]	; 0x30
 8048260:	46bb      	mov	fp, r7
 8048262:	b975      	cbnz	r5, 8048282 <_dtoa_r+0x42>
 8048264:	2010      	movs	r0, #16
 8048266:	f000 ff17 	bl	8049098 <malloc>
 804826a:	4602      	mov	r2, r0
 804826c:	6260      	str	r0, [r4, #36]	; 0x24
 804826e:	b920      	cbnz	r0, 804827a <_dtoa_r+0x3a>
 8048270:	4ba7      	ldr	r3, [pc, #668]	; (8048510 <_dtoa_r+0x2d0>)
 8048272:	21ea      	movs	r1, #234	; 0xea
 8048274:	48a7      	ldr	r0, [pc, #668]	; (8048514 <_dtoa_r+0x2d4>)
 8048276:	f001 fdd1 	bl	8049e1c <__assert_func>
 804827a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 804827e:	6005      	str	r5, [r0, #0]
 8048280:	60c5      	str	r5, [r0, #12]
 8048282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8048284:	6819      	ldr	r1, [r3, #0]
 8048286:	b151      	cbz	r1, 804829e <_dtoa_r+0x5e>
 8048288:	685a      	ldr	r2, [r3, #4]
 804828a:	604a      	str	r2, [r1, #4]
 804828c:	2301      	movs	r3, #1
 804828e:	4093      	lsls	r3, r2
 8048290:	608b      	str	r3, [r1, #8]
 8048292:	4620      	mov	r0, r4
 8048294:	f000 ff54 	bl	8049140 <_Bfree>
 8048298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804829a:	2200      	movs	r2, #0
 804829c:	601a      	str	r2, [r3, #0]
 804829e:	1e3b      	subs	r3, r7, #0
 80482a0:	bfaa      	itet	ge
 80482a2:	2300      	movge	r3, #0
 80482a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80482a8:	f8c8 3000 	strge.w	r3, [r8]
 80482ac:	4b9a      	ldr	r3, [pc, #616]	; (8048518 <_dtoa_r+0x2d8>)
 80482ae:	bfbc      	itt	lt
 80482b0:	2201      	movlt	r2, #1
 80482b2:	f8c8 2000 	strlt.w	r2, [r8]
 80482b6:	ea33 030b 	bics.w	r3, r3, fp
 80482ba:	d11b      	bne.n	80482f4 <_dtoa_r+0xb4>
 80482bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80482be:	f242 730f 	movw	r3, #9999	; 0x270f
 80482c2:	6013      	str	r3, [r2, #0]
 80482c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80482c8:	4333      	orrs	r3, r6
 80482ca:	f000 8592 	beq.w	8048df2 <_dtoa_r+0xbb2>
 80482ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80482d0:	b963      	cbnz	r3, 80482ec <_dtoa_r+0xac>
 80482d2:	4b92      	ldr	r3, [pc, #584]	; (804851c <_dtoa_r+0x2dc>)
 80482d4:	e022      	b.n	804831c <_dtoa_r+0xdc>
 80482d6:	4b92      	ldr	r3, [pc, #584]	; (8048520 <_dtoa_r+0x2e0>)
 80482d8:	9301      	str	r3, [sp, #4]
 80482da:	3308      	adds	r3, #8
 80482dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80482de:	6013      	str	r3, [r2, #0]
 80482e0:	9801      	ldr	r0, [sp, #4]
 80482e2:	b013      	add	sp, #76	; 0x4c
 80482e4:	ecbd 8b04 	vpop	{d8-d9}
 80482e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80482ec:	4b8b      	ldr	r3, [pc, #556]	; (804851c <_dtoa_r+0x2dc>)
 80482ee:	9301      	str	r3, [sp, #4]
 80482f0:	3303      	adds	r3, #3
 80482f2:	e7f3      	b.n	80482dc <_dtoa_r+0x9c>
 80482f4:	2200      	movs	r2, #0
 80482f6:	2300      	movs	r3, #0
 80482f8:	4650      	mov	r0, sl
 80482fa:	4659      	mov	r1, fp
 80482fc:	f7f8 fbec 	bl	8040ad8 <__aeabi_dcmpeq>
 8048300:	ec4b ab19 	vmov	d9, sl, fp
 8048304:	4680      	mov	r8, r0
 8048306:	b158      	cbz	r0, 8048320 <_dtoa_r+0xe0>
 8048308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804830a:	2301      	movs	r3, #1
 804830c:	6013      	str	r3, [r2, #0]
 804830e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8048310:	2b00      	cmp	r3, #0
 8048312:	f000 856b 	beq.w	8048dec <_dtoa_r+0xbac>
 8048316:	4883      	ldr	r0, [pc, #524]	; (8048524 <_dtoa_r+0x2e4>)
 8048318:	6018      	str	r0, [r3, #0]
 804831a:	1e43      	subs	r3, r0, #1
 804831c:	9301      	str	r3, [sp, #4]
 804831e:	e7df      	b.n	80482e0 <_dtoa_r+0xa0>
 8048320:	ec4b ab10 	vmov	d0, sl, fp
 8048324:	aa10      	add	r2, sp, #64	; 0x40
 8048326:	a911      	add	r1, sp, #68	; 0x44
 8048328:	4620      	mov	r0, r4
 804832a:	f001 f9f1 	bl	8049710 <__d2b>
 804832e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8048332:	ee08 0a10 	vmov	s16, r0
 8048336:	2d00      	cmp	r5, #0
 8048338:	f000 8084 	beq.w	8048444 <_dtoa_r+0x204>
 804833c:	ee19 3a90 	vmov	r3, s19
 8048340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8048344:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8048348:	4656      	mov	r6, sl
 804834a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 804834e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8048352:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8048356:	4b74      	ldr	r3, [pc, #464]	; (8048528 <_dtoa_r+0x2e8>)
 8048358:	2200      	movs	r2, #0
 804835a:	4630      	mov	r0, r6
 804835c:	4639      	mov	r1, r7
 804835e:	f7f7 ff9b 	bl	8040298 <__aeabi_dsub>
 8048362:	a365      	add	r3, pc, #404	; (adr r3, 80484f8 <_dtoa_r+0x2b8>)
 8048364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048368:	f7f8 f94e 	bl	8040608 <__aeabi_dmul>
 804836c:	a364      	add	r3, pc, #400	; (adr r3, 8048500 <_dtoa_r+0x2c0>)
 804836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048372:	f7f7 ff93 	bl	804029c <__adddf3>
 8048376:	4606      	mov	r6, r0
 8048378:	4628      	mov	r0, r5
 804837a:	460f      	mov	r7, r1
 804837c:	f7f8 f8da 	bl	8040534 <__aeabi_i2d>
 8048380:	a361      	add	r3, pc, #388	; (adr r3, 8048508 <_dtoa_r+0x2c8>)
 8048382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048386:	f7f8 f93f 	bl	8040608 <__aeabi_dmul>
 804838a:	4602      	mov	r2, r0
 804838c:	460b      	mov	r3, r1
 804838e:	4630      	mov	r0, r6
 8048390:	4639      	mov	r1, r7
 8048392:	f7f7 ff83 	bl	804029c <__adddf3>
 8048396:	4606      	mov	r6, r0
 8048398:	460f      	mov	r7, r1
 804839a:	f7f8 fbe5 	bl	8040b68 <__aeabi_d2iz>
 804839e:	2200      	movs	r2, #0
 80483a0:	9000      	str	r0, [sp, #0]
 80483a2:	2300      	movs	r3, #0
 80483a4:	4630      	mov	r0, r6
 80483a6:	4639      	mov	r1, r7
 80483a8:	f7f8 fba0 	bl	8040aec <__aeabi_dcmplt>
 80483ac:	b150      	cbz	r0, 80483c4 <_dtoa_r+0x184>
 80483ae:	9800      	ldr	r0, [sp, #0]
 80483b0:	f7f8 f8c0 	bl	8040534 <__aeabi_i2d>
 80483b4:	4632      	mov	r2, r6
 80483b6:	463b      	mov	r3, r7
 80483b8:	f7f8 fb8e 	bl	8040ad8 <__aeabi_dcmpeq>
 80483bc:	b910      	cbnz	r0, 80483c4 <_dtoa_r+0x184>
 80483be:	9b00      	ldr	r3, [sp, #0]
 80483c0:	3b01      	subs	r3, #1
 80483c2:	9300      	str	r3, [sp, #0]
 80483c4:	9b00      	ldr	r3, [sp, #0]
 80483c6:	2b16      	cmp	r3, #22
 80483c8:	d85a      	bhi.n	8048480 <_dtoa_r+0x240>
 80483ca:	9a00      	ldr	r2, [sp, #0]
 80483cc:	4b57      	ldr	r3, [pc, #348]	; (804852c <_dtoa_r+0x2ec>)
 80483ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80483d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80483d6:	ec51 0b19 	vmov	r0, r1, d9
 80483da:	f7f8 fb87 	bl	8040aec <__aeabi_dcmplt>
 80483de:	2800      	cmp	r0, #0
 80483e0:	d050      	beq.n	8048484 <_dtoa_r+0x244>
 80483e2:	9b00      	ldr	r3, [sp, #0]
 80483e4:	3b01      	subs	r3, #1
 80483e6:	9300      	str	r3, [sp, #0]
 80483e8:	2300      	movs	r3, #0
 80483ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80483ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80483ee:	1b5d      	subs	r5, r3, r5
 80483f0:	1e6b      	subs	r3, r5, #1
 80483f2:	9305      	str	r3, [sp, #20]
 80483f4:	bf45      	ittet	mi
 80483f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80483fa:	9304      	strmi	r3, [sp, #16]
 80483fc:	2300      	movpl	r3, #0
 80483fe:	2300      	movmi	r3, #0
 8048400:	bf4c      	ite	mi
 8048402:	9305      	strmi	r3, [sp, #20]
 8048404:	9304      	strpl	r3, [sp, #16]
 8048406:	9b00      	ldr	r3, [sp, #0]
 8048408:	2b00      	cmp	r3, #0
 804840a:	db3d      	blt.n	8048488 <_dtoa_r+0x248>
 804840c:	9b05      	ldr	r3, [sp, #20]
 804840e:	9a00      	ldr	r2, [sp, #0]
 8048410:	920a      	str	r2, [sp, #40]	; 0x28
 8048412:	4413      	add	r3, r2
 8048414:	9305      	str	r3, [sp, #20]
 8048416:	2300      	movs	r3, #0
 8048418:	9307      	str	r3, [sp, #28]
 804841a:	9b06      	ldr	r3, [sp, #24]
 804841c:	2b09      	cmp	r3, #9
 804841e:	f200 8089 	bhi.w	8048534 <_dtoa_r+0x2f4>
 8048422:	2b05      	cmp	r3, #5
 8048424:	bfc4      	itt	gt
 8048426:	3b04      	subgt	r3, #4
 8048428:	9306      	strgt	r3, [sp, #24]
 804842a:	9b06      	ldr	r3, [sp, #24]
 804842c:	f1a3 0302 	sub.w	r3, r3, #2
 8048430:	bfcc      	ite	gt
 8048432:	2500      	movgt	r5, #0
 8048434:	2501      	movle	r5, #1
 8048436:	2b03      	cmp	r3, #3
 8048438:	f200 8087 	bhi.w	804854a <_dtoa_r+0x30a>
 804843c:	e8df f003 	tbb	[pc, r3]
 8048440:	59383a2d 	.word	0x59383a2d
 8048444:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8048448:	441d      	add	r5, r3
 804844a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 804844e:	2b20      	cmp	r3, #32
 8048450:	bfc1      	itttt	gt
 8048452:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8048456:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 804845a:	fa0b f303 	lslgt.w	r3, fp, r3
 804845e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8048462:	bfda      	itte	le
 8048464:	f1c3 0320 	rsble	r3, r3, #32
 8048468:	fa06 f003 	lslle.w	r0, r6, r3
 804846c:	4318      	orrgt	r0, r3
 804846e:	f7f8 f851 	bl	8040514 <__aeabi_ui2d>
 8048472:	2301      	movs	r3, #1
 8048474:	4606      	mov	r6, r0
 8048476:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 804847a:	3d01      	subs	r5, #1
 804847c:	930e      	str	r3, [sp, #56]	; 0x38
 804847e:	e76a      	b.n	8048356 <_dtoa_r+0x116>
 8048480:	2301      	movs	r3, #1
 8048482:	e7b2      	b.n	80483ea <_dtoa_r+0x1aa>
 8048484:	900b      	str	r0, [sp, #44]	; 0x2c
 8048486:	e7b1      	b.n	80483ec <_dtoa_r+0x1ac>
 8048488:	9b04      	ldr	r3, [sp, #16]
 804848a:	9a00      	ldr	r2, [sp, #0]
 804848c:	1a9b      	subs	r3, r3, r2
 804848e:	9304      	str	r3, [sp, #16]
 8048490:	4253      	negs	r3, r2
 8048492:	9307      	str	r3, [sp, #28]
 8048494:	2300      	movs	r3, #0
 8048496:	930a      	str	r3, [sp, #40]	; 0x28
 8048498:	e7bf      	b.n	804841a <_dtoa_r+0x1da>
 804849a:	2300      	movs	r3, #0
 804849c:	9308      	str	r3, [sp, #32]
 804849e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80484a0:	2b00      	cmp	r3, #0
 80484a2:	dc55      	bgt.n	8048550 <_dtoa_r+0x310>
 80484a4:	2301      	movs	r3, #1
 80484a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80484aa:	461a      	mov	r2, r3
 80484ac:	9209      	str	r2, [sp, #36]	; 0x24
 80484ae:	e00c      	b.n	80484ca <_dtoa_r+0x28a>
 80484b0:	2301      	movs	r3, #1
 80484b2:	e7f3      	b.n	804849c <_dtoa_r+0x25c>
 80484b4:	2300      	movs	r3, #0
 80484b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80484b8:	9308      	str	r3, [sp, #32]
 80484ba:	9b00      	ldr	r3, [sp, #0]
 80484bc:	4413      	add	r3, r2
 80484be:	9302      	str	r3, [sp, #8]
 80484c0:	3301      	adds	r3, #1
 80484c2:	2b01      	cmp	r3, #1
 80484c4:	9303      	str	r3, [sp, #12]
 80484c6:	bfb8      	it	lt
 80484c8:	2301      	movlt	r3, #1
 80484ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80484cc:	2200      	movs	r2, #0
 80484ce:	6042      	str	r2, [r0, #4]
 80484d0:	2204      	movs	r2, #4
 80484d2:	f102 0614 	add.w	r6, r2, #20
 80484d6:	429e      	cmp	r6, r3
 80484d8:	6841      	ldr	r1, [r0, #4]
 80484da:	d93d      	bls.n	8048558 <_dtoa_r+0x318>
 80484dc:	4620      	mov	r0, r4
 80484de:	f000 fdef 	bl	80490c0 <_Balloc>
 80484e2:	9001      	str	r0, [sp, #4]
 80484e4:	2800      	cmp	r0, #0
 80484e6:	d13b      	bne.n	8048560 <_dtoa_r+0x320>
 80484e8:	4b11      	ldr	r3, [pc, #68]	; (8048530 <_dtoa_r+0x2f0>)
 80484ea:	4602      	mov	r2, r0
 80484ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80484f0:	e6c0      	b.n	8048274 <_dtoa_r+0x34>
 80484f2:	2301      	movs	r3, #1
 80484f4:	e7df      	b.n	80484b6 <_dtoa_r+0x276>
 80484f6:	bf00      	nop
 80484f8:	636f4361 	.word	0x636f4361
 80484fc:	3fd287a7 	.word	0x3fd287a7
 8048500:	8b60c8b3 	.word	0x8b60c8b3
 8048504:	3fc68a28 	.word	0x3fc68a28
 8048508:	509f79fb 	.word	0x509f79fb
 804850c:	3fd34413 	.word	0x3fd34413
 8048510:	0804a1f9 	.word	0x0804a1f9
 8048514:	0804a210 	.word	0x0804a210
 8048518:	7ff00000 	.word	0x7ff00000
 804851c:	0804a1f5 	.word	0x0804a1f5
 8048520:	0804a1ec 	.word	0x0804a1ec
 8048524:	0804a1c9 	.word	0x0804a1c9
 8048528:	3ff80000 	.word	0x3ff80000
 804852c:	0804a300 	.word	0x0804a300
 8048530:	0804a26b 	.word	0x0804a26b
 8048534:	2501      	movs	r5, #1
 8048536:	2300      	movs	r3, #0
 8048538:	9306      	str	r3, [sp, #24]
 804853a:	9508      	str	r5, [sp, #32]
 804853c:	f04f 33ff 	mov.w	r3, #4294967295
 8048540:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8048544:	2200      	movs	r2, #0
 8048546:	2312      	movs	r3, #18
 8048548:	e7b0      	b.n	80484ac <_dtoa_r+0x26c>
 804854a:	2301      	movs	r3, #1
 804854c:	9308      	str	r3, [sp, #32]
 804854e:	e7f5      	b.n	804853c <_dtoa_r+0x2fc>
 8048550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048552:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8048556:	e7b8      	b.n	80484ca <_dtoa_r+0x28a>
 8048558:	3101      	adds	r1, #1
 804855a:	6041      	str	r1, [r0, #4]
 804855c:	0052      	lsls	r2, r2, #1
 804855e:	e7b8      	b.n	80484d2 <_dtoa_r+0x292>
 8048560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8048562:	9a01      	ldr	r2, [sp, #4]
 8048564:	601a      	str	r2, [r3, #0]
 8048566:	9b03      	ldr	r3, [sp, #12]
 8048568:	2b0e      	cmp	r3, #14
 804856a:	f200 809d 	bhi.w	80486a8 <_dtoa_r+0x468>
 804856e:	2d00      	cmp	r5, #0
 8048570:	f000 809a 	beq.w	80486a8 <_dtoa_r+0x468>
 8048574:	9b00      	ldr	r3, [sp, #0]
 8048576:	2b00      	cmp	r3, #0
 8048578:	dd32      	ble.n	80485e0 <_dtoa_r+0x3a0>
 804857a:	4ab7      	ldr	r2, [pc, #732]	; (8048858 <_dtoa_r+0x618>)
 804857c:	f003 030f 	and.w	r3, r3, #15
 8048580:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8048584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8048588:	9b00      	ldr	r3, [sp, #0]
 804858a:	05d8      	lsls	r0, r3, #23
 804858c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8048590:	d516      	bpl.n	80485c0 <_dtoa_r+0x380>
 8048592:	4bb2      	ldr	r3, [pc, #712]	; (804885c <_dtoa_r+0x61c>)
 8048594:	ec51 0b19 	vmov	r0, r1, d9
 8048598:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 804859c:	f7f8 f95e 	bl	804085c <__aeabi_ddiv>
 80485a0:	f007 070f 	and.w	r7, r7, #15
 80485a4:	4682      	mov	sl, r0
 80485a6:	468b      	mov	fp, r1
 80485a8:	2503      	movs	r5, #3
 80485aa:	4eac      	ldr	r6, [pc, #688]	; (804885c <_dtoa_r+0x61c>)
 80485ac:	b957      	cbnz	r7, 80485c4 <_dtoa_r+0x384>
 80485ae:	4642      	mov	r2, r8
 80485b0:	464b      	mov	r3, r9
 80485b2:	4650      	mov	r0, sl
 80485b4:	4659      	mov	r1, fp
 80485b6:	f7f8 f951 	bl	804085c <__aeabi_ddiv>
 80485ba:	4682      	mov	sl, r0
 80485bc:	468b      	mov	fp, r1
 80485be:	e028      	b.n	8048612 <_dtoa_r+0x3d2>
 80485c0:	2502      	movs	r5, #2
 80485c2:	e7f2      	b.n	80485aa <_dtoa_r+0x36a>
 80485c4:	07f9      	lsls	r1, r7, #31
 80485c6:	d508      	bpl.n	80485da <_dtoa_r+0x39a>
 80485c8:	4640      	mov	r0, r8
 80485ca:	4649      	mov	r1, r9
 80485cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80485d0:	f7f8 f81a 	bl	8040608 <__aeabi_dmul>
 80485d4:	3501      	adds	r5, #1
 80485d6:	4680      	mov	r8, r0
 80485d8:	4689      	mov	r9, r1
 80485da:	107f      	asrs	r7, r7, #1
 80485dc:	3608      	adds	r6, #8
 80485de:	e7e5      	b.n	80485ac <_dtoa_r+0x36c>
 80485e0:	f000 809b 	beq.w	804871a <_dtoa_r+0x4da>
 80485e4:	9b00      	ldr	r3, [sp, #0]
 80485e6:	4f9d      	ldr	r7, [pc, #628]	; (804885c <_dtoa_r+0x61c>)
 80485e8:	425e      	negs	r6, r3
 80485ea:	4b9b      	ldr	r3, [pc, #620]	; (8048858 <_dtoa_r+0x618>)
 80485ec:	f006 020f 	and.w	r2, r6, #15
 80485f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80485f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80485f8:	ec51 0b19 	vmov	r0, r1, d9
 80485fc:	f7f8 f804 	bl	8040608 <__aeabi_dmul>
 8048600:	1136      	asrs	r6, r6, #4
 8048602:	4682      	mov	sl, r0
 8048604:	468b      	mov	fp, r1
 8048606:	2300      	movs	r3, #0
 8048608:	2502      	movs	r5, #2
 804860a:	2e00      	cmp	r6, #0
 804860c:	d17a      	bne.n	8048704 <_dtoa_r+0x4c4>
 804860e:	2b00      	cmp	r3, #0
 8048610:	d1d3      	bne.n	80485ba <_dtoa_r+0x37a>
 8048612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8048614:	2b00      	cmp	r3, #0
 8048616:	f000 8082 	beq.w	804871e <_dtoa_r+0x4de>
 804861a:	4b91      	ldr	r3, [pc, #580]	; (8048860 <_dtoa_r+0x620>)
 804861c:	2200      	movs	r2, #0
 804861e:	4650      	mov	r0, sl
 8048620:	4659      	mov	r1, fp
 8048622:	f7f8 fa63 	bl	8040aec <__aeabi_dcmplt>
 8048626:	2800      	cmp	r0, #0
 8048628:	d079      	beq.n	804871e <_dtoa_r+0x4de>
 804862a:	9b03      	ldr	r3, [sp, #12]
 804862c:	2b00      	cmp	r3, #0
 804862e:	d076      	beq.n	804871e <_dtoa_r+0x4de>
 8048630:	9b02      	ldr	r3, [sp, #8]
 8048632:	2b00      	cmp	r3, #0
 8048634:	dd36      	ble.n	80486a4 <_dtoa_r+0x464>
 8048636:	9b00      	ldr	r3, [sp, #0]
 8048638:	4650      	mov	r0, sl
 804863a:	4659      	mov	r1, fp
 804863c:	1e5f      	subs	r7, r3, #1
 804863e:	2200      	movs	r2, #0
 8048640:	4b88      	ldr	r3, [pc, #544]	; (8048864 <_dtoa_r+0x624>)
 8048642:	f7f7 ffe1 	bl	8040608 <__aeabi_dmul>
 8048646:	9e02      	ldr	r6, [sp, #8]
 8048648:	4682      	mov	sl, r0
 804864a:	468b      	mov	fp, r1
 804864c:	3501      	adds	r5, #1
 804864e:	4628      	mov	r0, r5
 8048650:	f7f7 ff70 	bl	8040534 <__aeabi_i2d>
 8048654:	4652      	mov	r2, sl
 8048656:	465b      	mov	r3, fp
 8048658:	f7f7 ffd6 	bl	8040608 <__aeabi_dmul>
 804865c:	4b82      	ldr	r3, [pc, #520]	; (8048868 <_dtoa_r+0x628>)
 804865e:	2200      	movs	r2, #0
 8048660:	f7f7 fe1c 	bl	804029c <__adddf3>
 8048664:	46d0      	mov	r8, sl
 8048666:	46d9      	mov	r9, fp
 8048668:	4682      	mov	sl, r0
 804866a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 804866e:	2e00      	cmp	r6, #0
 8048670:	d158      	bne.n	8048724 <_dtoa_r+0x4e4>
 8048672:	4b7e      	ldr	r3, [pc, #504]	; (804886c <_dtoa_r+0x62c>)
 8048674:	2200      	movs	r2, #0
 8048676:	4640      	mov	r0, r8
 8048678:	4649      	mov	r1, r9
 804867a:	f7f7 fe0d 	bl	8040298 <__aeabi_dsub>
 804867e:	4652      	mov	r2, sl
 8048680:	465b      	mov	r3, fp
 8048682:	4680      	mov	r8, r0
 8048684:	4689      	mov	r9, r1
 8048686:	f7f8 fa4f 	bl	8040b28 <__aeabi_dcmpgt>
 804868a:	2800      	cmp	r0, #0
 804868c:	f040 8295 	bne.w	8048bba <_dtoa_r+0x97a>
 8048690:	4652      	mov	r2, sl
 8048692:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8048696:	4640      	mov	r0, r8
 8048698:	4649      	mov	r1, r9
 804869a:	f7f8 fa27 	bl	8040aec <__aeabi_dcmplt>
 804869e:	2800      	cmp	r0, #0
 80486a0:	f040 8289 	bne.w	8048bb6 <_dtoa_r+0x976>
 80486a4:	ec5b ab19 	vmov	sl, fp, d9
 80486a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80486aa:	2b00      	cmp	r3, #0
 80486ac:	f2c0 8148 	blt.w	8048940 <_dtoa_r+0x700>
 80486b0:	9a00      	ldr	r2, [sp, #0]
 80486b2:	2a0e      	cmp	r2, #14
 80486b4:	f300 8144 	bgt.w	8048940 <_dtoa_r+0x700>
 80486b8:	4b67      	ldr	r3, [pc, #412]	; (8048858 <_dtoa_r+0x618>)
 80486ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80486be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80486c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80486c4:	2b00      	cmp	r3, #0
 80486c6:	f280 80d5 	bge.w	8048874 <_dtoa_r+0x634>
 80486ca:	9b03      	ldr	r3, [sp, #12]
 80486cc:	2b00      	cmp	r3, #0
 80486ce:	f300 80d1 	bgt.w	8048874 <_dtoa_r+0x634>
 80486d2:	f040 826f 	bne.w	8048bb4 <_dtoa_r+0x974>
 80486d6:	4b65      	ldr	r3, [pc, #404]	; (804886c <_dtoa_r+0x62c>)
 80486d8:	2200      	movs	r2, #0
 80486da:	4640      	mov	r0, r8
 80486dc:	4649      	mov	r1, r9
 80486de:	f7f7 ff93 	bl	8040608 <__aeabi_dmul>
 80486e2:	4652      	mov	r2, sl
 80486e4:	465b      	mov	r3, fp
 80486e6:	f7f8 fa15 	bl	8040b14 <__aeabi_dcmpge>
 80486ea:	9e03      	ldr	r6, [sp, #12]
 80486ec:	4637      	mov	r7, r6
 80486ee:	2800      	cmp	r0, #0
 80486f0:	f040 8245 	bne.w	8048b7e <_dtoa_r+0x93e>
 80486f4:	9d01      	ldr	r5, [sp, #4]
 80486f6:	2331      	movs	r3, #49	; 0x31
 80486f8:	f805 3b01 	strb.w	r3, [r5], #1
 80486fc:	9b00      	ldr	r3, [sp, #0]
 80486fe:	3301      	adds	r3, #1
 8048700:	9300      	str	r3, [sp, #0]
 8048702:	e240      	b.n	8048b86 <_dtoa_r+0x946>
 8048704:	07f2      	lsls	r2, r6, #31
 8048706:	d505      	bpl.n	8048714 <_dtoa_r+0x4d4>
 8048708:	e9d7 2300 	ldrd	r2, r3, [r7]
 804870c:	f7f7 ff7c 	bl	8040608 <__aeabi_dmul>
 8048710:	3501      	adds	r5, #1
 8048712:	2301      	movs	r3, #1
 8048714:	1076      	asrs	r6, r6, #1
 8048716:	3708      	adds	r7, #8
 8048718:	e777      	b.n	804860a <_dtoa_r+0x3ca>
 804871a:	2502      	movs	r5, #2
 804871c:	e779      	b.n	8048612 <_dtoa_r+0x3d2>
 804871e:	9f00      	ldr	r7, [sp, #0]
 8048720:	9e03      	ldr	r6, [sp, #12]
 8048722:	e794      	b.n	804864e <_dtoa_r+0x40e>
 8048724:	9901      	ldr	r1, [sp, #4]
 8048726:	4b4c      	ldr	r3, [pc, #304]	; (8048858 <_dtoa_r+0x618>)
 8048728:	4431      	add	r1, r6
 804872a:	910d      	str	r1, [sp, #52]	; 0x34
 804872c:	9908      	ldr	r1, [sp, #32]
 804872e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8048732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8048736:	2900      	cmp	r1, #0
 8048738:	d043      	beq.n	80487c2 <_dtoa_r+0x582>
 804873a:	494d      	ldr	r1, [pc, #308]	; (8048870 <_dtoa_r+0x630>)
 804873c:	2000      	movs	r0, #0
 804873e:	f7f8 f88d 	bl	804085c <__aeabi_ddiv>
 8048742:	4652      	mov	r2, sl
 8048744:	465b      	mov	r3, fp
 8048746:	f7f7 fda7 	bl	8040298 <__aeabi_dsub>
 804874a:	9d01      	ldr	r5, [sp, #4]
 804874c:	4682      	mov	sl, r0
 804874e:	468b      	mov	fp, r1
 8048750:	4649      	mov	r1, r9
 8048752:	4640      	mov	r0, r8
 8048754:	f7f8 fa08 	bl	8040b68 <__aeabi_d2iz>
 8048758:	4606      	mov	r6, r0
 804875a:	f7f7 feeb 	bl	8040534 <__aeabi_i2d>
 804875e:	4602      	mov	r2, r0
 8048760:	460b      	mov	r3, r1
 8048762:	4640      	mov	r0, r8
 8048764:	4649      	mov	r1, r9
 8048766:	f7f7 fd97 	bl	8040298 <__aeabi_dsub>
 804876a:	3630      	adds	r6, #48	; 0x30
 804876c:	f805 6b01 	strb.w	r6, [r5], #1
 8048770:	4652      	mov	r2, sl
 8048772:	465b      	mov	r3, fp
 8048774:	4680      	mov	r8, r0
 8048776:	4689      	mov	r9, r1
 8048778:	f7f8 f9b8 	bl	8040aec <__aeabi_dcmplt>
 804877c:	2800      	cmp	r0, #0
 804877e:	d163      	bne.n	8048848 <_dtoa_r+0x608>
 8048780:	4642      	mov	r2, r8
 8048782:	464b      	mov	r3, r9
 8048784:	4936      	ldr	r1, [pc, #216]	; (8048860 <_dtoa_r+0x620>)
 8048786:	2000      	movs	r0, #0
 8048788:	f7f7 fd86 	bl	8040298 <__aeabi_dsub>
 804878c:	4652      	mov	r2, sl
 804878e:	465b      	mov	r3, fp
 8048790:	f7f8 f9ac 	bl	8040aec <__aeabi_dcmplt>
 8048794:	2800      	cmp	r0, #0
 8048796:	f040 80b5 	bne.w	8048904 <_dtoa_r+0x6c4>
 804879a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804879c:	429d      	cmp	r5, r3
 804879e:	d081      	beq.n	80486a4 <_dtoa_r+0x464>
 80487a0:	4b30      	ldr	r3, [pc, #192]	; (8048864 <_dtoa_r+0x624>)
 80487a2:	2200      	movs	r2, #0
 80487a4:	4650      	mov	r0, sl
 80487a6:	4659      	mov	r1, fp
 80487a8:	f7f7 ff2e 	bl	8040608 <__aeabi_dmul>
 80487ac:	4b2d      	ldr	r3, [pc, #180]	; (8048864 <_dtoa_r+0x624>)
 80487ae:	4682      	mov	sl, r0
 80487b0:	468b      	mov	fp, r1
 80487b2:	4640      	mov	r0, r8
 80487b4:	4649      	mov	r1, r9
 80487b6:	2200      	movs	r2, #0
 80487b8:	f7f7 ff26 	bl	8040608 <__aeabi_dmul>
 80487bc:	4680      	mov	r8, r0
 80487be:	4689      	mov	r9, r1
 80487c0:	e7c6      	b.n	8048750 <_dtoa_r+0x510>
 80487c2:	4650      	mov	r0, sl
 80487c4:	4659      	mov	r1, fp
 80487c6:	f7f7 ff1f 	bl	8040608 <__aeabi_dmul>
 80487ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80487cc:	9d01      	ldr	r5, [sp, #4]
 80487ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80487d0:	4682      	mov	sl, r0
 80487d2:	468b      	mov	fp, r1
 80487d4:	4649      	mov	r1, r9
 80487d6:	4640      	mov	r0, r8
 80487d8:	f7f8 f9c6 	bl	8040b68 <__aeabi_d2iz>
 80487dc:	4606      	mov	r6, r0
 80487de:	f7f7 fea9 	bl	8040534 <__aeabi_i2d>
 80487e2:	3630      	adds	r6, #48	; 0x30
 80487e4:	4602      	mov	r2, r0
 80487e6:	460b      	mov	r3, r1
 80487e8:	4640      	mov	r0, r8
 80487ea:	4649      	mov	r1, r9
 80487ec:	f7f7 fd54 	bl	8040298 <__aeabi_dsub>
 80487f0:	f805 6b01 	strb.w	r6, [r5], #1
 80487f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80487f6:	429d      	cmp	r5, r3
 80487f8:	4680      	mov	r8, r0
 80487fa:	4689      	mov	r9, r1
 80487fc:	f04f 0200 	mov.w	r2, #0
 8048800:	d124      	bne.n	804884c <_dtoa_r+0x60c>
 8048802:	4b1b      	ldr	r3, [pc, #108]	; (8048870 <_dtoa_r+0x630>)
 8048804:	4650      	mov	r0, sl
 8048806:	4659      	mov	r1, fp
 8048808:	f7f7 fd48 	bl	804029c <__adddf3>
 804880c:	4602      	mov	r2, r0
 804880e:	460b      	mov	r3, r1
 8048810:	4640      	mov	r0, r8
 8048812:	4649      	mov	r1, r9
 8048814:	f7f8 f988 	bl	8040b28 <__aeabi_dcmpgt>
 8048818:	2800      	cmp	r0, #0
 804881a:	d173      	bne.n	8048904 <_dtoa_r+0x6c4>
 804881c:	4652      	mov	r2, sl
 804881e:	465b      	mov	r3, fp
 8048820:	4913      	ldr	r1, [pc, #76]	; (8048870 <_dtoa_r+0x630>)
 8048822:	2000      	movs	r0, #0
 8048824:	f7f7 fd38 	bl	8040298 <__aeabi_dsub>
 8048828:	4602      	mov	r2, r0
 804882a:	460b      	mov	r3, r1
 804882c:	4640      	mov	r0, r8
 804882e:	4649      	mov	r1, r9
 8048830:	f7f8 f95c 	bl	8040aec <__aeabi_dcmplt>
 8048834:	2800      	cmp	r0, #0
 8048836:	f43f af35 	beq.w	80486a4 <_dtoa_r+0x464>
 804883a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 804883c:	1e6b      	subs	r3, r5, #1
 804883e:	930f      	str	r3, [sp, #60]	; 0x3c
 8048840:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8048844:	2b30      	cmp	r3, #48	; 0x30
 8048846:	d0f8      	beq.n	804883a <_dtoa_r+0x5fa>
 8048848:	9700      	str	r7, [sp, #0]
 804884a:	e049      	b.n	80488e0 <_dtoa_r+0x6a0>
 804884c:	4b05      	ldr	r3, [pc, #20]	; (8048864 <_dtoa_r+0x624>)
 804884e:	f7f7 fedb 	bl	8040608 <__aeabi_dmul>
 8048852:	4680      	mov	r8, r0
 8048854:	4689      	mov	r9, r1
 8048856:	e7bd      	b.n	80487d4 <_dtoa_r+0x594>
 8048858:	0804a300 	.word	0x0804a300
 804885c:	0804a2d8 	.word	0x0804a2d8
 8048860:	3ff00000 	.word	0x3ff00000
 8048864:	40240000 	.word	0x40240000
 8048868:	401c0000 	.word	0x401c0000
 804886c:	40140000 	.word	0x40140000
 8048870:	3fe00000 	.word	0x3fe00000
 8048874:	9d01      	ldr	r5, [sp, #4]
 8048876:	4656      	mov	r6, sl
 8048878:	465f      	mov	r7, fp
 804887a:	4642      	mov	r2, r8
 804887c:	464b      	mov	r3, r9
 804887e:	4630      	mov	r0, r6
 8048880:	4639      	mov	r1, r7
 8048882:	f7f7 ffeb 	bl	804085c <__aeabi_ddiv>
 8048886:	f7f8 f96f 	bl	8040b68 <__aeabi_d2iz>
 804888a:	4682      	mov	sl, r0
 804888c:	f7f7 fe52 	bl	8040534 <__aeabi_i2d>
 8048890:	4642      	mov	r2, r8
 8048892:	464b      	mov	r3, r9
 8048894:	f7f7 feb8 	bl	8040608 <__aeabi_dmul>
 8048898:	4602      	mov	r2, r0
 804889a:	460b      	mov	r3, r1
 804889c:	4630      	mov	r0, r6
 804889e:	4639      	mov	r1, r7
 80488a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80488a4:	f7f7 fcf8 	bl	8040298 <__aeabi_dsub>
 80488a8:	f805 6b01 	strb.w	r6, [r5], #1
 80488ac:	9e01      	ldr	r6, [sp, #4]
 80488ae:	9f03      	ldr	r7, [sp, #12]
 80488b0:	1bae      	subs	r6, r5, r6
 80488b2:	42b7      	cmp	r7, r6
 80488b4:	4602      	mov	r2, r0
 80488b6:	460b      	mov	r3, r1
 80488b8:	d135      	bne.n	8048926 <_dtoa_r+0x6e6>
 80488ba:	f7f7 fcef 	bl	804029c <__adddf3>
 80488be:	4642      	mov	r2, r8
 80488c0:	464b      	mov	r3, r9
 80488c2:	4606      	mov	r6, r0
 80488c4:	460f      	mov	r7, r1
 80488c6:	f7f8 f92f 	bl	8040b28 <__aeabi_dcmpgt>
 80488ca:	b9d0      	cbnz	r0, 8048902 <_dtoa_r+0x6c2>
 80488cc:	4642      	mov	r2, r8
 80488ce:	464b      	mov	r3, r9
 80488d0:	4630      	mov	r0, r6
 80488d2:	4639      	mov	r1, r7
 80488d4:	f7f8 f900 	bl	8040ad8 <__aeabi_dcmpeq>
 80488d8:	b110      	cbz	r0, 80488e0 <_dtoa_r+0x6a0>
 80488da:	f01a 0f01 	tst.w	sl, #1
 80488de:	d110      	bne.n	8048902 <_dtoa_r+0x6c2>
 80488e0:	4620      	mov	r0, r4
 80488e2:	ee18 1a10 	vmov	r1, s16
 80488e6:	f000 fc2b 	bl	8049140 <_Bfree>
 80488ea:	2300      	movs	r3, #0
 80488ec:	9800      	ldr	r0, [sp, #0]
 80488ee:	702b      	strb	r3, [r5, #0]
 80488f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80488f2:	3001      	adds	r0, #1
 80488f4:	6018      	str	r0, [r3, #0]
 80488f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80488f8:	2b00      	cmp	r3, #0
 80488fa:	f43f acf1 	beq.w	80482e0 <_dtoa_r+0xa0>
 80488fe:	601d      	str	r5, [r3, #0]
 8048900:	e4ee      	b.n	80482e0 <_dtoa_r+0xa0>
 8048902:	9f00      	ldr	r7, [sp, #0]
 8048904:	462b      	mov	r3, r5
 8048906:	461d      	mov	r5, r3
 8048908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804890c:	2a39      	cmp	r2, #57	; 0x39
 804890e:	d106      	bne.n	804891e <_dtoa_r+0x6de>
 8048910:	9a01      	ldr	r2, [sp, #4]
 8048912:	429a      	cmp	r2, r3
 8048914:	d1f7      	bne.n	8048906 <_dtoa_r+0x6c6>
 8048916:	9901      	ldr	r1, [sp, #4]
 8048918:	2230      	movs	r2, #48	; 0x30
 804891a:	3701      	adds	r7, #1
 804891c:	700a      	strb	r2, [r1, #0]
 804891e:	781a      	ldrb	r2, [r3, #0]
 8048920:	3201      	adds	r2, #1
 8048922:	701a      	strb	r2, [r3, #0]
 8048924:	e790      	b.n	8048848 <_dtoa_r+0x608>
 8048926:	4ba6      	ldr	r3, [pc, #664]	; (8048bc0 <_dtoa_r+0x980>)
 8048928:	2200      	movs	r2, #0
 804892a:	f7f7 fe6d 	bl	8040608 <__aeabi_dmul>
 804892e:	2200      	movs	r2, #0
 8048930:	2300      	movs	r3, #0
 8048932:	4606      	mov	r6, r0
 8048934:	460f      	mov	r7, r1
 8048936:	f7f8 f8cf 	bl	8040ad8 <__aeabi_dcmpeq>
 804893a:	2800      	cmp	r0, #0
 804893c:	d09d      	beq.n	804887a <_dtoa_r+0x63a>
 804893e:	e7cf      	b.n	80488e0 <_dtoa_r+0x6a0>
 8048940:	9a08      	ldr	r2, [sp, #32]
 8048942:	2a00      	cmp	r2, #0
 8048944:	f000 80d7 	beq.w	8048af6 <_dtoa_r+0x8b6>
 8048948:	9a06      	ldr	r2, [sp, #24]
 804894a:	2a01      	cmp	r2, #1
 804894c:	f300 80ba 	bgt.w	8048ac4 <_dtoa_r+0x884>
 8048950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8048952:	2a00      	cmp	r2, #0
 8048954:	f000 80b2 	beq.w	8048abc <_dtoa_r+0x87c>
 8048958:	f203 4333 	addw	r3, r3, #1075	; 0x433
 804895c:	9e07      	ldr	r6, [sp, #28]
 804895e:	9d04      	ldr	r5, [sp, #16]
 8048960:	9a04      	ldr	r2, [sp, #16]
 8048962:	441a      	add	r2, r3
 8048964:	9204      	str	r2, [sp, #16]
 8048966:	9a05      	ldr	r2, [sp, #20]
 8048968:	2101      	movs	r1, #1
 804896a:	441a      	add	r2, r3
 804896c:	4620      	mov	r0, r4
 804896e:	9205      	str	r2, [sp, #20]
 8048970:	f000 fc9e 	bl	80492b0 <__i2b>
 8048974:	4607      	mov	r7, r0
 8048976:	2d00      	cmp	r5, #0
 8048978:	dd0c      	ble.n	8048994 <_dtoa_r+0x754>
 804897a:	9b05      	ldr	r3, [sp, #20]
 804897c:	2b00      	cmp	r3, #0
 804897e:	dd09      	ble.n	8048994 <_dtoa_r+0x754>
 8048980:	42ab      	cmp	r3, r5
 8048982:	9a04      	ldr	r2, [sp, #16]
 8048984:	bfa8      	it	ge
 8048986:	462b      	movge	r3, r5
 8048988:	1ad2      	subs	r2, r2, r3
 804898a:	9204      	str	r2, [sp, #16]
 804898c:	9a05      	ldr	r2, [sp, #20]
 804898e:	1aed      	subs	r5, r5, r3
 8048990:	1ad3      	subs	r3, r2, r3
 8048992:	9305      	str	r3, [sp, #20]
 8048994:	9b07      	ldr	r3, [sp, #28]
 8048996:	b31b      	cbz	r3, 80489e0 <_dtoa_r+0x7a0>
 8048998:	9b08      	ldr	r3, [sp, #32]
 804899a:	2b00      	cmp	r3, #0
 804899c:	f000 80af 	beq.w	8048afe <_dtoa_r+0x8be>
 80489a0:	2e00      	cmp	r6, #0
 80489a2:	dd13      	ble.n	80489cc <_dtoa_r+0x78c>
 80489a4:	4639      	mov	r1, r7
 80489a6:	4632      	mov	r2, r6
 80489a8:	4620      	mov	r0, r4
 80489aa:	f000 fd41 	bl	8049430 <__pow5mult>
 80489ae:	ee18 2a10 	vmov	r2, s16
 80489b2:	4601      	mov	r1, r0
 80489b4:	4607      	mov	r7, r0
 80489b6:	4620      	mov	r0, r4
 80489b8:	f000 fc90 	bl	80492dc <__multiply>
 80489bc:	ee18 1a10 	vmov	r1, s16
 80489c0:	4680      	mov	r8, r0
 80489c2:	4620      	mov	r0, r4
 80489c4:	f000 fbbc 	bl	8049140 <_Bfree>
 80489c8:	ee08 8a10 	vmov	s16, r8
 80489cc:	9b07      	ldr	r3, [sp, #28]
 80489ce:	1b9a      	subs	r2, r3, r6
 80489d0:	d006      	beq.n	80489e0 <_dtoa_r+0x7a0>
 80489d2:	ee18 1a10 	vmov	r1, s16
 80489d6:	4620      	mov	r0, r4
 80489d8:	f000 fd2a 	bl	8049430 <__pow5mult>
 80489dc:	ee08 0a10 	vmov	s16, r0
 80489e0:	2101      	movs	r1, #1
 80489e2:	4620      	mov	r0, r4
 80489e4:	f000 fc64 	bl	80492b0 <__i2b>
 80489e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80489ea:	2b00      	cmp	r3, #0
 80489ec:	4606      	mov	r6, r0
 80489ee:	f340 8088 	ble.w	8048b02 <_dtoa_r+0x8c2>
 80489f2:	461a      	mov	r2, r3
 80489f4:	4601      	mov	r1, r0
 80489f6:	4620      	mov	r0, r4
 80489f8:	f000 fd1a 	bl	8049430 <__pow5mult>
 80489fc:	9b06      	ldr	r3, [sp, #24]
 80489fe:	2b01      	cmp	r3, #1
 8048a00:	4606      	mov	r6, r0
 8048a02:	f340 8081 	ble.w	8048b08 <_dtoa_r+0x8c8>
 8048a06:	f04f 0800 	mov.w	r8, #0
 8048a0a:	6933      	ldr	r3, [r6, #16]
 8048a0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8048a10:	6918      	ldr	r0, [r3, #16]
 8048a12:	f000 fbfd 	bl	8049210 <__hi0bits>
 8048a16:	f1c0 0020 	rsb	r0, r0, #32
 8048a1a:	9b05      	ldr	r3, [sp, #20]
 8048a1c:	4418      	add	r0, r3
 8048a1e:	f010 001f 	ands.w	r0, r0, #31
 8048a22:	f000 8092 	beq.w	8048b4a <_dtoa_r+0x90a>
 8048a26:	f1c0 0320 	rsb	r3, r0, #32
 8048a2a:	2b04      	cmp	r3, #4
 8048a2c:	f340 808a 	ble.w	8048b44 <_dtoa_r+0x904>
 8048a30:	f1c0 001c 	rsb	r0, r0, #28
 8048a34:	9b04      	ldr	r3, [sp, #16]
 8048a36:	4403      	add	r3, r0
 8048a38:	9304      	str	r3, [sp, #16]
 8048a3a:	9b05      	ldr	r3, [sp, #20]
 8048a3c:	4403      	add	r3, r0
 8048a3e:	4405      	add	r5, r0
 8048a40:	9305      	str	r3, [sp, #20]
 8048a42:	9b04      	ldr	r3, [sp, #16]
 8048a44:	2b00      	cmp	r3, #0
 8048a46:	dd07      	ble.n	8048a58 <_dtoa_r+0x818>
 8048a48:	ee18 1a10 	vmov	r1, s16
 8048a4c:	461a      	mov	r2, r3
 8048a4e:	4620      	mov	r0, r4
 8048a50:	f000 fd48 	bl	80494e4 <__lshift>
 8048a54:	ee08 0a10 	vmov	s16, r0
 8048a58:	9b05      	ldr	r3, [sp, #20]
 8048a5a:	2b00      	cmp	r3, #0
 8048a5c:	dd05      	ble.n	8048a6a <_dtoa_r+0x82a>
 8048a5e:	4631      	mov	r1, r6
 8048a60:	461a      	mov	r2, r3
 8048a62:	4620      	mov	r0, r4
 8048a64:	f000 fd3e 	bl	80494e4 <__lshift>
 8048a68:	4606      	mov	r6, r0
 8048a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8048a6c:	2b00      	cmp	r3, #0
 8048a6e:	d06e      	beq.n	8048b4e <_dtoa_r+0x90e>
 8048a70:	ee18 0a10 	vmov	r0, s16
 8048a74:	4631      	mov	r1, r6
 8048a76:	f000 fda5 	bl	80495c4 <__mcmp>
 8048a7a:	2800      	cmp	r0, #0
 8048a7c:	da67      	bge.n	8048b4e <_dtoa_r+0x90e>
 8048a7e:	9b00      	ldr	r3, [sp, #0]
 8048a80:	3b01      	subs	r3, #1
 8048a82:	ee18 1a10 	vmov	r1, s16
 8048a86:	9300      	str	r3, [sp, #0]
 8048a88:	220a      	movs	r2, #10
 8048a8a:	2300      	movs	r3, #0
 8048a8c:	4620      	mov	r0, r4
 8048a8e:	f000 fb79 	bl	8049184 <__multadd>
 8048a92:	9b08      	ldr	r3, [sp, #32]
 8048a94:	ee08 0a10 	vmov	s16, r0
 8048a98:	2b00      	cmp	r3, #0
 8048a9a:	f000 81b1 	beq.w	8048e00 <_dtoa_r+0xbc0>
 8048a9e:	2300      	movs	r3, #0
 8048aa0:	4639      	mov	r1, r7
 8048aa2:	220a      	movs	r2, #10
 8048aa4:	4620      	mov	r0, r4
 8048aa6:	f000 fb6d 	bl	8049184 <__multadd>
 8048aaa:	9b02      	ldr	r3, [sp, #8]
 8048aac:	2b00      	cmp	r3, #0
 8048aae:	4607      	mov	r7, r0
 8048ab0:	f300 808e 	bgt.w	8048bd0 <_dtoa_r+0x990>
 8048ab4:	9b06      	ldr	r3, [sp, #24]
 8048ab6:	2b02      	cmp	r3, #2
 8048ab8:	dc51      	bgt.n	8048b5e <_dtoa_r+0x91e>
 8048aba:	e089      	b.n	8048bd0 <_dtoa_r+0x990>
 8048abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8048abe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8048ac2:	e74b      	b.n	804895c <_dtoa_r+0x71c>
 8048ac4:	9b03      	ldr	r3, [sp, #12]
 8048ac6:	1e5e      	subs	r6, r3, #1
 8048ac8:	9b07      	ldr	r3, [sp, #28]
 8048aca:	42b3      	cmp	r3, r6
 8048acc:	bfbf      	itttt	lt
 8048ace:	9b07      	ldrlt	r3, [sp, #28]
 8048ad0:	9607      	strlt	r6, [sp, #28]
 8048ad2:	1af2      	sublt	r2, r6, r3
 8048ad4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8048ad6:	bfb6      	itet	lt
 8048ad8:	189b      	addlt	r3, r3, r2
 8048ada:	1b9e      	subge	r6, r3, r6
 8048adc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8048ade:	9b03      	ldr	r3, [sp, #12]
 8048ae0:	bfb8      	it	lt
 8048ae2:	2600      	movlt	r6, #0
 8048ae4:	2b00      	cmp	r3, #0
 8048ae6:	bfb7      	itett	lt
 8048ae8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8048aec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8048af0:	1a9d      	sublt	r5, r3, r2
 8048af2:	2300      	movlt	r3, #0
 8048af4:	e734      	b.n	8048960 <_dtoa_r+0x720>
 8048af6:	9e07      	ldr	r6, [sp, #28]
 8048af8:	9d04      	ldr	r5, [sp, #16]
 8048afa:	9f08      	ldr	r7, [sp, #32]
 8048afc:	e73b      	b.n	8048976 <_dtoa_r+0x736>
 8048afe:	9a07      	ldr	r2, [sp, #28]
 8048b00:	e767      	b.n	80489d2 <_dtoa_r+0x792>
 8048b02:	9b06      	ldr	r3, [sp, #24]
 8048b04:	2b01      	cmp	r3, #1
 8048b06:	dc18      	bgt.n	8048b3a <_dtoa_r+0x8fa>
 8048b08:	f1ba 0f00 	cmp.w	sl, #0
 8048b0c:	d115      	bne.n	8048b3a <_dtoa_r+0x8fa>
 8048b0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8048b12:	b993      	cbnz	r3, 8048b3a <_dtoa_r+0x8fa>
 8048b14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8048b18:	0d1b      	lsrs	r3, r3, #20
 8048b1a:	051b      	lsls	r3, r3, #20
 8048b1c:	b183      	cbz	r3, 8048b40 <_dtoa_r+0x900>
 8048b1e:	9b04      	ldr	r3, [sp, #16]
 8048b20:	3301      	adds	r3, #1
 8048b22:	9304      	str	r3, [sp, #16]
 8048b24:	9b05      	ldr	r3, [sp, #20]
 8048b26:	3301      	adds	r3, #1
 8048b28:	9305      	str	r3, [sp, #20]
 8048b2a:	f04f 0801 	mov.w	r8, #1
 8048b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048b30:	2b00      	cmp	r3, #0
 8048b32:	f47f af6a 	bne.w	8048a0a <_dtoa_r+0x7ca>
 8048b36:	2001      	movs	r0, #1
 8048b38:	e76f      	b.n	8048a1a <_dtoa_r+0x7da>
 8048b3a:	f04f 0800 	mov.w	r8, #0
 8048b3e:	e7f6      	b.n	8048b2e <_dtoa_r+0x8ee>
 8048b40:	4698      	mov	r8, r3
 8048b42:	e7f4      	b.n	8048b2e <_dtoa_r+0x8ee>
 8048b44:	f43f af7d 	beq.w	8048a42 <_dtoa_r+0x802>
 8048b48:	4618      	mov	r0, r3
 8048b4a:	301c      	adds	r0, #28
 8048b4c:	e772      	b.n	8048a34 <_dtoa_r+0x7f4>
 8048b4e:	9b03      	ldr	r3, [sp, #12]
 8048b50:	2b00      	cmp	r3, #0
 8048b52:	dc37      	bgt.n	8048bc4 <_dtoa_r+0x984>
 8048b54:	9b06      	ldr	r3, [sp, #24]
 8048b56:	2b02      	cmp	r3, #2
 8048b58:	dd34      	ble.n	8048bc4 <_dtoa_r+0x984>
 8048b5a:	9b03      	ldr	r3, [sp, #12]
 8048b5c:	9302      	str	r3, [sp, #8]
 8048b5e:	9b02      	ldr	r3, [sp, #8]
 8048b60:	b96b      	cbnz	r3, 8048b7e <_dtoa_r+0x93e>
 8048b62:	4631      	mov	r1, r6
 8048b64:	2205      	movs	r2, #5
 8048b66:	4620      	mov	r0, r4
 8048b68:	f000 fb0c 	bl	8049184 <__multadd>
 8048b6c:	4601      	mov	r1, r0
 8048b6e:	4606      	mov	r6, r0
 8048b70:	ee18 0a10 	vmov	r0, s16
 8048b74:	f000 fd26 	bl	80495c4 <__mcmp>
 8048b78:	2800      	cmp	r0, #0
 8048b7a:	f73f adbb 	bgt.w	80486f4 <_dtoa_r+0x4b4>
 8048b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048b80:	9d01      	ldr	r5, [sp, #4]
 8048b82:	43db      	mvns	r3, r3
 8048b84:	9300      	str	r3, [sp, #0]
 8048b86:	f04f 0800 	mov.w	r8, #0
 8048b8a:	4631      	mov	r1, r6
 8048b8c:	4620      	mov	r0, r4
 8048b8e:	f000 fad7 	bl	8049140 <_Bfree>
 8048b92:	2f00      	cmp	r7, #0
 8048b94:	f43f aea4 	beq.w	80488e0 <_dtoa_r+0x6a0>
 8048b98:	f1b8 0f00 	cmp.w	r8, #0
 8048b9c:	d005      	beq.n	8048baa <_dtoa_r+0x96a>
 8048b9e:	45b8      	cmp	r8, r7
 8048ba0:	d003      	beq.n	8048baa <_dtoa_r+0x96a>
 8048ba2:	4641      	mov	r1, r8
 8048ba4:	4620      	mov	r0, r4
 8048ba6:	f000 facb 	bl	8049140 <_Bfree>
 8048baa:	4639      	mov	r1, r7
 8048bac:	4620      	mov	r0, r4
 8048bae:	f000 fac7 	bl	8049140 <_Bfree>
 8048bb2:	e695      	b.n	80488e0 <_dtoa_r+0x6a0>
 8048bb4:	2600      	movs	r6, #0
 8048bb6:	4637      	mov	r7, r6
 8048bb8:	e7e1      	b.n	8048b7e <_dtoa_r+0x93e>
 8048bba:	9700      	str	r7, [sp, #0]
 8048bbc:	4637      	mov	r7, r6
 8048bbe:	e599      	b.n	80486f4 <_dtoa_r+0x4b4>
 8048bc0:	40240000 	.word	0x40240000
 8048bc4:	9b08      	ldr	r3, [sp, #32]
 8048bc6:	2b00      	cmp	r3, #0
 8048bc8:	f000 80ca 	beq.w	8048d60 <_dtoa_r+0xb20>
 8048bcc:	9b03      	ldr	r3, [sp, #12]
 8048bce:	9302      	str	r3, [sp, #8]
 8048bd0:	2d00      	cmp	r5, #0
 8048bd2:	dd05      	ble.n	8048be0 <_dtoa_r+0x9a0>
 8048bd4:	4639      	mov	r1, r7
 8048bd6:	462a      	mov	r2, r5
 8048bd8:	4620      	mov	r0, r4
 8048bda:	f000 fc83 	bl	80494e4 <__lshift>
 8048bde:	4607      	mov	r7, r0
 8048be0:	f1b8 0f00 	cmp.w	r8, #0
 8048be4:	d05b      	beq.n	8048c9e <_dtoa_r+0xa5e>
 8048be6:	6879      	ldr	r1, [r7, #4]
 8048be8:	4620      	mov	r0, r4
 8048bea:	f000 fa69 	bl	80490c0 <_Balloc>
 8048bee:	4605      	mov	r5, r0
 8048bf0:	b928      	cbnz	r0, 8048bfe <_dtoa_r+0x9be>
 8048bf2:	4b87      	ldr	r3, [pc, #540]	; (8048e10 <_dtoa_r+0xbd0>)
 8048bf4:	4602      	mov	r2, r0
 8048bf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8048bfa:	f7ff bb3b 	b.w	8048274 <_dtoa_r+0x34>
 8048bfe:	693a      	ldr	r2, [r7, #16]
 8048c00:	3202      	adds	r2, #2
 8048c02:	0092      	lsls	r2, r2, #2
 8048c04:	f107 010c 	add.w	r1, r7, #12
 8048c08:	300c      	adds	r0, #12
 8048c0a:	f7fe fb2a 	bl	8047262 <memcpy>
 8048c0e:	2201      	movs	r2, #1
 8048c10:	4629      	mov	r1, r5
 8048c12:	4620      	mov	r0, r4
 8048c14:	f000 fc66 	bl	80494e4 <__lshift>
 8048c18:	9b01      	ldr	r3, [sp, #4]
 8048c1a:	f103 0901 	add.w	r9, r3, #1
 8048c1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8048c22:	4413      	add	r3, r2
 8048c24:	9305      	str	r3, [sp, #20]
 8048c26:	f00a 0301 	and.w	r3, sl, #1
 8048c2a:	46b8      	mov	r8, r7
 8048c2c:	9304      	str	r3, [sp, #16]
 8048c2e:	4607      	mov	r7, r0
 8048c30:	4631      	mov	r1, r6
 8048c32:	ee18 0a10 	vmov	r0, s16
 8048c36:	f7ff fa77 	bl	8048128 <quorem>
 8048c3a:	4641      	mov	r1, r8
 8048c3c:	9002      	str	r0, [sp, #8]
 8048c3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8048c42:	ee18 0a10 	vmov	r0, s16
 8048c46:	f000 fcbd 	bl	80495c4 <__mcmp>
 8048c4a:	463a      	mov	r2, r7
 8048c4c:	9003      	str	r0, [sp, #12]
 8048c4e:	4631      	mov	r1, r6
 8048c50:	4620      	mov	r0, r4
 8048c52:	f000 fcd3 	bl	80495fc <__mdiff>
 8048c56:	68c2      	ldr	r2, [r0, #12]
 8048c58:	f109 3bff 	add.w	fp, r9, #4294967295
 8048c5c:	4605      	mov	r5, r0
 8048c5e:	bb02      	cbnz	r2, 8048ca2 <_dtoa_r+0xa62>
 8048c60:	4601      	mov	r1, r0
 8048c62:	ee18 0a10 	vmov	r0, s16
 8048c66:	f000 fcad 	bl	80495c4 <__mcmp>
 8048c6a:	4602      	mov	r2, r0
 8048c6c:	4629      	mov	r1, r5
 8048c6e:	4620      	mov	r0, r4
 8048c70:	9207      	str	r2, [sp, #28]
 8048c72:	f000 fa65 	bl	8049140 <_Bfree>
 8048c76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8048c7a:	ea43 0102 	orr.w	r1, r3, r2
 8048c7e:	9b04      	ldr	r3, [sp, #16]
 8048c80:	430b      	orrs	r3, r1
 8048c82:	464d      	mov	r5, r9
 8048c84:	d10f      	bne.n	8048ca6 <_dtoa_r+0xa66>
 8048c86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8048c8a:	d02a      	beq.n	8048ce2 <_dtoa_r+0xaa2>
 8048c8c:	9b03      	ldr	r3, [sp, #12]
 8048c8e:	2b00      	cmp	r3, #0
 8048c90:	dd02      	ble.n	8048c98 <_dtoa_r+0xa58>
 8048c92:	9b02      	ldr	r3, [sp, #8]
 8048c94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8048c98:	f88b a000 	strb.w	sl, [fp]
 8048c9c:	e775      	b.n	8048b8a <_dtoa_r+0x94a>
 8048c9e:	4638      	mov	r0, r7
 8048ca0:	e7ba      	b.n	8048c18 <_dtoa_r+0x9d8>
 8048ca2:	2201      	movs	r2, #1
 8048ca4:	e7e2      	b.n	8048c6c <_dtoa_r+0xa2c>
 8048ca6:	9b03      	ldr	r3, [sp, #12]
 8048ca8:	2b00      	cmp	r3, #0
 8048caa:	db04      	blt.n	8048cb6 <_dtoa_r+0xa76>
 8048cac:	9906      	ldr	r1, [sp, #24]
 8048cae:	430b      	orrs	r3, r1
 8048cb0:	9904      	ldr	r1, [sp, #16]
 8048cb2:	430b      	orrs	r3, r1
 8048cb4:	d122      	bne.n	8048cfc <_dtoa_r+0xabc>
 8048cb6:	2a00      	cmp	r2, #0
 8048cb8:	ddee      	ble.n	8048c98 <_dtoa_r+0xa58>
 8048cba:	ee18 1a10 	vmov	r1, s16
 8048cbe:	2201      	movs	r2, #1
 8048cc0:	4620      	mov	r0, r4
 8048cc2:	f000 fc0f 	bl	80494e4 <__lshift>
 8048cc6:	4631      	mov	r1, r6
 8048cc8:	ee08 0a10 	vmov	s16, r0
 8048ccc:	f000 fc7a 	bl	80495c4 <__mcmp>
 8048cd0:	2800      	cmp	r0, #0
 8048cd2:	dc03      	bgt.n	8048cdc <_dtoa_r+0xa9c>
 8048cd4:	d1e0      	bne.n	8048c98 <_dtoa_r+0xa58>
 8048cd6:	f01a 0f01 	tst.w	sl, #1
 8048cda:	d0dd      	beq.n	8048c98 <_dtoa_r+0xa58>
 8048cdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8048ce0:	d1d7      	bne.n	8048c92 <_dtoa_r+0xa52>
 8048ce2:	2339      	movs	r3, #57	; 0x39
 8048ce4:	f88b 3000 	strb.w	r3, [fp]
 8048ce8:	462b      	mov	r3, r5
 8048cea:	461d      	mov	r5, r3
 8048cec:	3b01      	subs	r3, #1
 8048cee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8048cf2:	2a39      	cmp	r2, #57	; 0x39
 8048cf4:	d071      	beq.n	8048dda <_dtoa_r+0xb9a>
 8048cf6:	3201      	adds	r2, #1
 8048cf8:	701a      	strb	r2, [r3, #0]
 8048cfa:	e746      	b.n	8048b8a <_dtoa_r+0x94a>
 8048cfc:	2a00      	cmp	r2, #0
 8048cfe:	dd07      	ble.n	8048d10 <_dtoa_r+0xad0>
 8048d00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8048d04:	d0ed      	beq.n	8048ce2 <_dtoa_r+0xaa2>
 8048d06:	f10a 0301 	add.w	r3, sl, #1
 8048d0a:	f88b 3000 	strb.w	r3, [fp]
 8048d0e:	e73c      	b.n	8048b8a <_dtoa_r+0x94a>
 8048d10:	9b05      	ldr	r3, [sp, #20]
 8048d12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8048d16:	4599      	cmp	r9, r3
 8048d18:	d047      	beq.n	8048daa <_dtoa_r+0xb6a>
 8048d1a:	ee18 1a10 	vmov	r1, s16
 8048d1e:	2300      	movs	r3, #0
 8048d20:	220a      	movs	r2, #10
 8048d22:	4620      	mov	r0, r4
 8048d24:	f000 fa2e 	bl	8049184 <__multadd>
 8048d28:	45b8      	cmp	r8, r7
 8048d2a:	ee08 0a10 	vmov	s16, r0
 8048d2e:	f04f 0300 	mov.w	r3, #0
 8048d32:	f04f 020a 	mov.w	r2, #10
 8048d36:	4641      	mov	r1, r8
 8048d38:	4620      	mov	r0, r4
 8048d3a:	d106      	bne.n	8048d4a <_dtoa_r+0xb0a>
 8048d3c:	f000 fa22 	bl	8049184 <__multadd>
 8048d40:	4680      	mov	r8, r0
 8048d42:	4607      	mov	r7, r0
 8048d44:	f109 0901 	add.w	r9, r9, #1
 8048d48:	e772      	b.n	8048c30 <_dtoa_r+0x9f0>
 8048d4a:	f000 fa1b 	bl	8049184 <__multadd>
 8048d4e:	4639      	mov	r1, r7
 8048d50:	4680      	mov	r8, r0
 8048d52:	2300      	movs	r3, #0
 8048d54:	220a      	movs	r2, #10
 8048d56:	4620      	mov	r0, r4
 8048d58:	f000 fa14 	bl	8049184 <__multadd>
 8048d5c:	4607      	mov	r7, r0
 8048d5e:	e7f1      	b.n	8048d44 <_dtoa_r+0xb04>
 8048d60:	9b03      	ldr	r3, [sp, #12]
 8048d62:	9302      	str	r3, [sp, #8]
 8048d64:	9d01      	ldr	r5, [sp, #4]
 8048d66:	ee18 0a10 	vmov	r0, s16
 8048d6a:	4631      	mov	r1, r6
 8048d6c:	f7ff f9dc 	bl	8048128 <quorem>
 8048d70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8048d74:	9b01      	ldr	r3, [sp, #4]
 8048d76:	f805 ab01 	strb.w	sl, [r5], #1
 8048d7a:	1aea      	subs	r2, r5, r3
 8048d7c:	9b02      	ldr	r3, [sp, #8]
 8048d7e:	4293      	cmp	r3, r2
 8048d80:	dd09      	ble.n	8048d96 <_dtoa_r+0xb56>
 8048d82:	ee18 1a10 	vmov	r1, s16
 8048d86:	2300      	movs	r3, #0
 8048d88:	220a      	movs	r2, #10
 8048d8a:	4620      	mov	r0, r4
 8048d8c:	f000 f9fa 	bl	8049184 <__multadd>
 8048d90:	ee08 0a10 	vmov	s16, r0
 8048d94:	e7e7      	b.n	8048d66 <_dtoa_r+0xb26>
 8048d96:	9b02      	ldr	r3, [sp, #8]
 8048d98:	2b00      	cmp	r3, #0
 8048d9a:	bfc8      	it	gt
 8048d9c:	461d      	movgt	r5, r3
 8048d9e:	9b01      	ldr	r3, [sp, #4]
 8048da0:	bfd8      	it	le
 8048da2:	2501      	movle	r5, #1
 8048da4:	441d      	add	r5, r3
 8048da6:	f04f 0800 	mov.w	r8, #0
 8048daa:	ee18 1a10 	vmov	r1, s16
 8048dae:	2201      	movs	r2, #1
 8048db0:	4620      	mov	r0, r4
 8048db2:	f000 fb97 	bl	80494e4 <__lshift>
 8048db6:	4631      	mov	r1, r6
 8048db8:	ee08 0a10 	vmov	s16, r0
 8048dbc:	f000 fc02 	bl	80495c4 <__mcmp>
 8048dc0:	2800      	cmp	r0, #0
 8048dc2:	dc91      	bgt.n	8048ce8 <_dtoa_r+0xaa8>
 8048dc4:	d102      	bne.n	8048dcc <_dtoa_r+0xb8c>
 8048dc6:	f01a 0f01 	tst.w	sl, #1
 8048dca:	d18d      	bne.n	8048ce8 <_dtoa_r+0xaa8>
 8048dcc:	462b      	mov	r3, r5
 8048dce:	461d      	mov	r5, r3
 8048dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8048dd4:	2a30      	cmp	r2, #48	; 0x30
 8048dd6:	d0fa      	beq.n	8048dce <_dtoa_r+0xb8e>
 8048dd8:	e6d7      	b.n	8048b8a <_dtoa_r+0x94a>
 8048dda:	9a01      	ldr	r2, [sp, #4]
 8048ddc:	429a      	cmp	r2, r3
 8048dde:	d184      	bne.n	8048cea <_dtoa_r+0xaaa>
 8048de0:	9b00      	ldr	r3, [sp, #0]
 8048de2:	3301      	adds	r3, #1
 8048de4:	9300      	str	r3, [sp, #0]
 8048de6:	2331      	movs	r3, #49	; 0x31
 8048de8:	7013      	strb	r3, [r2, #0]
 8048dea:	e6ce      	b.n	8048b8a <_dtoa_r+0x94a>
 8048dec:	4b09      	ldr	r3, [pc, #36]	; (8048e14 <_dtoa_r+0xbd4>)
 8048dee:	f7ff ba95 	b.w	804831c <_dtoa_r+0xdc>
 8048df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8048df4:	2b00      	cmp	r3, #0
 8048df6:	f47f aa6e 	bne.w	80482d6 <_dtoa_r+0x96>
 8048dfa:	4b07      	ldr	r3, [pc, #28]	; (8048e18 <_dtoa_r+0xbd8>)
 8048dfc:	f7ff ba8e 	b.w	804831c <_dtoa_r+0xdc>
 8048e00:	9b02      	ldr	r3, [sp, #8]
 8048e02:	2b00      	cmp	r3, #0
 8048e04:	dcae      	bgt.n	8048d64 <_dtoa_r+0xb24>
 8048e06:	9b06      	ldr	r3, [sp, #24]
 8048e08:	2b02      	cmp	r3, #2
 8048e0a:	f73f aea8 	bgt.w	8048b5e <_dtoa_r+0x91e>
 8048e0e:	e7a9      	b.n	8048d64 <_dtoa_r+0xb24>
 8048e10:	0804a26b 	.word	0x0804a26b
 8048e14:	0804a1c8 	.word	0x0804a1c8
 8048e18:	0804a1ec 	.word	0x0804a1ec

08048e1c <__sflush_r>:
 8048e1c:	898a      	ldrh	r2, [r1, #12]
 8048e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8048e22:	4605      	mov	r5, r0
 8048e24:	0710      	lsls	r0, r2, #28
 8048e26:	460c      	mov	r4, r1
 8048e28:	d458      	bmi.n	8048edc <__sflush_r+0xc0>
 8048e2a:	684b      	ldr	r3, [r1, #4]
 8048e2c:	2b00      	cmp	r3, #0
 8048e2e:	dc05      	bgt.n	8048e3c <__sflush_r+0x20>
 8048e30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8048e32:	2b00      	cmp	r3, #0
 8048e34:	dc02      	bgt.n	8048e3c <__sflush_r+0x20>
 8048e36:	2000      	movs	r0, #0
 8048e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8048e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8048e3e:	2e00      	cmp	r6, #0
 8048e40:	d0f9      	beq.n	8048e36 <__sflush_r+0x1a>
 8048e42:	2300      	movs	r3, #0
 8048e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8048e48:	682f      	ldr	r7, [r5, #0]
 8048e4a:	602b      	str	r3, [r5, #0]
 8048e4c:	d032      	beq.n	8048eb4 <__sflush_r+0x98>
 8048e4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8048e50:	89a3      	ldrh	r3, [r4, #12]
 8048e52:	075a      	lsls	r2, r3, #29
 8048e54:	d505      	bpl.n	8048e62 <__sflush_r+0x46>
 8048e56:	6863      	ldr	r3, [r4, #4]
 8048e58:	1ac0      	subs	r0, r0, r3
 8048e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8048e5c:	b10b      	cbz	r3, 8048e62 <__sflush_r+0x46>
 8048e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8048e60:	1ac0      	subs	r0, r0, r3
 8048e62:	2300      	movs	r3, #0
 8048e64:	4602      	mov	r2, r0
 8048e66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8048e68:	6a21      	ldr	r1, [r4, #32]
 8048e6a:	4628      	mov	r0, r5
 8048e6c:	47b0      	blx	r6
 8048e6e:	1c43      	adds	r3, r0, #1
 8048e70:	89a3      	ldrh	r3, [r4, #12]
 8048e72:	d106      	bne.n	8048e82 <__sflush_r+0x66>
 8048e74:	6829      	ldr	r1, [r5, #0]
 8048e76:	291d      	cmp	r1, #29
 8048e78:	d82c      	bhi.n	8048ed4 <__sflush_r+0xb8>
 8048e7a:	4a2a      	ldr	r2, [pc, #168]	; (8048f24 <__sflush_r+0x108>)
 8048e7c:	40ca      	lsrs	r2, r1
 8048e7e:	07d6      	lsls	r6, r2, #31
 8048e80:	d528      	bpl.n	8048ed4 <__sflush_r+0xb8>
 8048e82:	2200      	movs	r2, #0
 8048e84:	6062      	str	r2, [r4, #4]
 8048e86:	04d9      	lsls	r1, r3, #19
 8048e88:	6922      	ldr	r2, [r4, #16]
 8048e8a:	6022      	str	r2, [r4, #0]
 8048e8c:	d504      	bpl.n	8048e98 <__sflush_r+0x7c>
 8048e8e:	1c42      	adds	r2, r0, #1
 8048e90:	d101      	bne.n	8048e96 <__sflush_r+0x7a>
 8048e92:	682b      	ldr	r3, [r5, #0]
 8048e94:	b903      	cbnz	r3, 8048e98 <__sflush_r+0x7c>
 8048e96:	6560      	str	r0, [r4, #84]	; 0x54
 8048e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8048e9a:	602f      	str	r7, [r5, #0]
 8048e9c:	2900      	cmp	r1, #0
 8048e9e:	d0ca      	beq.n	8048e36 <__sflush_r+0x1a>
 8048ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8048ea4:	4299      	cmp	r1, r3
 8048ea6:	d002      	beq.n	8048eae <__sflush_r+0x92>
 8048ea8:	4628      	mov	r0, r5
 8048eaa:	f000 fca3 	bl	80497f4 <_free_r>
 8048eae:	2000      	movs	r0, #0
 8048eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8048eb2:	e7c1      	b.n	8048e38 <__sflush_r+0x1c>
 8048eb4:	6a21      	ldr	r1, [r4, #32]
 8048eb6:	2301      	movs	r3, #1
 8048eb8:	4628      	mov	r0, r5
 8048eba:	47b0      	blx	r6
 8048ebc:	1c41      	adds	r1, r0, #1
 8048ebe:	d1c7      	bne.n	8048e50 <__sflush_r+0x34>
 8048ec0:	682b      	ldr	r3, [r5, #0]
 8048ec2:	2b00      	cmp	r3, #0
 8048ec4:	d0c4      	beq.n	8048e50 <__sflush_r+0x34>
 8048ec6:	2b1d      	cmp	r3, #29
 8048ec8:	d001      	beq.n	8048ece <__sflush_r+0xb2>
 8048eca:	2b16      	cmp	r3, #22
 8048ecc:	d101      	bne.n	8048ed2 <__sflush_r+0xb6>
 8048ece:	602f      	str	r7, [r5, #0]
 8048ed0:	e7b1      	b.n	8048e36 <__sflush_r+0x1a>
 8048ed2:	89a3      	ldrh	r3, [r4, #12]
 8048ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8048ed8:	81a3      	strh	r3, [r4, #12]
 8048eda:	e7ad      	b.n	8048e38 <__sflush_r+0x1c>
 8048edc:	690f      	ldr	r7, [r1, #16]
 8048ede:	2f00      	cmp	r7, #0
 8048ee0:	d0a9      	beq.n	8048e36 <__sflush_r+0x1a>
 8048ee2:	0793      	lsls	r3, r2, #30
 8048ee4:	680e      	ldr	r6, [r1, #0]
 8048ee6:	bf08      	it	eq
 8048ee8:	694b      	ldreq	r3, [r1, #20]
 8048eea:	600f      	str	r7, [r1, #0]
 8048eec:	bf18      	it	ne
 8048eee:	2300      	movne	r3, #0
 8048ef0:	eba6 0807 	sub.w	r8, r6, r7
 8048ef4:	608b      	str	r3, [r1, #8]
 8048ef6:	f1b8 0f00 	cmp.w	r8, #0
 8048efa:	dd9c      	ble.n	8048e36 <__sflush_r+0x1a>
 8048efc:	6a21      	ldr	r1, [r4, #32]
 8048efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8048f00:	4643      	mov	r3, r8
 8048f02:	463a      	mov	r2, r7
 8048f04:	4628      	mov	r0, r5
 8048f06:	47b0      	blx	r6
 8048f08:	2800      	cmp	r0, #0
 8048f0a:	dc06      	bgt.n	8048f1a <__sflush_r+0xfe>
 8048f0c:	89a3      	ldrh	r3, [r4, #12]
 8048f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8048f12:	81a3      	strh	r3, [r4, #12]
 8048f14:	f04f 30ff 	mov.w	r0, #4294967295
 8048f18:	e78e      	b.n	8048e38 <__sflush_r+0x1c>
 8048f1a:	4407      	add	r7, r0
 8048f1c:	eba8 0800 	sub.w	r8, r8, r0
 8048f20:	e7e9      	b.n	8048ef6 <__sflush_r+0xda>
 8048f22:	bf00      	nop
 8048f24:	20400001 	.word	0x20400001

08048f28 <_fflush_r>:
 8048f28:	b538      	push	{r3, r4, r5, lr}
 8048f2a:	690b      	ldr	r3, [r1, #16]
 8048f2c:	4605      	mov	r5, r0
 8048f2e:	460c      	mov	r4, r1
 8048f30:	b913      	cbnz	r3, 8048f38 <_fflush_r+0x10>
 8048f32:	2500      	movs	r5, #0
 8048f34:	4628      	mov	r0, r5
 8048f36:	bd38      	pop	{r3, r4, r5, pc}
 8048f38:	b118      	cbz	r0, 8048f42 <_fflush_r+0x1a>
 8048f3a:	6983      	ldr	r3, [r0, #24]
 8048f3c:	b90b      	cbnz	r3, 8048f42 <_fflush_r+0x1a>
 8048f3e:	f7fe f8cb 	bl	80470d8 <__sinit>
 8048f42:	4b14      	ldr	r3, [pc, #80]	; (8048f94 <_fflush_r+0x6c>)
 8048f44:	429c      	cmp	r4, r3
 8048f46:	d11b      	bne.n	8048f80 <_fflush_r+0x58>
 8048f48:	686c      	ldr	r4, [r5, #4]
 8048f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8048f4e:	2b00      	cmp	r3, #0
 8048f50:	d0ef      	beq.n	8048f32 <_fflush_r+0xa>
 8048f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8048f54:	07d0      	lsls	r0, r2, #31
 8048f56:	d404      	bmi.n	8048f62 <_fflush_r+0x3a>
 8048f58:	0599      	lsls	r1, r3, #22
 8048f5a:	d402      	bmi.n	8048f62 <_fflush_r+0x3a>
 8048f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8048f5e:	f7fe f97e 	bl	804725e <__retarget_lock_acquire_recursive>
 8048f62:	4628      	mov	r0, r5
 8048f64:	4621      	mov	r1, r4
 8048f66:	f7ff ff59 	bl	8048e1c <__sflush_r>
 8048f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8048f6c:	07da      	lsls	r2, r3, #31
 8048f6e:	4605      	mov	r5, r0
 8048f70:	d4e0      	bmi.n	8048f34 <_fflush_r+0xc>
 8048f72:	89a3      	ldrh	r3, [r4, #12]
 8048f74:	059b      	lsls	r3, r3, #22
 8048f76:	d4dd      	bmi.n	8048f34 <_fflush_r+0xc>
 8048f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8048f7a:	f7fe f971 	bl	8047260 <__retarget_lock_release_recursive>
 8048f7e:	e7d9      	b.n	8048f34 <_fflush_r+0xc>
 8048f80:	4b05      	ldr	r3, [pc, #20]	; (8048f98 <_fflush_r+0x70>)
 8048f82:	429c      	cmp	r4, r3
 8048f84:	d101      	bne.n	8048f8a <_fflush_r+0x62>
 8048f86:	68ac      	ldr	r4, [r5, #8]
 8048f88:	e7df      	b.n	8048f4a <_fflush_r+0x22>
 8048f8a:	4b04      	ldr	r3, [pc, #16]	; (8048f9c <_fflush_r+0x74>)
 8048f8c:	429c      	cmp	r4, r3
 8048f8e:	bf08      	it	eq
 8048f90:	68ec      	ldreq	r4, [r5, #12]
 8048f92:	e7da      	b.n	8048f4a <_fflush_r+0x22>
 8048f94:	0804a174 	.word	0x0804a174
 8048f98:	0804a194 	.word	0x0804a194
 8048f9c:	0804a154 	.word	0x0804a154

08048fa0 <_localeconv_r>:
 8048fa0:	4800      	ldr	r0, [pc, #0]	; (8048fa4 <_localeconv_r+0x4>)
 8048fa2:	4770      	bx	lr
 8048fa4:	20000164 	.word	0x20000164

08048fa8 <_lseek_r>:
 8048fa8:	b538      	push	{r3, r4, r5, lr}
 8048faa:	4d07      	ldr	r5, [pc, #28]	; (8048fc8 <_lseek_r+0x20>)
 8048fac:	4604      	mov	r4, r0
 8048fae:	4608      	mov	r0, r1
 8048fb0:	4611      	mov	r1, r2
 8048fb2:	2200      	movs	r2, #0
 8048fb4:	602a      	str	r2, [r5, #0]
 8048fb6:	461a      	mov	r2, r3
 8048fb8:	f7f9 fc04 	bl	80427c4 <_lseek>
 8048fbc:	1c43      	adds	r3, r0, #1
 8048fbe:	d102      	bne.n	8048fc6 <_lseek_r+0x1e>
 8048fc0:	682b      	ldr	r3, [r5, #0]
 8048fc2:	b103      	cbz	r3, 8048fc6 <_lseek_r+0x1e>
 8048fc4:	6023      	str	r3, [r4, #0]
 8048fc6:	bd38      	pop	{r3, r4, r5, pc}
 8048fc8:	20004398 	.word	0x20004398

08048fcc <__swhatbuf_r>:
 8048fcc:	b570      	push	{r4, r5, r6, lr}
 8048fce:	460e      	mov	r6, r1
 8048fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8048fd4:	2900      	cmp	r1, #0
 8048fd6:	b096      	sub	sp, #88	; 0x58
 8048fd8:	4614      	mov	r4, r2
 8048fda:	461d      	mov	r5, r3
 8048fdc:	da08      	bge.n	8048ff0 <__swhatbuf_r+0x24>
 8048fde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8048fe2:	2200      	movs	r2, #0
 8048fe4:	602a      	str	r2, [r5, #0]
 8048fe6:	061a      	lsls	r2, r3, #24
 8048fe8:	d410      	bmi.n	804900c <__swhatbuf_r+0x40>
 8048fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8048fee:	e00e      	b.n	804900e <__swhatbuf_r+0x42>
 8048ff0:	466a      	mov	r2, sp
 8048ff2:	f000 ff43 	bl	8049e7c <_fstat_r>
 8048ff6:	2800      	cmp	r0, #0
 8048ff8:	dbf1      	blt.n	8048fde <__swhatbuf_r+0x12>
 8048ffa:	9a01      	ldr	r2, [sp, #4]
 8048ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8049000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8049004:	425a      	negs	r2, r3
 8049006:	415a      	adcs	r2, r3
 8049008:	602a      	str	r2, [r5, #0]
 804900a:	e7ee      	b.n	8048fea <__swhatbuf_r+0x1e>
 804900c:	2340      	movs	r3, #64	; 0x40
 804900e:	2000      	movs	r0, #0
 8049010:	6023      	str	r3, [r4, #0]
 8049012:	b016      	add	sp, #88	; 0x58
 8049014:	bd70      	pop	{r4, r5, r6, pc}
	...

08049018 <__smakebuf_r>:
 8049018:	898b      	ldrh	r3, [r1, #12]
 804901a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804901c:	079d      	lsls	r5, r3, #30
 804901e:	4606      	mov	r6, r0
 8049020:	460c      	mov	r4, r1
 8049022:	d507      	bpl.n	8049034 <__smakebuf_r+0x1c>
 8049024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8049028:	6023      	str	r3, [r4, #0]
 804902a:	6123      	str	r3, [r4, #16]
 804902c:	2301      	movs	r3, #1
 804902e:	6163      	str	r3, [r4, #20]
 8049030:	b002      	add	sp, #8
 8049032:	bd70      	pop	{r4, r5, r6, pc}
 8049034:	ab01      	add	r3, sp, #4
 8049036:	466a      	mov	r2, sp
 8049038:	f7ff ffc8 	bl	8048fcc <__swhatbuf_r>
 804903c:	9900      	ldr	r1, [sp, #0]
 804903e:	4605      	mov	r5, r0
 8049040:	4630      	mov	r0, r6
 8049042:	f7fe f945 	bl	80472d0 <_malloc_r>
 8049046:	b948      	cbnz	r0, 804905c <__smakebuf_r+0x44>
 8049048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804904c:	059a      	lsls	r2, r3, #22
 804904e:	d4ef      	bmi.n	8049030 <__smakebuf_r+0x18>
 8049050:	f023 0303 	bic.w	r3, r3, #3
 8049054:	f043 0302 	orr.w	r3, r3, #2
 8049058:	81a3      	strh	r3, [r4, #12]
 804905a:	e7e3      	b.n	8049024 <__smakebuf_r+0xc>
 804905c:	4b0d      	ldr	r3, [pc, #52]	; (8049094 <__smakebuf_r+0x7c>)
 804905e:	62b3      	str	r3, [r6, #40]	; 0x28
 8049060:	89a3      	ldrh	r3, [r4, #12]
 8049062:	6020      	str	r0, [r4, #0]
 8049064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8049068:	81a3      	strh	r3, [r4, #12]
 804906a:	9b00      	ldr	r3, [sp, #0]
 804906c:	6163      	str	r3, [r4, #20]
 804906e:	9b01      	ldr	r3, [sp, #4]
 8049070:	6120      	str	r0, [r4, #16]
 8049072:	b15b      	cbz	r3, 804908c <__smakebuf_r+0x74>
 8049074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8049078:	4630      	mov	r0, r6
 804907a:	f000 ff11 	bl	8049ea0 <_isatty_r>
 804907e:	b128      	cbz	r0, 804908c <__smakebuf_r+0x74>
 8049080:	89a3      	ldrh	r3, [r4, #12]
 8049082:	f023 0303 	bic.w	r3, r3, #3
 8049086:	f043 0301 	orr.w	r3, r3, #1
 804908a:	81a3      	strh	r3, [r4, #12]
 804908c:	89a0      	ldrh	r0, [r4, #12]
 804908e:	4305      	orrs	r5, r0
 8049090:	81a5      	strh	r5, [r4, #12]
 8049092:	e7cd      	b.n	8049030 <__smakebuf_r+0x18>
 8049094:	08047071 	.word	0x08047071

08049098 <malloc>:
 8049098:	4b02      	ldr	r3, [pc, #8]	; (80490a4 <malloc+0xc>)
 804909a:	4601      	mov	r1, r0
 804909c:	6818      	ldr	r0, [r3, #0]
 804909e:	f7fe b917 	b.w	80472d0 <_malloc_r>
 80490a2:	bf00      	nop
 80490a4:	20000010 	.word	0x20000010

080490a8 <__malloc_lock>:
 80490a8:	4801      	ldr	r0, [pc, #4]	; (80490b0 <__malloc_lock+0x8>)
 80490aa:	f7fe b8d8 	b.w	804725e <__retarget_lock_acquire_recursive>
 80490ae:	bf00      	nop
 80490b0:	2000438c 	.word	0x2000438c

080490b4 <__malloc_unlock>:
 80490b4:	4801      	ldr	r0, [pc, #4]	; (80490bc <__malloc_unlock+0x8>)
 80490b6:	f7fe b8d3 	b.w	8047260 <__retarget_lock_release_recursive>
 80490ba:	bf00      	nop
 80490bc:	2000438c 	.word	0x2000438c

080490c0 <_Balloc>:
 80490c0:	b570      	push	{r4, r5, r6, lr}
 80490c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80490c4:	4604      	mov	r4, r0
 80490c6:	460d      	mov	r5, r1
 80490c8:	b976      	cbnz	r6, 80490e8 <_Balloc+0x28>
 80490ca:	2010      	movs	r0, #16
 80490cc:	f7ff ffe4 	bl	8049098 <malloc>
 80490d0:	4602      	mov	r2, r0
 80490d2:	6260      	str	r0, [r4, #36]	; 0x24
 80490d4:	b920      	cbnz	r0, 80490e0 <_Balloc+0x20>
 80490d6:	4b18      	ldr	r3, [pc, #96]	; (8049138 <_Balloc+0x78>)
 80490d8:	4818      	ldr	r0, [pc, #96]	; (804913c <_Balloc+0x7c>)
 80490da:	2166      	movs	r1, #102	; 0x66
 80490dc:	f000 fe9e 	bl	8049e1c <__assert_func>
 80490e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80490e4:	6006      	str	r6, [r0, #0]
 80490e6:	60c6      	str	r6, [r0, #12]
 80490e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80490ea:	68f3      	ldr	r3, [r6, #12]
 80490ec:	b183      	cbz	r3, 8049110 <_Balloc+0x50>
 80490ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80490f0:	68db      	ldr	r3, [r3, #12]
 80490f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80490f6:	b9b8      	cbnz	r0, 8049128 <_Balloc+0x68>
 80490f8:	2101      	movs	r1, #1
 80490fa:	fa01 f605 	lsl.w	r6, r1, r5
 80490fe:	1d72      	adds	r2, r6, #5
 8049100:	0092      	lsls	r2, r2, #2
 8049102:	4620      	mov	r0, r4
 8049104:	f000 fb60 	bl	80497c8 <_calloc_r>
 8049108:	b160      	cbz	r0, 8049124 <_Balloc+0x64>
 804910a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 804910e:	e00e      	b.n	804912e <_Balloc+0x6e>
 8049110:	2221      	movs	r2, #33	; 0x21
 8049112:	2104      	movs	r1, #4
 8049114:	4620      	mov	r0, r4
 8049116:	f000 fb57 	bl	80497c8 <_calloc_r>
 804911a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804911c:	60f0      	str	r0, [r6, #12]
 804911e:	68db      	ldr	r3, [r3, #12]
 8049120:	2b00      	cmp	r3, #0
 8049122:	d1e4      	bne.n	80490ee <_Balloc+0x2e>
 8049124:	2000      	movs	r0, #0
 8049126:	bd70      	pop	{r4, r5, r6, pc}
 8049128:	6802      	ldr	r2, [r0, #0]
 804912a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 804912e:	2300      	movs	r3, #0
 8049130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8049134:	e7f7      	b.n	8049126 <_Balloc+0x66>
 8049136:	bf00      	nop
 8049138:	0804a1f9 	.word	0x0804a1f9
 804913c:	0804a27c 	.word	0x0804a27c

08049140 <_Bfree>:
 8049140:	b570      	push	{r4, r5, r6, lr}
 8049142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8049144:	4605      	mov	r5, r0
 8049146:	460c      	mov	r4, r1
 8049148:	b976      	cbnz	r6, 8049168 <_Bfree+0x28>
 804914a:	2010      	movs	r0, #16
 804914c:	f7ff ffa4 	bl	8049098 <malloc>
 8049150:	4602      	mov	r2, r0
 8049152:	6268      	str	r0, [r5, #36]	; 0x24
 8049154:	b920      	cbnz	r0, 8049160 <_Bfree+0x20>
 8049156:	4b09      	ldr	r3, [pc, #36]	; (804917c <_Bfree+0x3c>)
 8049158:	4809      	ldr	r0, [pc, #36]	; (8049180 <_Bfree+0x40>)
 804915a:	218a      	movs	r1, #138	; 0x8a
 804915c:	f000 fe5e 	bl	8049e1c <__assert_func>
 8049160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8049164:	6006      	str	r6, [r0, #0]
 8049166:	60c6      	str	r6, [r0, #12]
 8049168:	b13c      	cbz	r4, 804917a <_Bfree+0x3a>
 804916a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 804916c:	6862      	ldr	r2, [r4, #4]
 804916e:	68db      	ldr	r3, [r3, #12]
 8049170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8049174:	6021      	str	r1, [r4, #0]
 8049176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 804917a:	bd70      	pop	{r4, r5, r6, pc}
 804917c:	0804a1f9 	.word	0x0804a1f9
 8049180:	0804a27c 	.word	0x0804a27c

08049184 <__multadd>:
 8049184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8049188:	690d      	ldr	r5, [r1, #16]
 804918a:	4607      	mov	r7, r0
 804918c:	460c      	mov	r4, r1
 804918e:	461e      	mov	r6, r3
 8049190:	f101 0c14 	add.w	ip, r1, #20
 8049194:	2000      	movs	r0, #0
 8049196:	f8dc 3000 	ldr.w	r3, [ip]
 804919a:	b299      	uxth	r1, r3
 804919c:	fb02 6101 	mla	r1, r2, r1, r6
 80491a0:	0c1e      	lsrs	r6, r3, #16
 80491a2:	0c0b      	lsrs	r3, r1, #16
 80491a4:	fb02 3306 	mla	r3, r2, r6, r3
 80491a8:	b289      	uxth	r1, r1
 80491aa:	3001      	adds	r0, #1
 80491ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80491b0:	4285      	cmp	r5, r0
 80491b2:	f84c 1b04 	str.w	r1, [ip], #4
 80491b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80491ba:	dcec      	bgt.n	8049196 <__multadd+0x12>
 80491bc:	b30e      	cbz	r6, 8049202 <__multadd+0x7e>
 80491be:	68a3      	ldr	r3, [r4, #8]
 80491c0:	42ab      	cmp	r3, r5
 80491c2:	dc19      	bgt.n	80491f8 <__multadd+0x74>
 80491c4:	6861      	ldr	r1, [r4, #4]
 80491c6:	4638      	mov	r0, r7
 80491c8:	3101      	adds	r1, #1
 80491ca:	f7ff ff79 	bl	80490c0 <_Balloc>
 80491ce:	4680      	mov	r8, r0
 80491d0:	b928      	cbnz	r0, 80491de <__multadd+0x5a>
 80491d2:	4602      	mov	r2, r0
 80491d4:	4b0c      	ldr	r3, [pc, #48]	; (8049208 <__multadd+0x84>)
 80491d6:	480d      	ldr	r0, [pc, #52]	; (804920c <__multadd+0x88>)
 80491d8:	21b5      	movs	r1, #181	; 0xb5
 80491da:	f000 fe1f 	bl	8049e1c <__assert_func>
 80491de:	6922      	ldr	r2, [r4, #16]
 80491e0:	3202      	adds	r2, #2
 80491e2:	f104 010c 	add.w	r1, r4, #12
 80491e6:	0092      	lsls	r2, r2, #2
 80491e8:	300c      	adds	r0, #12
 80491ea:	f7fe f83a 	bl	8047262 <memcpy>
 80491ee:	4621      	mov	r1, r4
 80491f0:	4638      	mov	r0, r7
 80491f2:	f7ff ffa5 	bl	8049140 <_Bfree>
 80491f6:	4644      	mov	r4, r8
 80491f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80491fc:	3501      	adds	r5, #1
 80491fe:	615e      	str	r6, [r3, #20]
 8049200:	6125      	str	r5, [r4, #16]
 8049202:	4620      	mov	r0, r4
 8049204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8049208:	0804a26b 	.word	0x0804a26b
 804920c:	0804a27c 	.word	0x0804a27c

08049210 <__hi0bits>:
 8049210:	0c03      	lsrs	r3, r0, #16
 8049212:	041b      	lsls	r3, r3, #16
 8049214:	b9d3      	cbnz	r3, 804924c <__hi0bits+0x3c>
 8049216:	0400      	lsls	r0, r0, #16
 8049218:	2310      	movs	r3, #16
 804921a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 804921e:	bf04      	itt	eq
 8049220:	0200      	lsleq	r0, r0, #8
 8049222:	3308      	addeq	r3, #8
 8049224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8049228:	bf04      	itt	eq
 804922a:	0100      	lsleq	r0, r0, #4
 804922c:	3304      	addeq	r3, #4
 804922e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8049232:	bf04      	itt	eq
 8049234:	0080      	lsleq	r0, r0, #2
 8049236:	3302      	addeq	r3, #2
 8049238:	2800      	cmp	r0, #0
 804923a:	db05      	blt.n	8049248 <__hi0bits+0x38>
 804923c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8049240:	f103 0301 	add.w	r3, r3, #1
 8049244:	bf08      	it	eq
 8049246:	2320      	moveq	r3, #32
 8049248:	4618      	mov	r0, r3
 804924a:	4770      	bx	lr
 804924c:	2300      	movs	r3, #0
 804924e:	e7e4      	b.n	804921a <__hi0bits+0xa>

08049250 <__lo0bits>:
 8049250:	6803      	ldr	r3, [r0, #0]
 8049252:	f013 0207 	ands.w	r2, r3, #7
 8049256:	4601      	mov	r1, r0
 8049258:	d00b      	beq.n	8049272 <__lo0bits+0x22>
 804925a:	07da      	lsls	r2, r3, #31
 804925c:	d423      	bmi.n	80492a6 <__lo0bits+0x56>
 804925e:	0798      	lsls	r0, r3, #30
 8049260:	bf49      	itett	mi
 8049262:	085b      	lsrmi	r3, r3, #1
 8049264:	089b      	lsrpl	r3, r3, #2
 8049266:	2001      	movmi	r0, #1
 8049268:	600b      	strmi	r3, [r1, #0]
 804926a:	bf5c      	itt	pl
 804926c:	600b      	strpl	r3, [r1, #0]
 804926e:	2002      	movpl	r0, #2
 8049270:	4770      	bx	lr
 8049272:	b298      	uxth	r0, r3
 8049274:	b9a8      	cbnz	r0, 80492a2 <__lo0bits+0x52>
 8049276:	0c1b      	lsrs	r3, r3, #16
 8049278:	2010      	movs	r0, #16
 804927a:	b2da      	uxtb	r2, r3
 804927c:	b90a      	cbnz	r2, 8049282 <__lo0bits+0x32>
 804927e:	3008      	adds	r0, #8
 8049280:	0a1b      	lsrs	r3, r3, #8
 8049282:	071a      	lsls	r2, r3, #28
 8049284:	bf04      	itt	eq
 8049286:	091b      	lsreq	r3, r3, #4
 8049288:	3004      	addeq	r0, #4
 804928a:	079a      	lsls	r2, r3, #30
 804928c:	bf04      	itt	eq
 804928e:	089b      	lsreq	r3, r3, #2
 8049290:	3002      	addeq	r0, #2
 8049292:	07da      	lsls	r2, r3, #31
 8049294:	d403      	bmi.n	804929e <__lo0bits+0x4e>
 8049296:	085b      	lsrs	r3, r3, #1
 8049298:	f100 0001 	add.w	r0, r0, #1
 804929c:	d005      	beq.n	80492aa <__lo0bits+0x5a>
 804929e:	600b      	str	r3, [r1, #0]
 80492a0:	4770      	bx	lr
 80492a2:	4610      	mov	r0, r2
 80492a4:	e7e9      	b.n	804927a <__lo0bits+0x2a>
 80492a6:	2000      	movs	r0, #0
 80492a8:	4770      	bx	lr
 80492aa:	2020      	movs	r0, #32
 80492ac:	4770      	bx	lr
	...

080492b0 <__i2b>:
 80492b0:	b510      	push	{r4, lr}
 80492b2:	460c      	mov	r4, r1
 80492b4:	2101      	movs	r1, #1
 80492b6:	f7ff ff03 	bl	80490c0 <_Balloc>
 80492ba:	4602      	mov	r2, r0
 80492bc:	b928      	cbnz	r0, 80492ca <__i2b+0x1a>
 80492be:	4b05      	ldr	r3, [pc, #20]	; (80492d4 <__i2b+0x24>)
 80492c0:	4805      	ldr	r0, [pc, #20]	; (80492d8 <__i2b+0x28>)
 80492c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80492c6:	f000 fda9 	bl	8049e1c <__assert_func>
 80492ca:	2301      	movs	r3, #1
 80492cc:	6144      	str	r4, [r0, #20]
 80492ce:	6103      	str	r3, [r0, #16]
 80492d0:	bd10      	pop	{r4, pc}
 80492d2:	bf00      	nop
 80492d4:	0804a26b 	.word	0x0804a26b
 80492d8:	0804a27c 	.word	0x0804a27c

080492dc <__multiply>:
 80492dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80492e0:	4691      	mov	r9, r2
 80492e2:	690a      	ldr	r2, [r1, #16]
 80492e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80492e8:	429a      	cmp	r2, r3
 80492ea:	bfb8      	it	lt
 80492ec:	460b      	movlt	r3, r1
 80492ee:	460c      	mov	r4, r1
 80492f0:	bfbc      	itt	lt
 80492f2:	464c      	movlt	r4, r9
 80492f4:	4699      	movlt	r9, r3
 80492f6:	6927      	ldr	r7, [r4, #16]
 80492f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80492fc:	68a3      	ldr	r3, [r4, #8]
 80492fe:	6861      	ldr	r1, [r4, #4]
 8049300:	eb07 060a 	add.w	r6, r7, sl
 8049304:	42b3      	cmp	r3, r6
 8049306:	b085      	sub	sp, #20
 8049308:	bfb8      	it	lt
 804930a:	3101      	addlt	r1, #1
 804930c:	f7ff fed8 	bl	80490c0 <_Balloc>
 8049310:	b930      	cbnz	r0, 8049320 <__multiply+0x44>
 8049312:	4602      	mov	r2, r0
 8049314:	4b44      	ldr	r3, [pc, #272]	; (8049428 <__multiply+0x14c>)
 8049316:	4845      	ldr	r0, [pc, #276]	; (804942c <__multiply+0x150>)
 8049318:	f240 115d 	movw	r1, #349	; 0x15d
 804931c:	f000 fd7e 	bl	8049e1c <__assert_func>
 8049320:	f100 0514 	add.w	r5, r0, #20
 8049324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8049328:	462b      	mov	r3, r5
 804932a:	2200      	movs	r2, #0
 804932c:	4543      	cmp	r3, r8
 804932e:	d321      	bcc.n	8049374 <__multiply+0x98>
 8049330:	f104 0314 	add.w	r3, r4, #20
 8049334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8049338:	f109 0314 	add.w	r3, r9, #20
 804933c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8049340:	9202      	str	r2, [sp, #8]
 8049342:	1b3a      	subs	r2, r7, r4
 8049344:	3a15      	subs	r2, #21
 8049346:	f022 0203 	bic.w	r2, r2, #3
 804934a:	3204      	adds	r2, #4
 804934c:	f104 0115 	add.w	r1, r4, #21
 8049350:	428f      	cmp	r7, r1
 8049352:	bf38      	it	cc
 8049354:	2204      	movcc	r2, #4
 8049356:	9201      	str	r2, [sp, #4]
 8049358:	9a02      	ldr	r2, [sp, #8]
 804935a:	9303      	str	r3, [sp, #12]
 804935c:	429a      	cmp	r2, r3
 804935e:	d80c      	bhi.n	804937a <__multiply+0x9e>
 8049360:	2e00      	cmp	r6, #0
 8049362:	dd03      	ble.n	804936c <__multiply+0x90>
 8049364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8049368:	2b00      	cmp	r3, #0
 804936a:	d05a      	beq.n	8049422 <__multiply+0x146>
 804936c:	6106      	str	r6, [r0, #16]
 804936e:	b005      	add	sp, #20
 8049370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049374:	f843 2b04 	str.w	r2, [r3], #4
 8049378:	e7d8      	b.n	804932c <__multiply+0x50>
 804937a:	f8b3 a000 	ldrh.w	sl, [r3]
 804937e:	f1ba 0f00 	cmp.w	sl, #0
 8049382:	d024      	beq.n	80493ce <__multiply+0xf2>
 8049384:	f104 0e14 	add.w	lr, r4, #20
 8049388:	46a9      	mov	r9, r5
 804938a:	f04f 0c00 	mov.w	ip, #0
 804938e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8049392:	f8d9 1000 	ldr.w	r1, [r9]
 8049396:	fa1f fb82 	uxth.w	fp, r2
 804939a:	b289      	uxth	r1, r1
 804939c:	fb0a 110b 	mla	r1, sl, fp, r1
 80493a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80493a4:	f8d9 2000 	ldr.w	r2, [r9]
 80493a8:	4461      	add	r1, ip
 80493aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80493ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80493b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80493b6:	b289      	uxth	r1, r1
 80493b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80493bc:	4577      	cmp	r7, lr
 80493be:	f849 1b04 	str.w	r1, [r9], #4
 80493c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80493c6:	d8e2      	bhi.n	804938e <__multiply+0xb2>
 80493c8:	9a01      	ldr	r2, [sp, #4]
 80493ca:	f845 c002 	str.w	ip, [r5, r2]
 80493ce:	9a03      	ldr	r2, [sp, #12]
 80493d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80493d4:	3304      	adds	r3, #4
 80493d6:	f1b9 0f00 	cmp.w	r9, #0
 80493da:	d020      	beq.n	804941e <__multiply+0x142>
 80493dc:	6829      	ldr	r1, [r5, #0]
 80493de:	f104 0c14 	add.w	ip, r4, #20
 80493e2:	46ae      	mov	lr, r5
 80493e4:	f04f 0a00 	mov.w	sl, #0
 80493e8:	f8bc b000 	ldrh.w	fp, [ip]
 80493ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80493f0:	fb09 220b 	mla	r2, r9, fp, r2
 80493f4:	4492      	add	sl, r2
 80493f6:	b289      	uxth	r1, r1
 80493f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80493fc:	f84e 1b04 	str.w	r1, [lr], #4
 8049400:	f85c 2b04 	ldr.w	r2, [ip], #4
 8049404:	f8be 1000 	ldrh.w	r1, [lr]
 8049408:	0c12      	lsrs	r2, r2, #16
 804940a:	fb09 1102 	mla	r1, r9, r2, r1
 804940e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8049412:	4567      	cmp	r7, ip
 8049414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8049418:	d8e6      	bhi.n	80493e8 <__multiply+0x10c>
 804941a:	9a01      	ldr	r2, [sp, #4]
 804941c:	50a9      	str	r1, [r5, r2]
 804941e:	3504      	adds	r5, #4
 8049420:	e79a      	b.n	8049358 <__multiply+0x7c>
 8049422:	3e01      	subs	r6, #1
 8049424:	e79c      	b.n	8049360 <__multiply+0x84>
 8049426:	bf00      	nop
 8049428:	0804a26b 	.word	0x0804a26b
 804942c:	0804a27c 	.word	0x0804a27c

08049430 <__pow5mult>:
 8049430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8049434:	4615      	mov	r5, r2
 8049436:	f012 0203 	ands.w	r2, r2, #3
 804943a:	4606      	mov	r6, r0
 804943c:	460f      	mov	r7, r1
 804943e:	d007      	beq.n	8049450 <__pow5mult+0x20>
 8049440:	4c25      	ldr	r4, [pc, #148]	; (80494d8 <__pow5mult+0xa8>)
 8049442:	3a01      	subs	r2, #1
 8049444:	2300      	movs	r3, #0
 8049446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 804944a:	f7ff fe9b 	bl	8049184 <__multadd>
 804944e:	4607      	mov	r7, r0
 8049450:	10ad      	asrs	r5, r5, #2
 8049452:	d03d      	beq.n	80494d0 <__pow5mult+0xa0>
 8049454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8049456:	b97c      	cbnz	r4, 8049478 <__pow5mult+0x48>
 8049458:	2010      	movs	r0, #16
 804945a:	f7ff fe1d 	bl	8049098 <malloc>
 804945e:	4602      	mov	r2, r0
 8049460:	6270      	str	r0, [r6, #36]	; 0x24
 8049462:	b928      	cbnz	r0, 8049470 <__pow5mult+0x40>
 8049464:	4b1d      	ldr	r3, [pc, #116]	; (80494dc <__pow5mult+0xac>)
 8049466:	481e      	ldr	r0, [pc, #120]	; (80494e0 <__pow5mult+0xb0>)
 8049468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 804946c:	f000 fcd6 	bl	8049e1c <__assert_func>
 8049470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8049474:	6004      	str	r4, [r0, #0]
 8049476:	60c4      	str	r4, [r0, #12]
 8049478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 804947c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8049480:	b94c      	cbnz	r4, 8049496 <__pow5mult+0x66>
 8049482:	f240 2171 	movw	r1, #625	; 0x271
 8049486:	4630      	mov	r0, r6
 8049488:	f7ff ff12 	bl	80492b0 <__i2b>
 804948c:	2300      	movs	r3, #0
 804948e:	f8c8 0008 	str.w	r0, [r8, #8]
 8049492:	4604      	mov	r4, r0
 8049494:	6003      	str	r3, [r0, #0]
 8049496:	f04f 0900 	mov.w	r9, #0
 804949a:	07eb      	lsls	r3, r5, #31
 804949c:	d50a      	bpl.n	80494b4 <__pow5mult+0x84>
 804949e:	4639      	mov	r1, r7
 80494a0:	4622      	mov	r2, r4
 80494a2:	4630      	mov	r0, r6
 80494a4:	f7ff ff1a 	bl	80492dc <__multiply>
 80494a8:	4639      	mov	r1, r7
 80494aa:	4680      	mov	r8, r0
 80494ac:	4630      	mov	r0, r6
 80494ae:	f7ff fe47 	bl	8049140 <_Bfree>
 80494b2:	4647      	mov	r7, r8
 80494b4:	106d      	asrs	r5, r5, #1
 80494b6:	d00b      	beq.n	80494d0 <__pow5mult+0xa0>
 80494b8:	6820      	ldr	r0, [r4, #0]
 80494ba:	b938      	cbnz	r0, 80494cc <__pow5mult+0x9c>
 80494bc:	4622      	mov	r2, r4
 80494be:	4621      	mov	r1, r4
 80494c0:	4630      	mov	r0, r6
 80494c2:	f7ff ff0b 	bl	80492dc <__multiply>
 80494c6:	6020      	str	r0, [r4, #0]
 80494c8:	f8c0 9000 	str.w	r9, [r0]
 80494cc:	4604      	mov	r4, r0
 80494ce:	e7e4      	b.n	804949a <__pow5mult+0x6a>
 80494d0:	4638      	mov	r0, r7
 80494d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80494d6:	bf00      	nop
 80494d8:	0804a3c8 	.word	0x0804a3c8
 80494dc:	0804a1f9 	.word	0x0804a1f9
 80494e0:	0804a27c 	.word	0x0804a27c

080494e4 <__lshift>:
 80494e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80494e8:	460c      	mov	r4, r1
 80494ea:	6849      	ldr	r1, [r1, #4]
 80494ec:	6923      	ldr	r3, [r4, #16]
 80494ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80494f2:	68a3      	ldr	r3, [r4, #8]
 80494f4:	4607      	mov	r7, r0
 80494f6:	4691      	mov	r9, r2
 80494f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80494fc:	f108 0601 	add.w	r6, r8, #1
 8049500:	42b3      	cmp	r3, r6
 8049502:	db0b      	blt.n	804951c <__lshift+0x38>
 8049504:	4638      	mov	r0, r7
 8049506:	f7ff fddb 	bl	80490c0 <_Balloc>
 804950a:	4605      	mov	r5, r0
 804950c:	b948      	cbnz	r0, 8049522 <__lshift+0x3e>
 804950e:	4602      	mov	r2, r0
 8049510:	4b2a      	ldr	r3, [pc, #168]	; (80495bc <__lshift+0xd8>)
 8049512:	482b      	ldr	r0, [pc, #172]	; (80495c0 <__lshift+0xdc>)
 8049514:	f240 11d9 	movw	r1, #473	; 0x1d9
 8049518:	f000 fc80 	bl	8049e1c <__assert_func>
 804951c:	3101      	adds	r1, #1
 804951e:	005b      	lsls	r3, r3, #1
 8049520:	e7ee      	b.n	8049500 <__lshift+0x1c>
 8049522:	2300      	movs	r3, #0
 8049524:	f100 0114 	add.w	r1, r0, #20
 8049528:	f100 0210 	add.w	r2, r0, #16
 804952c:	4618      	mov	r0, r3
 804952e:	4553      	cmp	r3, sl
 8049530:	db37      	blt.n	80495a2 <__lshift+0xbe>
 8049532:	6920      	ldr	r0, [r4, #16]
 8049534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8049538:	f104 0314 	add.w	r3, r4, #20
 804953c:	f019 091f 	ands.w	r9, r9, #31
 8049540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8049544:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8049548:	d02f      	beq.n	80495aa <__lshift+0xc6>
 804954a:	f1c9 0e20 	rsb	lr, r9, #32
 804954e:	468a      	mov	sl, r1
 8049550:	f04f 0c00 	mov.w	ip, #0
 8049554:	681a      	ldr	r2, [r3, #0]
 8049556:	fa02 f209 	lsl.w	r2, r2, r9
 804955a:	ea42 020c 	orr.w	r2, r2, ip
 804955e:	f84a 2b04 	str.w	r2, [sl], #4
 8049562:	f853 2b04 	ldr.w	r2, [r3], #4
 8049566:	4298      	cmp	r0, r3
 8049568:	fa22 fc0e 	lsr.w	ip, r2, lr
 804956c:	d8f2      	bhi.n	8049554 <__lshift+0x70>
 804956e:	1b03      	subs	r3, r0, r4
 8049570:	3b15      	subs	r3, #21
 8049572:	f023 0303 	bic.w	r3, r3, #3
 8049576:	3304      	adds	r3, #4
 8049578:	f104 0215 	add.w	r2, r4, #21
 804957c:	4290      	cmp	r0, r2
 804957e:	bf38      	it	cc
 8049580:	2304      	movcc	r3, #4
 8049582:	f841 c003 	str.w	ip, [r1, r3]
 8049586:	f1bc 0f00 	cmp.w	ip, #0
 804958a:	d001      	beq.n	8049590 <__lshift+0xac>
 804958c:	f108 0602 	add.w	r6, r8, #2
 8049590:	3e01      	subs	r6, #1
 8049592:	4638      	mov	r0, r7
 8049594:	612e      	str	r6, [r5, #16]
 8049596:	4621      	mov	r1, r4
 8049598:	f7ff fdd2 	bl	8049140 <_Bfree>
 804959c:	4628      	mov	r0, r5
 804959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80495a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80495a6:	3301      	adds	r3, #1
 80495a8:	e7c1      	b.n	804952e <__lshift+0x4a>
 80495aa:	3904      	subs	r1, #4
 80495ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80495b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80495b4:	4298      	cmp	r0, r3
 80495b6:	d8f9      	bhi.n	80495ac <__lshift+0xc8>
 80495b8:	e7ea      	b.n	8049590 <__lshift+0xac>
 80495ba:	bf00      	nop
 80495bc:	0804a26b 	.word	0x0804a26b
 80495c0:	0804a27c 	.word	0x0804a27c

080495c4 <__mcmp>:
 80495c4:	b530      	push	{r4, r5, lr}
 80495c6:	6902      	ldr	r2, [r0, #16]
 80495c8:	690c      	ldr	r4, [r1, #16]
 80495ca:	1b12      	subs	r2, r2, r4
 80495cc:	d10e      	bne.n	80495ec <__mcmp+0x28>
 80495ce:	f100 0314 	add.w	r3, r0, #20
 80495d2:	3114      	adds	r1, #20
 80495d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80495d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80495dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80495e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80495e4:	42a5      	cmp	r5, r4
 80495e6:	d003      	beq.n	80495f0 <__mcmp+0x2c>
 80495e8:	d305      	bcc.n	80495f6 <__mcmp+0x32>
 80495ea:	2201      	movs	r2, #1
 80495ec:	4610      	mov	r0, r2
 80495ee:	bd30      	pop	{r4, r5, pc}
 80495f0:	4283      	cmp	r3, r0
 80495f2:	d3f3      	bcc.n	80495dc <__mcmp+0x18>
 80495f4:	e7fa      	b.n	80495ec <__mcmp+0x28>
 80495f6:	f04f 32ff 	mov.w	r2, #4294967295
 80495fa:	e7f7      	b.n	80495ec <__mcmp+0x28>

080495fc <__mdiff>:
 80495fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049600:	460c      	mov	r4, r1
 8049602:	4606      	mov	r6, r0
 8049604:	4611      	mov	r1, r2
 8049606:	4620      	mov	r0, r4
 8049608:	4690      	mov	r8, r2
 804960a:	f7ff ffdb 	bl	80495c4 <__mcmp>
 804960e:	1e05      	subs	r5, r0, #0
 8049610:	d110      	bne.n	8049634 <__mdiff+0x38>
 8049612:	4629      	mov	r1, r5
 8049614:	4630      	mov	r0, r6
 8049616:	f7ff fd53 	bl	80490c0 <_Balloc>
 804961a:	b930      	cbnz	r0, 804962a <__mdiff+0x2e>
 804961c:	4b3a      	ldr	r3, [pc, #232]	; (8049708 <__mdiff+0x10c>)
 804961e:	4602      	mov	r2, r0
 8049620:	f240 2132 	movw	r1, #562	; 0x232
 8049624:	4839      	ldr	r0, [pc, #228]	; (804970c <__mdiff+0x110>)
 8049626:	f000 fbf9 	bl	8049e1c <__assert_func>
 804962a:	2301      	movs	r3, #1
 804962c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8049630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049634:	bfa4      	itt	ge
 8049636:	4643      	movge	r3, r8
 8049638:	46a0      	movge	r8, r4
 804963a:	4630      	mov	r0, r6
 804963c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8049640:	bfa6      	itte	ge
 8049642:	461c      	movge	r4, r3
 8049644:	2500      	movge	r5, #0
 8049646:	2501      	movlt	r5, #1
 8049648:	f7ff fd3a 	bl	80490c0 <_Balloc>
 804964c:	b920      	cbnz	r0, 8049658 <__mdiff+0x5c>
 804964e:	4b2e      	ldr	r3, [pc, #184]	; (8049708 <__mdiff+0x10c>)
 8049650:	4602      	mov	r2, r0
 8049652:	f44f 7110 	mov.w	r1, #576	; 0x240
 8049656:	e7e5      	b.n	8049624 <__mdiff+0x28>
 8049658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 804965c:	6926      	ldr	r6, [r4, #16]
 804965e:	60c5      	str	r5, [r0, #12]
 8049660:	f104 0914 	add.w	r9, r4, #20
 8049664:	f108 0514 	add.w	r5, r8, #20
 8049668:	f100 0e14 	add.w	lr, r0, #20
 804966c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8049670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8049674:	f108 0210 	add.w	r2, r8, #16
 8049678:	46f2      	mov	sl, lr
 804967a:	2100      	movs	r1, #0
 804967c:	f859 3b04 	ldr.w	r3, [r9], #4
 8049680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8049684:	fa1f f883 	uxth.w	r8, r3
 8049688:	fa11 f18b 	uxtah	r1, r1, fp
 804968c:	0c1b      	lsrs	r3, r3, #16
 804968e:	eba1 0808 	sub.w	r8, r1, r8
 8049692:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8049696:	eb03 4328 	add.w	r3, r3, r8, asr #16
 804969a:	fa1f f888 	uxth.w	r8, r8
 804969e:	1419      	asrs	r1, r3, #16
 80496a0:	454e      	cmp	r6, r9
 80496a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80496a6:	f84a 3b04 	str.w	r3, [sl], #4
 80496aa:	d8e7      	bhi.n	804967c <__mdiff+0x80>
 80496ac:	1b33      	subs	r3, r6, r4
 80496ae:	3b15      	subs	r3, #21
 80496b0:	f023 0303 	bic.w	r3, r3, #3
 80496b4:	3304      	adds	r3, #4
 80496b6:	3415      	adds	r4, #21
 80496b8:	42a6      	cmp	r6, r4
 80496ba:	bf38      	it	cc
 80496bc:	2304      	movcc	r3, #4
 80496be:	441d      	add	r5, r3
 80496c0:	4473      	add	r3, lr
 80496c2:	469e      	mov	lr, r3
 80496c4:	462e      	mov	r6, r5
 80496c6:	4566      	cmp	r6, ip
 80496c8:	d30e      	bcc.n	80496e8 <__mdiff+0xec>
 80496ca:	f10c 0203 	add.w	r2, ip, #3
 80496ce:	1b52      	subs	r2, r2, r5
 80496d0:	f022 0203 	bic.w	r2, r2, #3
 80496d4:	3d03      	subs	r5, #3
 80496d6:	45ac      	cmp	ip, r5
 80496d8:	bf38      	it	cc
 80496da:	2200      	movcc	r2, #0
 80496dc:	441a      	add	r2, r3
 80496de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80496e2:	b17b      	cbz	r3, 8049704 <__mdiff+0x108>
 80496e4:	6107      	str	r7, [r0, #16]
 80496e6:	e7a3      	b.n	8049630 <__mdiff+0x34>
 80496e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80496ec:	fa11 f288 	uxtah	r2, r1, r8
 80496f0:	1414      	asrs	r4, r2, #16
 80496f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80496f6:	b292      	uxth	r2, r2
 80496f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80496fc:	f84e 2b04 	str.w	r2, [lr], #4
 8049700:	1421      	asrs	r1, r4, #16
 8049702:	e7e0      	b.n	80496c6 <__mdiff+0xca>
 8049704:	3f01      	subs	r7, #1
 8049706:	e7ea      	b.n	80496de <__mdiff+0xe2>
 8049708:	0804a26b 	.word	0x0804a26b
 804970c:	0804a27c 	.word	0x0804a27c

08049710 <__d2b>:
 8049710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8049714:	4689      	mov	r9, r1
 8049716:	2101      	movs	r1, #1
 8049718:	ec57 6b10 	vmov	r6, r7, d0
 804971c:	4690      	mov	r8, r2
 804971e:	f7ff fccf 	bl	80490c0 <_Balloc>
 8049722:	4604      	mov	r4, r0
 8049724:	b930      	cbnz	r0, 8049734 <__d2b+0x24>
 8049726:	4602      	mov	r2, r0
 8049728:	4b25      	ldr	r3, [pc, #148]	; (80497c0 <__d2b+0xb0>)
 804972a:	4826      	ldr	r0, [pc, #152]	; (80497c4 <__d2b+0xb4>)
 804972c:	f240 310a 	movw	r1, #778	; 0x30a
 8049730:	f000 fb74 	bl	8049e1c <__assert_func>
 8049734:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8049738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 804973c:	bb35      	cbnz	r5, 804978c <__d2b+0x7c>
 804973e:	2e00      	cmp	r6, #0
 8049740:	9301      	str	r3, [sp, #4]
 8049742:	d028      	beq.n	8049796 <__d2b+0x86>
 8049744:	4668      	mov	r0, sp
 8049746:	9600      	str	r6, [sp, #0]
 8049748:	f7ff fd82 	bl	8049250 <__lo0bits>
 804974c:	9900      	ldr	r1, [sp, #0]
 804974e:	b300      	cbz	r0, 8049792 <__d2b+0x82>
 8049750:	9a01      	ldr	r2, [sp, #4]
 8049752:	f1c0 0320 	rsb	r3, r0, #32
 8049756:	fa02 f303 	lsl.w	r3, r2, r3
 804975a:	430b      	orrs	r3, r1
 804975c:	40c2      	lsrs	r2, r0
 804975e:	6163      	str	r3, [r4, #20]
 8049760:	9201      	str	r2, [sp, #4]
 8049762:	9b01      	ldr	r3, [sp, #4]
 8049764:	61a3      	str	r3, [r4, #24]
 8049766:	2b00      	cmp	r3, #0
 8049768:	bf14      	ite	ne
 804976a:	2202      	movne	r2, #2
 804976c:	2201      	moveq	r2, #1
 804976e:	6122      	str	r2, [r4, #16]
 8049770:	b1d5      	cbz	r5, 80497a8 <__d2b+0x98>
 8049772:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8049776:	4405      	add	r5, r0
 8049778:	f8c9 5000 	str.w	r5, [r9]
 804977c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8049780:	f8c8 0000 	str.w	r0, [r8]
 8049784:	4620      	mov	r0, r4
 8049786:	b003      	add	sp, #12
 8049788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804978c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8049790:	e7d5      	b.n	804973e <__d2b+0x2e>
 8049792:	6161      	str	r1, [r4, #20]
 8049794:	e7e5      	b.n	8049762 <__d2b+0x52>
 8049796:	a801      	add	r0, sp, #4
 8049798:	f7ff fd5a 	bl	8049250 <__lo0bits>
 804979c:	9b01      	ldr	r3, [sp, #4]
 804979e:	6163      	str	r3, [r4, #20]
 80497a0:	2201      	movs	r2, #1
 80497a2:	6122      	str	r2, [r4, #16]
 80497a4:	3020      	adds	r0, #32
 80497a6:	e7e3      	b.n	8049770 <__d2b+0x60>
 80497a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80497ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80497b0:	f8c9 0000 	str.w	r0, [r9]
 80497b4:	6918      	ldr	r0, [r3, #16]
 80497b6:	f7ff fd2b 	bl	8049210 <__hi0bits>
 80497ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80497be:	e7df      	b.n	8049780 <__d2b+0x70>
 80497c0:	0804a26b 	.word	0x0804a26b
 80497c4:	0804a27c 	.word	0x0804a27c

080497c8 <_calloc_r>:
 80497c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80497ca:	fba1 2402 	umull	r2, r4, r1, r2
 80497ce:	b94c      	cbnz	r4, 80497e4 <_calloc_r+0x1c>
 80497d0:	4611      	mov	r1, r2
 80497d2:	9201      	str	r2, [sp, #4]
 80497d4:	f7fd fd7c 	bl	80472d0 <_malloc_r>
 80497d8:	9a01      	ldr	r2, [sp, #4]
 80497da:	4605      	mov	r5, r0
 80497dc:	b930      	cbnz	r0, 80497ec <_calloc_r+0x24>
 80497de:	4628      	mov	r0, r5
 80497e0:	b003      	add	sp, #12
 80497e2:	bd30      	pop	{r4, r5, pc}
 80497e4:	220c      	movs	r2, #12
 80497e6:	6002      	str	r2, [r0, #0]
 80497e8:	2500      	movs	r5, #0
 80497ea:	e7f8      	b.n	80497de <_calloc_r+0x16>
 80497ec:	4621      	mov	r1, r4
 80497ee:	f7fd fd46 	bl	804727e <memset>
 80497f2:	e7f4      	b.n	80497de <_calloc_r+0x16>

080497f4 <_free_r>:
 80497f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80497f6:	2900      	cmp	r1, #0
 80497f8:	d044      	beq.n	8049884 <_free_r+0x90>
 80497fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80497fe:	9001      	str	r0, [sp, #4]
 8049800:	2b00      	cmp	r3, #0
 8049802:	f1a1 0404 	sub.w	r4, r1, #4
 8049806:	bfb8      	it	lt
 8049808:	18e4      	addlt	r4, r4, r3
 804980a:	f7ff fc4d 	bl	80490a8 <__malloc_lock>
 804980e:	4a1e      	ldr	r2, [pc, #120]	; (8049888 <_free_r+0x94>)
 8049810:	9801      	ldr	r0, [sp, #4]
 8049812:	6813      	ldr	r3, [r2, #0]
 8049814:	b933      	cbnz	r3, 8049824 <_free_r+0x30>
 8049816:	6063      	str	r3, [r4, #4]
 8049818:	6014      	str	r4, [r2, #0]
 804981a:	b003      	add	sp, #12
 804981c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8049820:	f7ff bc48 	b.w	80490b4 <__malloc_unlock>
 8049824:	42a3      	cmp	r3, r4
 8049826:	d908      	bls.n	804983a <_free_r+0x46>
 8049828:	6825      	ldr	r5, [r4, #0]
 804982a:	1961      	adds	r1, r4, r5
 804982c:	428b      	cmp	r3, r1
 804982e:	bf01      	itttt	eq
 8049830:	6819      	ldreq	r1, [r3, #0]
 8049832:	685b      	ldreq	r3, [r3, #4]
 8049834:	1949      	addeq	r1, r1, r5
 8049836:	6021      	streq	r1, [r4, #0]
 8049838:	e7ed      	b.n	8049816 <_free_r+0x22>
 804983a:	461a      	mov	r2, r3
 804983c:	685b      	ldr	r3, [r3, #4]
 804983e:	b10b      	cbz	r3, 8049844 <_free_r+0x50>
 8049840:	42a3      	cmp	r3, r4
 8049842:	d9fa      	bls.n	804983a <_free_r+0x46>
 8049844:	6811      	ldr	r1, [r2, #0]
 8049846:	1855      	adds	r5, r2, r1
 8049848:	42a5      	cmp	r5, r4
 804984a:	d10b      	bne.n	8049864 <_free_r+0x70>
 804984c:	6824      	ldr	r4, [r4, #0]
 804984e:	4421      	add	r1, r4
 8049850:	1854      	adds	r4, r2, r1
 8049852:	42a3      	cmp	r3, r4
 8049854:	6011      	str	r1, [r2, #0]
 8049856:	d1e0      	bne.n	804981a <_free_r+0x26>
 8049858:	681c      	ldr	r4, [r3, #0]
 804985a:	685b      	ldr	r3, [r3, #4]
 804985c:	6053      	str	r3, [r2, #4]
 804985e:	4421      	add	r1, r4
 8049860:	6011      	str	r1, [r2, #0]
 8049862:	e7da      	b.n	804981a <_free_r+0x26>
 8049864:	d902      	bls.n	804986c <_free_r+0x78>
 8049866:	230c      	movs	r3, #12
 8049868:	6003      	str	r3, [r0, #0]
 804986a:	e7d6      	b.n	804981a <_free_r+0x26>
 804986c:	6825      	ldr	r5, [r4, #0]
 804986e:	1961      	adds	r1, r4, r5
 8049870:	428b      	cmp	r3, r1
 8049872:	bf04      	itt	eq
 8049874:	6819      	ldreq	r1, [r3, #0]
 8049876:	685b      	ldreq	r3, [r3, #4]
 8049878:	6063      	str	r3, [r4, #4]
 804987a:	bf04      	itt	eq
 804987c:	1949      	addeq	r1, r1, r5
 804987e:	6021      	streq	r1, [r4, #0]
 8049880:	6054      	str	r4, [r2, #4]
 8049882:	e7ca      	b.n	804981a <_free_r+0x26>
 8049884:	b003      	add	sp, #12
 8049886:	bd30      	pop	{r4, r5, pc}
 8049888:	20004390 	.word	0x20004390

0804988c <__ssputs_r>:
 804988c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8049890:	688e      	ldr	r6, [r1, #8]
 8049892:	429e      	cmp	r6, r3
 8049894:	4682      	mov	sl, r0
 8049896:	460c      	mov	r4, r1
 8049898:	4690      	mov	r8, r2
 804989a:	461f      	mov	r7, r3
 804989c:	d838      	bhi.n	8049910 <__ssputs_r+0x84>
 804989e:	898a      	ldrh	r2, [r1, #12]
 80498a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80498a4:	d032      	beq.n	804990c <__ssputs_r+0x80>
 80498a6:	6825      	ldr	r5, [r4, #0]
 80498a8:	6909      	ldr	r1, [r1, #16]
 80498aa:	eba5 0901 	sub.w	r9, r5, r1
 80498ae:	6965      	ldr	r5, [r4, #20]
 80498b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80498b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80498b8:	3301      	adds	r3, #1
 80498ba:	444b      	add	r3, r9
 80498bc:	106d      	asrs	r5, r5, #1
 80498be:	429d      	cmp	r5, r3
 80498c0:	bf38      	it	cc
 80498c2:	461d      	movcc	r5, r3
 80498c4:	0553      	lsls	r3, r2, #21
 80498c6:	d531      	bpl.n	804992c <__ssputs_r+0xa0>
 80498c8:	4629      	mov	r1, r5
 80498ca:	f7fd fd01 	bl	80472d0 <_malloc_r>
 80498ce:	4606      	mov	r6, r0
 80498d0:	b950      	cbnz	r0, 80498e8 <__ssputs_r+0x5c>
 80498d2:	230c      	movs	r3, #12
 80498d4:	f8ca 3000 	str.w	r3, [sl]
 80498d8:	89a3      	ldrh	r3, [r4, #12]
 80498da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80498de:	81a3      	strh	r3, [r4, #12]
 80498e0:	f04f 30ff 	mov.w	r0, #4294967295
 80498e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80498e8:	6921      	ldr	r1, [r4, #16]
 80498ea:	464a      	mov	r2, r9
 80498ec:	f7fd fcb9 	bl	8047262 <memcpy>
 80498f0:	89a3      	ldrh	r3, [r4, #12]
 80498f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80498f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80498fa:	81a3      	strh	r3, [r4, #12]
 80498fc:	6126      	str	r6, [r4, #16]
 80498fe:	6165      	str	r5, [r4, #20]
 8049900:	444e      	add	r6, r9
 8049902:	eba5 0509 	sub.w	r5, r5, r9
 8049906:	6026      	str	r6, [r4, #0]
 8049908:	60a5      	str	r5, [r4, #8]
 804990a:	463e      	mov	r6, r7
 804990c:	42be      	cmp	r6, r7
 804990e:	d900      	bls.n	8049912 <__ssputs_r+0x86>
 8049910:	463e      	mov	r6, r7
 8049912:	6820      	ldr	r0, [r4, #0]
 8049914:	4632      	mov	r2, r6
 8049916:	4641      	mov	r1, r8
 8049918:	f000 fae4 	bl	8049ee4 <memmove>
 804991c:	68a3      	ldr	r3, [r4, #8]
 804991e:	1b9b      	subs	r3, r3, r6
 8049920:	60a3      	str	r3, [r4, #8]
 8049922:	6823      	ldr	r3, [r4, #0]
 8049924:	4433      	add	r3, r6
 8049926:	6023      	str	r3, [r4, #0]
 8049928:	2000      	movs	r0, #0
 804992a:	e7db      	b.n	80498e4 <__ssputs_r+0x58>
 804992c:	462a      	mov	r2, r5
 804992e:	f000 faf3 	bl	8049f18 <_realloc_r>
 8049932:	4606      	mov	r6, r0
 8049934:	2800      	cmp	r0, #0
 8049936:	d1e1      	bne.n	80498fc <__ssputs_r+0x70>
 8049938:	6921      	ldr	r1, [r4, #16]
 804993a:	4650      	mov	r0, sl
 804993c:	f7ff ff5a 	bl	80497f4 <_free_r>
 8049940:	e7c7      	b.n	80498d2 <__ssputs_r+0x46>
	...

08049944 <_svfiprintf_r>:
 8049944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049948:	4698      	mov	r8, r3
 804994a:	898b      	ldrh	r3, [r1, #12]
 804994c:	061b      	lsls	r3, r3, #24
 804994e:	b09d      	sub	sp, #116	; 0x74
 8049950:	4607      	mov	r7, r0
 8049952:	460d      	mov	r5, r1
 8049954:	4614      	mov	r4, r2
 8049956:	d50e      	bpl.n	8049976 <_svfiprintf_r+0x32>
 8049958:	690b      	ldr	r3, [r1, #16]
 804995a:	b963      	cbnz	r3, 8049976 <_svfiprintf_r+0x32>
 804995c:	2140      	movs	r1, #64	; 0x40
 804995e:	f7fd fcb7 	bl	80472d0 <_malloc_r>
 8049962:	6028      	str	r0, [r5, #0]
 8049964:	6128      	str	r0, [r5, #16]
 8049966:	b920      	cbnz	r0, 8049972 <_svfiprintf_r+0x2e>
 8049968:	230c      	movs	r3, #12
 804996a:	603b      	str	r3, [r7, #0]
 804996c:	f04f 30ff 	mov.w	r0, #4294967295
 8049970:	e0d1      	b.n	8049b16 <_svfiprintf_r+0x1d2>
 8049972:	2340      	movs	r3, #64	; 0x40
 8049974:	616b      	str	r3, [r5, #20]
 8049976:	2300      	movs	r3, #0
 8049978:	9309      	str	r3, [sp, #36]	; 0x24
 804997a:	2320      	movs	r3, #32
 804997c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8049980:	f8cd 800c 	str.w	r8, [sp, #12]
 8049984:	2330      	movs	r3, #48	; 0x30
 8049986:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8049b30 <_svfiprintf_r+0x1ec>
 804998a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804998e:	f04f 0901 	mov.w	r9, #1
 8049992:	4623      	mov	r3, r4
 8049994:	469a      	mov	sl, r3
 8049996:	f813 2b01 	ldrb.w	r2, [r3], #1
 804999a:	b10a      	cbz	r2, 80499a0 <_svfiprintf_r+0x5c>
 804999c:	2a25      	cmp	r2, #37	; 0x25
 804999e:	d1f9      	bne.n	8049994 <_svfiprintf_r+0x50>
 80499a0:	ebba 0b04 	subs.w	fp, sl, r4
 80499a4:	d00b      	beq.n	80499be <_svfiprintf_r+0x7a>
 80499a6:	465b      	mov	r3, fp
 80499a8:	4622      	mov	r2, r4
 80499aa:	4629      	mov	r1, r5
 80499ac:	4638      	mov	r0, r7
 80499ae:	f7ff ff6d 	bl	804988c <__ssputs_r>
 80499b2:	3001      	adds	r0, #1
 80499b4:	f000 80aa 	beq.w	8049b0c <_svfiprintf_r+0x1c8>
 80499b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80499ba:	445a      	add	r2, fp
 80499bc:	9209      	str	r2, [sp, #36]	; 0x24
 80499be:	f89a 3000 	ldrb.w	r3, [sl]
 80499c2:	2b00      	cmp	r3, #0
 80499c4:	f000 80a2 	beq.w	8049b0c <_svfiprintf_r+0x1c8>
 80499c8:	2300      	movs	r3, #0
 80499ca:	f04f 32ff 	mov.w	r2, #4294967295
 80499ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80499d2:	f10a 0a01 	add.w	sl, sl, #1
 80499d6:	9304      	str	r3, [sp, #16]
 80499d8:	9307      	str	r3, [sp, #28]
 80499da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80499de:	931a      	str	r3, [sp, #104]	; 0x68
 80499e0:	4654      	mov	r4, sl
 80499e2:	2205      	movs	r2, #5
 80499e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80499e8:	4851      	ldr	r0, [pc, #324]	; (8049b30 <_svfiprintf_r+0x1ec>)
 80499ea:	f7f6 fc01 	bl	80401f0 <memchr>
 80499ee:	9a04      	ldr	r2, [sp, #16]
 80499f0:	b9d8      	cbnz	r0, 8049a2a <_svfiprintf_r+0xe6>
 80499f2:	06d0      	lsls	r0, r2, #27
 80499f4:	bf44      	itt	mi
 80499f6:	2320      	movmi	r3, #32
 80499f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80499fc:	0711      	lsls	r1, r2, #28
 80499fe:	bf44      	itt	mi
 8049a00:	232b      	movmi	r3, #43	; 0x2b
 8049a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8049a06:	f89a 3000 	ldrb.w	r3, [sl]
 8049a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8049a0c:	d015      	beq.n	8049a3a <_svfiprintf_r+0xf6>
 8049a0e:	9a07      	ldr	r2, [sp, #28]
 8049a10:	4654      	mov	r4, sl
 8049a12:	2000      	movs	r0, #0
 8049a14:	f04f 0c0a 	mov.w	ip, #10
 8049a18:	4621      	mov	r1, r4
 8049a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8049a1e:	3b30      	subs	r3, #48	; 0x30
 8049a20:	2b09      	cmp	r3, #9
 8049a22:	d94e      	bls.n	8049ac2 <_svfiprintf_r+0x17e>
 8049a24:	b1b0      	cbz	r0, 8049a54 <_svfiprintf_r+0x110>
 8049a26:	9207      	str	r2, [sp, #28]
 8049a28:	e014      	b.n	8049a54 <_svfiprintf_r+0x110>
 8049a2a:	eba0 0308 	sub.w	r3, r0, r8
 8049a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8049a32:	4313      	orrs	r3, r2
 8049a34:	9304      	str	r3, [sp, #16]
 8049a36:	46a2      	mov	sl, r4
 8049a38:	e7d2      	b.n	80499e0 <_svfiprintf_r+0x9c>
 8049a3a:	9b03      	ldr	r3, [sp, #12]
 8049a3c:	1d19      	adds	r1, r3, #4
 8049a3e:	681b      	ldr	r3, [r3, #0]
 8049a40:	9103      	str	r1, [sp, #12]
 8049a42:	2b00      	cmp	r3, #0
 8049a44:	bfbb      	ittet	lt
 8049a46:	425b      	neglt	r3, r3
 8049a48:	f042 0202 	orrlt.w	r2, r2, #2
 8049a4c:	9307      	strge	r3, [sp, #28]
 8049a4e:	9307      	strlt	r3, [sp, #28]
 8049a50:	bfb8      	it	lt
 8049a52:	9204      	strlt	r2, [sp, #16]
 8049a54:	7823      	ldrb	r3, [r4, #0]
 8049a56:	2b2e      	cmp	r3, #46	; 0x2e
 8049a58:	d10c      	bne.n	8049a74 <_svfiprintf_r+0x130>
 8049a5a:	7863      	ldrb	r3, [r4, #1]
 8049a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8049a5e:	d135      	bne.n	8049acc <_svfiprintf_r+0x188>
 8049a60:	9b03      	ldr	r3, [sp, #12]
 8049a62:	1d1a      	adds	r2, r3, #4
 8049a64:	681b      	ldr	r3, [r3, #0]
 8049a66:	9203      	str	r2, [sp, #12]
 8049a68:	2b00      	cmp	r3, #0
 8049a6a:	bfb8      	it	lt
 8049a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8049a70:	3402      	adds	r4, #2
 8049a72:	9305      	str	r3, [sp, #20]
 8049a74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8049b40 <_svfiprintf_r+0x1fc>
 8049a78:	7821      	ldrb	r1, [r4, #0]
 8049a7a:	2203      	movs	r2, #3
 8049a7c:	4650      	mov	r0, sl
 8049a7e:	f7f6 fbb7 	bl	80401f0 <memchr>
 8049a82:	b140      	cbz	r0, 8049a96 <_svfiprintf_r+0x152>
 8049a84:	2340      	movs	r3, #64	; 0x40
 8049a86:	eba0 000a 	sub.w	r0, r0, sl
 8049a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8049a8e:	9b04      	ldr	r3, [sp, #16]
 8049a90:	4303      	orrs	r3, r0
 8049a92:	3401      	adds	r4, #1
 8049a94:	9304      	str	r3, [sp, #16]
 8049a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8049a9a:	4826      	ldr	r0, [pc, #152]	; (8049b34 <_svfiprintf_r+0x1f0>)
 8049a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8049aa0:	2206      	movs	r2, #6
 8049aa2:	f7f6 fba5 	bl	80401f0 <memchr>
 8049aa6:	2800      	cmp	r0, #0
 8049aa8:	d038      	beq.n	8049b1c <_svfiprintf_r+0x1d8>
 8049aaa:	4b23      	ldr	r3, [pc, #140]	; (8049b38 <_svfiprintf_r+0x1f4>)
 8049aac:	bb1b      	cbnz	r3, 8049af6 <_svfiprintf_r+0x1b2>
 8049aae:	9b03      	ldr	r3, [sp, #12]
 8049ab0:	3307      	adds	r3, #7
 8049ab2:	f023 0307 	bic.w	r3, r3, #7
 8049ab6:	3308      	adds	r3, #8
 8049ab8:	9303      	str	r3, [sp, #12]
 8049aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8049abc:	4433      	add	r3, r6
 8049abe:	9309      	str	r3, [sp, #36]	; 0x24
 8049ac0:	e767      	b.n	8049992 <_svfiprintf_r+0x4e>
 8049ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8049ac6:	460c      	mov	r4, r1
 8049ac8:	2001      	movs	r0, #1
 8049aca:	e7a5      	b.n	8049a18 <_svfiprintf_r+0xd4>
 8049acc:	2300      	movs	r3, #0
 8049ace:	3401      	adds	r4, #1
 8049ad0:	9305      	str	r3, [sp, #20]
 8049ad2:	4619      	mov	r1, r3
 8049ad4:	f04f 0c0a 	mov.w	ip, #10
 8049ad8:	4620      	mov	r0, r4
 8049ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8049ade:	3a30      	subs	r2, #48	; 0x30
 8049ae0:	2a09      	cmp	r2, #9
 8049ae2:	d903      	bls.n	8049aec <_svfiprintf_r+0x1a8>
 8049ae4:	2b00      	cmp	r3, #0
 8049ae6:	d0c5      	beq.n	8049a74 <_svfiprintf_r+0x130>
 8049ae8:	9105      	str	r1, [sp, #20]
 8049aea:	e7c3      	b.n	8049a74 <_svfiprintf_r+0x130>
 8049aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8049af0:	4604      	mov	r4, r0
 8049af2:	2301      	movs	r3, #1
 8049af4:	e7f0      	b.n	8049ad8 <_svfiprintf_r+0x194>
 8049af6:	ab03      	add	r3, sp, #12
 8049af8:	9300      	str	r3, [sp, #0]
 8049afa:	462a      	mov	r2, r5
 8049afc:	4b0f      	ldr	r3, [pc, #60]	; (8049b3c <_svfiprintf_r+0x1f8>)
 8049afe:	a904      	add	r1, sp, #16
 8049b00:	4638      	mov	r0, r7
 8049b02:	f7fd fcf9 	bl	80474f8 <_printf_float>
 8049b06:	1c42      	adds	r2, r0, #1
 8049b08:	4606      	mov	r6, r0
 8049b0a:	d1d6      	bne.n	8049aba <_svfiprintf_r+0x176>
 8049b0c:	89ab      	ldrh	r3, [r5, #12]
 8049b0e:	065b      	lsls	r3, r3, #25
 8049b10:	f53f af2c 	bmi.w	804996c <_svfiprintf_r+0x28>
 8049b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8049b16:	b01d      	add	sp, #116	; 0x74
 8049b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049b1c:	ab03      	add	r3, sp, #12
 8049b1e:	9300      	str	r3, [sp, #0]
 8049b20:	462a      	mov	r2, r5
 8049b22:	4b06      	ldr	r3, [pc, #24]	; (8049b3c <_svfiprintf_r+0x1f8>)
 8049b24:	a904      	add	r1, sp, #16
 8049b26:	4638      	mov	r0, r7
 8049b28:	f7fd ff8a 	bl	8047a40 <_printf_i>
 8049b2c:	e7eb      	b.n	8049b06 <_svfiprintf_r+0x1c2>
 8049b2e:	bf00      	nop
 8049b30:	0804a3d4 	.word	0x0804a3d4
 8049b34:	0804a3de 	.word	0x0804a3de
 8049b38:	080474f9 	.word	0x080474f9
 8049b3c:	0804988d 	.word	0x0804988d
 8049b40:	0804a3da 	.word	0x0804a3da

08049b44 <__sfputc_r>:
 8049b44:	6893      	ldr	r3, [r2, #8]
 8049b46:	3b01      	subs	r3, #1
 8049b48:	2b00      	cmp	r3, #0
 8049b4a:	b410      	push	{r4}
 8049b4c:	6093      	str	r3, [r2, #8]
 8049b4e:	da08      	bge.n	8049b62 <__sfputc_r+0x1e>
 8049b50:	6994      	ldr	r4, [r2, #24]
 8049b52:	42a3      	cmp	r3, r4
 8049b54:	db01      	blt.n	8049b5a <__sfputc_r+0x16>
 8049b56:	290a      	cmp	r1, #10
 8049b58:	d103      	bne.n	8049b62 <__sfputc_r+0x1e>
 8049b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8049b5e:	f7fe ba01 	b.w	8047f64 <__swbuf_r>
 8049b62:	6813      	ldr	r3, [r2, #0]
 8049b64:	1c58      	adds	r0, r3, #1
 8049b66:	6010      	str	r0, [r2, #0]
 8049b68:	7019      	strb	r1, [r3, #0]
 8049b6a:	4608      	mov	r0, r1
 8049b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8049b70:	4770      	bx	lr

08049b72 <__sfputs_r>:
 8049b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8049b74:	4606      	mov	r6, r0
 8049b76:	460f      	mov	r7, r1
 8049b78:	4614      	mov	r4, r2
 8049b7a:	18d5      	adds	r5, r2, r3
 8049b7c:	42ac      	cmp	r4, r5
 8049b7e:	d101      	bne.n	8049b84 <__sfputs_r+0x12>
 8049b80:	2000      	movs	r0, #0
 8049b82:	e007      	b.n	8049b94 <__sfputs_r+0x22>
 8049b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8049b88:	463a      	mov	r2, r7
 8049b8a:	4630      	mov	r0, r6
 8049b8c:	f7ff ffda 	bl	8049b44 <__sfputc_r>
 8049b90:	1c43      	adds	r3, r0, #1
 8049b92:	d1f3      	bne.n	8049b7c <__sfputs_r+0xa>
 8049b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08049b98 <_vfiprintf_r>:
 8049b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049b9c:	460d      	mov	r5, r1
 8049b9e:	b09d      	sub	sp, #116	; 0x74
 8049ba0:	4614      	mov	r4, r2
 8049ba2:	4698      	mov	r8, r3
 8049ba4:	4606      	mov	r6, r0
 8049ba6:	b118      	cbz	r0, 8049bb0 <_vfiprintf_r+0x18>
 8049ba8:	6983      	ldr	r3, [r0, #24]
 8049baa:	b90b      	cbnz	r3, 8049bb0 <_vfiprintf_r+0x18>
 8049bac:	f7fd fa94 	bl	80470d8 <__sinit>
 8049bb0:	4b89      	ldr	r3, [pc, #548]	; (8049dd8 <_vfiprintf_r+0x240>)
 8049bb2:	429d      	cmp	r5, r3
 8049bb4:	d11b      	bne.n	8049bee <_vfiprintf_r+0x56>
 8049bb6:	6875      	ldr	r5, [r6, #4]
 8049bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8049bba:	07d9      	lsls	r1, r3, #31
 8049bbc:	d405      	bmi.n	8049bca <_vfiprintf_r+0x32>
 8049bbe:	89ab      	ldrh	r3, [r5, #12]
 8049bc0:	059a      	lsls	r2, r3, #22
 8049bc2:	d402      	bmi.n	8049bca <_vfiprintf_r+0x32>
 8049bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8049bc6:	f7fd fb4a 	bl	804725e <__retarget_lock_acquire_recursive>
 8049bca:	89ab      	ldrh	r3, [r5, #12]
 8049bcc:	071b      	lsls	r3, r3, #28
 8049bce:	d501      	bpl.n	8049bd4 <_vfiprintf_r+0x3c>
 8049bd0:	692b      	ldr	r3, [r5, #16]
 8049bd2:	b9eb      	cbnz	r3, 8049c10 <_vfiprintf_r+0x78>
 8049bd4:	4629      	mov	r1, r5
 8049bd6:	4630      	mov	r0, r6
 8049bd8:	f7fe fa28 	bl	804802c <__swsetup_r>
 8049bdc:	b1c0      	cbz	r0, 8049c10 <_vfiprintf_r+0x78>
 8049bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8049be0:	07dc      	lsls	r4, r3, #31
 8049be2:	d50e      	bpl.n	8049c02 <_vfiprintf_r+0x6a>
 8049be4:	f04f 30ff 	mov.w	r0, #4294967295
 8049be8:	b01d      	add	sp, #116	; 0x74
 8049bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049bee:	4b7b      	ldr	r3, [pc, #492]	; (8049ddc <_vfiprintf_r+0x244>)
 8049bf0:	429d      	cmp	r5, r3
 8049bf2:	d101      	bne.n	8049bf8 <_vfiprintf_r+0x60>
 8049bf4:	68b5      	ldr	r5, [r6, #8]
 8049bf6:	e7df      	b.n	8049bb8 <_vfiprintf_r+0x20>
 8049bf8:	4b79      	ldr	r3, [pc, #484]	; (8049de0 <_vfiprintf_r+0x248>)
 8049bfa:	429d      	cmp	r5, r3
 8049bfc:	bf08      	it	eq
 8049bfe:	68f5      	ldreq	r5, [r6, #12]
 8049c00:	e7da      	b.n	8049bb8 <_vfiprintf_r+0x20>
 8049c02:	89ab      	ldrh	r3, [r5, #12]
 8049c04:	0598      	lsls	r0, r3, #22
 8049c06:	d4ed      	bmi.n	8049be4 <_vfiprintf_r+0x4c>
 8049c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8049c0a:	f7fd fb29 	bl	8047260 <__retarget_lock_release_recursive>
 8049c0e:	e7e9      	b.n	8049be4 <_vfiprintf_r+0x4c>
 8049c10:	2300      	movs	r3, #0
 8049c12:	9309      	str	r3, [sp, #36]	; 0x24
 8049c14:	2320      	movs	r3, #32
 8049c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8049c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8049c1e:	2330      	movs	r3, #48	; 0x30
 8049c20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8049de4 <_vfiprintf_r+0x24c>
 8049c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8049c28:	f04f 0901 	mov.w	r9, #1
 8049c2c:	4623      	mov	r3, r4
 8049c2e:	469a      	mov	sl, r3
 8049c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8049c34:	b10a      	cbz	r2, 8049c3a <_vfiprintf_r+0xa2>
 8049c36:	2a25      	cmp	r2, #37	; 0x25
 8049c38:	d1f9      	bne.n	8049c2e <_vfiprintf_r+0x96>
 8049c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8049c3e:	d00b      	beq.n	8049c58 <_vfiprintf_r+0xc0>
 8049c40:	465b      	mov	r3, fp
 8049c42:	4622      	mov	r2, r4
 8049c44:	4629      	mov	r1, r5
 8049c46:	4630      	mov	r0, r6
 8049c48:	f7ff ff93 	bl	8049b72 <__sfputs_r>
 8049c4c:	3001      	adds	r0, #1
 8049c4e:	f000 80aa 	beq.w	8049da6 <_vfiprintf_r+0x20e>
 8049c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8049c54:	445a      	add	r2, fp
 8049c56:	9209      	str	r2, [sp, #36]	; 0x24
 8049c58:	f89a 3000 	ldrb.w	r3, [sl]
 8049c5c:	2b00      	cmp	r3, #0
 8049c5e:	f000 80a2 	beq.w	8049da6 <_vfiprintf_r+0x20e>
 8049c62:	2300      	movs	r3, #0
 8049c64:	f04f 32ff 	mov.w	r2, #4294967295
 8049c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8049c6c:	f10a 0a01 	add.w	sl, sl, #1
 8049c70:	9304      	str	r3, [sp, #16]
 8049c72:	9307      	str	r3, [sp, #28]
 8049c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8049c78:	931a      	str	r3, [sp, #104]	; 0x68
 8049c7a:	4654      	mov	r4, sl
 8049c7c:	2205      	movs	r2, #5
 8049c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8049c82:	4858      	ldr	r0, [pc, #352]	; (8049de4 <_vfiprintf_r+0x24c>)
 8049c84:	f7f6 fab4 	bl	80401f0 <memchr>
 8049c88:	9a04      	ldr	r2, [sp, #16]
 8049c8a:	b9d8      	cbnz	r0, 8049cc4 <_vfiprintf_r+0x12c>
 8049c8c:	06d1      	lsls	r1, r2, #27
 8049c8e:	bf44      	itt	mi
 8049c90:	2320      	movmi	r3, #32
 8049c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8049c96:	0713      	lsls	r3, r2, #28
 8049c98:	bf44      	itt	mi
 8049c9a:	232b      	movmi	r3, #43	; 0x2b
 8049c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8049ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8049ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8049ca6:	d015      	beq.n	8049cd4 <_vfiprintf_r+0x13c>
 8049ca8:	9a07      	ldr	r2, [sp, #28]
 8049caa:	4654      	mov	r4, sl
 8049cac:	2000      	movs	r0, #0
 8049cae:	f04f 0c0a 	mov.w	ip, #10
 8049cb2:	4621      	mov	r1, r4
 8049cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8049cb8:	3b30      	subs	r3, #48	; 0x30
 8049cba:	2b09      	cmp	r3, #9
 8049cbc:	d94e      	bls.n	8049d5c <_vfiprintf_r+0x1c4>
 8049cbe:	b1b0      	cbz	r0, 8049cee <_vfiprintf_r+0x156>
 8049cc0:	9207      	str	r2, [sp, #28]
 8049cc2:	e014      	b.n	8049cee <_vfiprintf_r+0x156>
 8049cc4:	eba0 0308 	sub.w	r3, r0, r8
 8049cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8049ccc:	4313      	orrs	r3, r2
 8049cce:	9304      	str	r3, [sp, #16]
 8049cd0:	46a2      	mov	sl, r4
 8049cd2:	e7d2      	b.n	8049c7a <_vfiprintf_r+0xe2>
 8049cd4:	9b03      	ldr	r3, [sp, #12]
 8049cd6:	1d19      	adds	r1, r3, #4
 8049cd8:	681b      	ldr	r3, [r3, #0]
 8049cda:	9103      	str	r1, [sp, #12]
 8049cdc:	2b00      	cmp	r3, #0
 8049cde:	bfbb      	ittet	lt
 8049ce0:	425b      	neglt	r3, r3
 8049ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8049ce6:	9307      	strge	r3, [sp, #28]
 8049ce8:	9307      	strlt	r3, [sp, #28]
 8049cea:	bfb8      	it	lt
 8049cec:	9204      	strlt	r2, [sp, #16]
 8049cee:	7823      	ldrb	r3, [r4, #0]
 8049cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8049cf2:	d10c      	bne.n	8049d0e <_vfiprintf_r+0x176>
 8049cf4:	7863      	ldrb	r3, [r4, #1]
 8049cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8049cf8:	d135      	bne.n	8049d66 <_vfiprintf_r+0x1ce>
 8049cfa:	9b03      	ldr	r3, [sp, #12]
 8049cfc:	1d1a      	adds	r2, r3, #4
 8049cfe:	681b      	ldr	r3, [r3, #0]
 8049d00:	9203      	str	r2, [sp, #12]
 8049d02:	2b00      	cmp	r3, #0
 8049d04:	bfb8      	it	lt
 8049d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8049d0a:	3402      	adds	r4, #2
 8049d0c:	9305      	str	r3, [sp, #20]
 8049d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8049df4 <_vfiprintf_r+0x25c>
 8049d12:	7821      	ldrb	r1, [r4, #0]
 8049d14:	2203      	movs	r2, #3
 8049d16:	4650      	mov	r0, sl
 8049d18:	f7f6 fa6a 	bl	80401f0 <memchr>
 8049d1c:	b140      	cbz	r0, 8049d30 <_vfiprintf_r+0x198>
 8049d1e:	2340      	movs	r3, #64	; 0x40
 8049d20:	eba0 000a 	sub.w	r0, r0, sl
 8049d24:	fa03 f000 	lsl.w	r0, r3, r0
 8049d28:	9b04      	ldr	r3, [sp, #16]
 8049d2a:	4303      	orrs	r3, r0
 8049d2c:	3401      	adds	r4, #1
 8049d2e:	9304      	str	r3, [sp, #16]
 8049d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8049d34:	482c      	ldr	r0, [pc, #176]	; (8049de8 <_vfiprintf_r+0x250>)
 8049d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8049d3a:	2206      	movs	r2, #6
 8049d3c:	f7f6 fa58 	bl	80401f0 <memchr>
 8049d40:	2800      	cmp	r0, #0
 8049d42:	d03f      	beq.n	8049dc4 <_vfiprintf_r+0x22c>
 8049d44:	4b29      	ldr	r3, [pc, #164]	; (8049dec <_vfiprintf_r+0x254>)
 8049d46:	bb1b      	cbnz	r3, 8049d90 <_vfiprintf_r+0x1f8>
 8049d48:	9b03      	ldr	r3, [sp, #12]
 8049d4a:	3307      	adds	r3, #7
 8049d4c:	f023 0307 	bic.w	r3, r3, #7
 8049d50:	3308      	adds	r3, #8
 8049d52:	9303      	str	r3, [sp, #12]
 8049d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8049d56:	443b      	add	r3, r7
 8049d58:	9309      	str	r3, [sp, #36]	; 0x24
 8049d5a:	e767      	b.n	8049c2c <_vfiprintf_r+0x94>
 8049d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8049d60:	460c      	mov	r4, r1
 8049d62:	2001      	movs	r0, #1
 8049d64:	e7a5      	b.n	8049cb2 <_vfiprintf_r+0x11a>
 8049d66:	2300      	movs	r3, #0
 8049d68:	3401      	adds	r4, #1
 8049d6a:	9305      	str	r3, [sp, #20]
 8049d6c:	4619      	mov	r1, r3
 8049d6e:	f04f 0c0a 	mov.w	ip, #10
 8049d72:	4620      	mov	r0, r4
 8049d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8049d78:	3a30      	subs	r2, #48	; 0x30
 8049d7a:	2a09      	cmp	r2, #9
 8049d7c:	d903      	bls.n	8049d86 <_vfiprintf_r+0x1ee>
 8049d7e:	2b00      	cmp	r3, #0
 8049d80:	d0c5      	beq.n	8049d0e <_vfiprintf_r+0x176>
 8049d82:	9105      	str	r1, [sp, #20]
 8049d84:	e7c3      	b.n	8049d0e <_vfiprintf_r+0x176>
 8049d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8049d8a:	4604      	mov	r4, r0
 8049d8c:	2301      	movs	r3, #1
 8049d8e:	e7f0      	b.n	8049d72 <_vfiprintf_r+0x1da>
 8049d90:	ab03      	add	r3, sp, #12
 8049d92:	9300      	str	r3, [sp, #0]
 8049d94:	462a      	mov	r2, r5
 8049d96:	4b16      	ldr	r3, [pc, #88]	; (8049df0 <_vfiprintf_r+0x258>)
 8049d98:	a904      	add	r1, sp, #16
 8049d9a:	4630      	mov	r0, r6
 8049d9c:	f7fd fbac 	bl	80474f8 <_printf_float>
 8049da0:	4607      	mov	r7, r0
 8049da2:	1c78      	adds	r0, r7, #1
 8049da4:	d1d6      	bne.n	8049d54 <_vfiprintf_r+0x1bc>
 8049da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8049da8:	07d9      	lsls	r1, r3, #31
 8049daa:	d405      	bmi.n	8049db8 <_vfiprintf_r+0x220>
 8049dac:	89ab      	ldrh	r3, [r5, #12]
 8049dae:	059a      	lsls	r2, r3, #22
 8049db0:	d402      	bmi.n	8049db8 <_vfiprintf_r+0x220>
 8049db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8049db4:	f7fd fa54 	bl	8047260 <__retarget_lock_release_recursive>
 8049db8:	89ab      	ldrh	r3, [r5, #12]
 8049dba:	065b      	lsls	r3, r3, #25
 8049dbc:	f53f af12 	bmi.w	8049be4 <_vfiprintf_r+0x4c>
 8049dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8049dc2:	e711      	b.n	8049be8 <_vfiprintf_r+0x50>
 8049dc4:	ab03      	add	r3, sp, #12
 8049dc6:	9300      	str	r3, [sp, #0]
 8049dc8:	462a      	mov	r2, r5
 8049dca:	4b09      	ldr	r3, [pc, #36]	; (8049df0 <_vfiprintf_r+0x258>)
 8049dcc:	a904      	add	r1, sp, #16
 8049dce:	4630      	mov	r0, r6
 8049dd0:	f7fd fe36 	bl	8047a40 <_printf_i>
 8049dd4:	e7e4      	b.n	8049da0 <_vfiprintf_r+0x208>
 8049dd6:	bf00      	nop
 8049dd8:	0804a174 	.word	0x0804a174
 8049ddc:	0804a194 	.word	0x0804a194
 8049de0:	0804a154 	.word	0x0804a154
 8049de4:	0804a3d4 	.word	0x0804a3d4
 8049de8:	0804a3de 	.word	0x0804a3de
 8049dec:	080474f9 	.word	0x080474f9
 8049df0:	08049b73 	.word	0x08049b73
 8049df4:	0804a3da 	.word	0x0804a3da

08049df8 <_read_r>:
 8049df8:	b538      	push	{r3, r4, r5, lr}
 8049dfa:	4d07      	ldr	r5, [pc, #28]	; (8049e18 <_read_r+0x20>)
 8049dfc:	4604      	mov	r4, r0
 8049dfe:	4608      	mov	r0, r1
 8049e00:	4611      	mov	r1, r2
 8049e02:	2200      	movs	r2, #0
 8049e04:	602a      	str	r2, [r5, #0]
 8049e06:	461a      	mov	r2, r3
 8049e08:	f7f8 fc7c 	bl	8042704 <_read>
 8049e0c:	1c43      	adds	r3, r0, #1
 8049e0e:	d102      	bne.n	8049e16 <_read_r+0x1e>
 8049e10:	682b      	ldr	r3, [r5, #0]
 8049e12:	b103      	cbz	r3, 8049e16 <_read_r+0x1e>
 8049e14:	6023      	str	r3, [r4, #0]
 8049e16:	bd38      	pop	{r3, r4, r5, pc}
 8049e18:	20004398 	.word	0x20004398

08049e1c <__assert_func>:
 8049e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8049e1e:	4614      	mov	r4, r2
 8049e20:	461a      	mov	r2, r3
 8049e22:	4b09      	ldr	r3, [pc, #36]	; (8049e48 <__assert_func+0x2c>)
 8049e24:	681b      	ldr	r3, [r3, #0]
 8049e26:	4605      	mov	r5, r0
 8049e28:	68d8      	ldr	r0, [r3, #12]
 8049e2a:	b14c      	cbz	r4, 8049e40 <__assert_func+0x24>
 8049e2c:	4b07      	ldr	r3, [pc, #28]	; (8049e4c <__assert_func+0x30>)
 8049e2e:	9100      	str	r1, [sp, #0]
 8049e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8049e34:	4906      	ldr	r1, [pc, #24]	; (8049e50 <__assert_func+0x34>)
 8049e36:	462b      	mov	r3, r5
 8049e38:	f000 f80e 	bl	8049e58 <fiprintf>
 8049e3c:	f000 f8a8 	bl	8049f90 <abort>
 8049e40:	4b04      	ldr	r3, [pc, #16]	; (8049e54 <__assert_func+0x38>)
 8049e42:	461c      	mov	r4, r3
 8049e44:	e7f3      	b.n	8049e2e <__assert_func+0x12>
 8049e46:	bf00      	nop
 8049e48:	20000010 	.word	0x20000010
 8049e4c:	0804a3e5 	.word	0x0804a3e5
 8049e50:	0804a3f2 	.word	0x0804a3f2
 8049e54:	0804a420 	.word	0x0804a420

08049e58 <fiprintf>:
 8049e58:	b40e      	push	{r1, r2, r3}
 8049e5a:	b503      	push	{r0, r1, lr}
 8049e5c:	4601      	mov	r1, r0
 8049e5e:	ab03      	add	r3, sp, #12
 8049e60:	4805      	ldr	r0, [pc, #20]	; (8049e78 <fiprintf+0x20>)
 8049e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8049e66:	6800      	ldr	r0, [r0, #0]
 8049e68:	9301      	str	r3, [sp, #4]
 8049e6a:	f7ff fe95 	bl	8049b98 <_vfiprintf_r>
 8049e6e:	b002      	add	sp, #8
 8049e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8049e74:	b003      	add	sp, #12
 8049e76:	4770      	bx	lr
 8049e78:	20000010 	.word	0x20000010

08049e7c <_fstat_r>:
 8049e7c:	b538      	push	{r3, r4, r5, lr}
 8049e7e:	4d07      	ldr	r5, [pc, #28]	; (8049e9c <_fstat_r+0x20>)
 8049e80:	2300      	movs	r3, #0
 8049e82:	4604      	mov	r4, r0
 8049e84:	4608      	mov	r0, r1
 8049e86:	4611      	mov	r1, r2
 8049e88:	602b      	str	r3, [r5, #0]
 8049e8a:	f7f8 fc80 	bl	804278e <_fstat>
 8049e8e:	1c43      	adds	r3, r0, #1
 8049e90:	d102      	bne.n	8049e98 <_fstat_r+0x1c>
 8049e92:	682b      	ldr	r3, [r5, #0]
 8049e94:	b103      	cbz	r3, 8049e98 <_fstat_r+0x1c>
 8049e96:	6023      	str	r3, [r4, #0]
 8049e98:	bd38      	pop	{r3, r4, r5, pc}
 8049e9a:	bf00      	nop
 8049e9c:	20004398 	.word	0x20004398

08049ea0 <_isatty_r>:
 8049ea0:	b538      	push	{r3, r4, r5, lr}
 8049ea2:	4d06      	ldr	r5, [pc, #24]	; (8049ebc <_isatty_r+0x1c>)
 8049ea4:	2300      	movs	r3, #0
 8049ea6:	4604      	mov	r4, r0
 8049ea8:	4608      	mov	r0, r1
 8049eaa:	602b      	str	r3, [r5, #0]
 8049eac:	f7f8 fc7f 	bl	80427ae <_isatty>
 8049eb0:	1c43      	adds	r3, r0, #1
 8049eb2:	d102      	bne.n	8049eba <_isatty_r+0x1a>
 8049eb4:	682b      	ldr	r3, [r5, #0]
 8049eb6:	b103      	cbz	r3, 8049eba <_isatty_r+0x1a>
 8049eb8:	6023      	str	r3, [r4, #0]
 8049eba:	bd38      	pop	{r3, r4, r5, pc}
 8049ebc:	20004398 	.word	0x20004398

08049ec0 <__ascii_mbtowc>:
 8049ec0:	b082      	sub	sp, #8
 8049ec2:	b901      	cbnz	r1, 8049ec6 <__ascii_mbtowc+0x6>
 8049ec4:	a901      	add	r1, sp, #4
 8049ec6:	b142      	cbz	r2, 8049eda <__ascii_mbtowc+0x1a>
 8049ec8:	b14b      	cbz	r3, 8049ede <__ascii_mbtowc+0x1e>
 8049eca:	7813      	ldrb	r3, [r2, #0]
 8049ecc:	600b      	str	r3, [r1, #0]
 8049ece:	7812      	ldrb	r2, [r2, #0]
 8049ed0:	1e10      	subs	r0, r2, #0
 8049ed2:	bf18      	it	ne
 8049ed4:	2001      	movne	r0, #1
 8049ed6:	b002      	add	sp, #8
 8049ed8:	4770      	bx	lr
 8049eda:	4610      	mov	r0, r2
 8049edc:	e7fb      	b.n	8049ed6 <__ascii_mbtowc+0x16>
 8049ede:	f06f 0001 	mvn.w	r0, #1
 8049ee2:	e7f8      	b.n	8049ed6 <__ascii_mbtowc+0x16>

08049ee4 <memmove>:
 8049ee4:	4288      	cmp	r0, r1
 8049ee6:	b510      	push	{r4, lr}
 8049ee8:	eb01 0402 	add.w	r4, r1, r2
 8049eec:	d902      	bls.n	8049ef4 <memmove+0x10>
 8049eee:	4284      	cmp	r4, r0
 8049ef0:	4623      	mov	r3, r4
 8049ef2:	d807      	bhi.n	8049f04 <memmove+0x20>
 8049ef4:	1e43      	subs	r3, r0, #1
 8049ef6:	42a1      	cmp	r1, r4
 8049ef8:	d008      	beq.n	8049f0c <memmove+0x28>
 8049efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8049efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8049f02:	e7f8      	b.n	8049ef6 <memmove+0x12>
 8049f04:	4402      	add	r2, r0
 8049f06:	4601      	mov	r1, r0
 8049f08:	428a      	cmp	r2, r1
 8049f0a:	d100      	bne.n	8049f0e <memmove+0x2a>
 8049f0c:	bd10      	pop	{r4, pc}
 8049f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8049f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8049f16:	e7f7      	b.n	8049f08 <memmove+0x24>

08049f18 <_realloc_r>:
 8049f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8049f1c:	4680      	mov	r8, r0
 8049f1e:	4614      	mov	r4, r2
 8049f20:	460e      	mov	r6, r1
 8049f22:	b921      	cbnz	r1, 8049f2e <_realloc_r+0x16>
 8049f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8049f28:	4611      	mov	r1, r2
 8049f2a:	f7fd b9d1 	b.w	80472d0 <_malloc_r>
 8049f2e:	b92a      	cbnz	r2, 8049f3c <_realloc_r+0x24>
 8049f30:	f7ff fc60 	bl	80497f4 <_free_r>
 8049f34:	4625      	mov	r5, r4
 8049f36:	4628      	mov	r0, r5
 8049f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8049f3c:	f000 f82f 	bl	8049f9e <_malloc_usable_size_r>
 8049f40:	4284      	cmp	r4, r0
 8049f42:	4607      	mov	r7, r0
 8049f44:	d802      	bhi.n	8049f4c <_realloc_r+0x34>
 8049f46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8049f4a:	d812      	bhi.n	8049f72 <_realloc_r+0x5a>
 8049f4c:	4621      	mov	r1, r4
 8049f4e:	4640      	mov	r0, r8
 8049f50:	f7fd f9be 	bl	80472d0 <_malloc_r>
 8049f54:	4605      	mov	r5, r0
 8049f56:	2800      	cmp	r0, #0
 8049f58:	d0ed      	beq.n	8049f36 <_realloc_r+0x1e>
 8049f5a:	42bc      	cmp	r4, r7
 8049f5c:	4622      	mov	r2, r4
 8049f5e:	4631      	mov	r1, r6
 8049f60:	bf28      	it	cs
 8049f62:	463a      	movcs	r2, r7
 8049f64:	f7fd f97d 	bl	8047262 <memcpy>
 8049f68:	4631      	mov	r1, r6
 8049f6a:	4640      	mov	r0, r8
 8049f6c:	f7ff fc42 	bl	80497f4 <_free_r>
 8049f70:	e7e1      	b.n	8049f36 <_realloc_r+0x1e>
 8049f72:	4635      	mov	r5, r6
 8049f74:	e7df      	b.n	8049f36 <_realloc_r+0x1e>

08049f76 <__ascii_wctomb>:
 8049f76:	b149      	cbz	r1, 8049f8c <__ascii_wctomb+0x16>
 8049f78:	2aff      	cmp	r2, #255	; 0xff
 8049f7a:	bf85      	ittet	hi
 8049f7c:	238a      	movhi	r3, #138	; 0x8a
 8049f7e:	6003      	strhi	r3, [r0, #0]
 8049f80:	700a      	strbls	r2, [r1, #0]
 8049f82:	f04f 30ff 	movhi.w	r0, #4294967295
 8049f86:	bf98      	it	ls
 8049f88:	2001      	movls	r0, #1
 8049f8a:	4770      	bx	lr
 8049f8c:	4608      	mov	r0, r1
 8049f8e:	4770      	bx	lr

08049f90 <abort>:
 8049f90:	b508      	push	{r3, lr}
 8049f92:	2006      	movs	r0, #6
 8049f94:	f000 f834 	bl	804a000 <raise>
 8049f98:	2001      	movs	r0, #1
 8049f9a:	f7f8 fba9 	bl	80426f0 <_exit>

08049f9e <_malloc_usable_size_r>:
 8049f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8049fa2:	1f18      	subs	r0, r3, #4
 8049fa4:	2b00      	cmp	r3, #0
 8049fa6:	bfbc      	itt	lt
 8049fa8:	580b      	ldrlt	r3, [r1, r0]
 8049faa:	18c0      	addlt	r0, r0, r3
 8049fac:	4770      	bx	lr

08049fae <_raise_r>:
 8049fae:	291f      	cmp	r1, #31
 8049fb0:	b538      	push	{r3, r4, r5, lr}
 8049fb2:	4604      	mov	r4, r0
 8049fb4:	460d      	mov	r5, r1
 8049fb6:	d904      	bls.n	8049fc2 <_raise_r+0x14>
 8049fb8:	2316      	movs	r3, #22
 8049fba:	6003      	str	r3, [r0, #0]
 8049fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8049fc0:	bd38      	pop	{r3, r4, r5, pc}
 8049fc2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8049fc4:	b112      	cbz	r2, 8049fcc <_raise_r+0x1e>
 8049fc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8049fca:	b94b      	cbnz	r3, 8049fe0 <_raise_r+0x32>
 8049fcc:	4620      	mov	r0, r4
 8049fce:	f000 f831 	bl	804a034 <_getpid_r>
 8049fd2:	462a      	mov	r2, r5
 8049fd4:	4601      	mov	r1, r0
 8049fd6:	4620      	mov	r0, r4
 8049fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8049fdc:	f000 b818 	b.w	804a010 <_kill_r>
 8049fe0:	2b01      	cmp	r3, #1
 8049fe2:	d00a      	beq.n	8049ffa <_raise_r+0x4c>
 8049fe4:	1c59      	adds	r1, r3, #1
 8049fe6:	d103      	bne.n	8049ff0 <_raise_r+0x42>
 8049fe8:	2316      	movs	r3, #22
 8049fea:	6003      	str	r3, [r0, #0]
 8049fec:	2001      	movs	r0, #1
 8049fee:	e7e7      	b.n	8049fc0 <_raise_r+0x12>
 8049ff0:	2400      	movs	r4, #0
 8049ff2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8049ff6:	4628      	mov	r0, r5
 8049ff8:	4798      	blx	r3
 8049ffa:	2000      	movs	r0, #0
 8049ffc:	e7e0      	b.n	8049fc0 <_raise_r+0x12>
	...

0804a000 <raise>:
 804a000:	4b02      	ldr	r3, [pc, #8]	; (804a00c <raise+0xc>)
 804a002:	4601      	mov	r1, r0
 804a004:	6818      	ldr	r0, [r3, #0]
 804a006:	f7ff bfd2 	b.w	8049fae <_raise_r>
 804a00a:	bf00      	nop
 804a00c:	20000010 	.word	0x20000010

0804a010 <_kill_r>:
 804a010:	b538      	push	{r3, r4, r5, lr}
 804a012:	4d07      	ldr	r5, [pc, #28]	; (804a030 <_kill_r+0x20>)
 804a014:	2300      	movs	r3, #0
 804a016:	4604      	mov	r4, r0
 804a018:	4608      	mov	r0, r1
 804a01a:	4611      	mov	r1, r2
 804a01c:	602b      	str	r3, [r5, #0]
 804a01e:	f7f8 fb57 	bl	80426d0 <_kill>
 804a022:	1c43      	adds	r3, r0, #1
 804a024:	d102      	bne.n	804a02c <_kill_r+0x1c>
 804a026:	682b      	ldr	r3, [r5, #0]
 804a028:	b103      	cbz	r3, 804a02c <_kill_r+0x1c>
 804a02a:	6023      	str	r3, [r4, #0]
 804a02c:	bd38      	pop	{r3, r4, r5, pc}
 804a02e:	bf00      	nop
 804a030:	20004398 	.word	0x20004398

0804a034 <_getpid_r>:
 804a034:	f7f8 bb44 	b.w	80426c0 <_getpid>

0804a038 <_init>:
 804a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804a03a:	bf00      	nop
 804a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804a03e:	bc08      	pop	{r3}
 804a040:	469e      	mov	lr, r3
 804a042:	4770      	bx	lr

0804a044 <_fini>:
 804a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804a046:	bf00      	nop
 804a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804a04a:	bc08      	pop	{r3}
 804a04c:	469e      	mov	lr, r3
 804a04e:	4770      	bx	lr
